<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>10-学习型索引-Updatable</title>
      <link href="posts/72ac.html"/>
      <url>posts/72ac.html</url>
      
        <content type="html"><![CDATA[<h2 id="Updatable-Learned-Indexes-Meet-Disk-Resident-DBMS"><a href="#Updatable-Learned-Indexes-Meet-Disk-Resident-DBMS" class="headerlink" title="Updatable Learned Indexes Meet Disk-Resident DBMS"></a>Updatable Learned Indexes Meet Disk-Resident DBMS</h2><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>尽管近年来提出了许多可更新的学习索引，但它们是否能够超越磁盘上的传统方法仍然未知。在这项研究中，我们重新审视并在磁盘上实现了四个最先进的可更新学习索引，并在各种设置下将它们与 B+ 树进行比较。</p><p>通过我们的评估，我们得出了一些关键观察结果：1) <strong>总体而言，B+ 树在一系列工作负载类型和数据集上表现良好</strong>。 2) 对于特定工作负载，学习索引的性能可能优于 B+ 树或磁盘上的其他学习索引。例如，PGM 在只写工作负载中实现了最佳性能，而 LIPP 在仅查找工作负载中显着优于其他工作负载。我们进一步进行详细的性能分析，以揭示磁盘上这些学习索引的优点和缺点。此外，我们总结了五个类别中观察到的常见缺点，并提出了四个设计原则来指导磁盘上可更新学习索引的未来设计：（1）减少索引的树高度，（2）更好的数据结构以降低操作开销，（ 3）提高扫描操作的效率，以及（4）更有效的存储布局。</p><hr><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在学习索引[12]的先驱工作中展示的有前途的内存性能概况的推动下，随后提出了几种内存中、可更新的学习索引[7,9,10,30]。它们的内存优势也在最近的综合评估中得到了验证[29]。</p><p>与此同时，许多广泛使用的数据库管理系统（DBMS）仍然依赖基于磁盘的操作，主要原因有两个：（1）主内存的大小有限，索引的总大小可能超过商用硬件上可用的总 RAM [ 4]; (2) 在 DBMS 中，主内存还用于执行昂贵的数据处理操作，例如连接或排序，或执行数据建模和分析。因此，如果所有索引数据结构也都加载到主存储器中，则这些操作可能执行得很差，或者在最坏的情况下，根本无法运行。此外，可更新的磁盘索引对于支持两种常见工作负载类型至关重要：<strong>在线事务处理 (OLTP) 工作负载和混合事务/分析处理 (HTAP) 工作负载</strong>。 </p><p>为此，仍然存在一个重要的问题——可更新的学习索引能否完全取代传统的磁盘索引，例如 B+ 树？然而，还没有任何研究尝试在磁盘上实现这些可更新的学习索引，更不用说对其磁盘性能进行全面评估了[13]。</p><p>为了回答这个问题，我们首次使用磁盘上的一维数据来研究、扩展、实现和评估可更新的学习索引，有两个关键目标：（1）<strong>更好地理解内存中的学习索引在磁盘上的设置</strong>； (2) <strong>为从业者和研究人员提供我们在将学习索引适应磁盘驻留设置时发现的设计决策</strong>。总之，这项工作做出了以下贡献：</p><ul><li><p>我们比较和对比了四种最先进的、内存中的、可更新的学习索引（FITing-tree [10]、ALEX [7]、PGM [9] 和 LIPP [30]），并展示了如何将它们扩展并实现为磁盘索引。具体来说，我们首先在第 2 节中讨论每个索引如何支持内存中操作。然后，在第 3 节中，我们展示在这些索引中做出的设计决策如何影响不同类型的工作负载，例如叶节点中的数据分区或搜索。接下来，在第 4 节中，我们将展示如何在磁盘上扩展和实现它们中的每一个，并讨论每个学习索引的外部内存 (EM) 模型性能范围。一些学习到的索引很难重新实现为磁盘数据结构，例如 ALEX 是最困难的。</p></li><li><p>我们研究磁盘操作如何影响学习索引，并将它们与 B+ 树进行比较——B+树是数据库社区中最有效和最常用的磁盘数据结构之一。我们在第 5-6 节中进行了全面评估，并使用 11 个不同的数据集和 6 种工作负载类型（即 HDD 磁盘和 HDD 磁盘）上的查找、扫描、插入、大量读取、大量写入以及平衡读写来测试索引。这些数据集在使用线性函数建模的难度方面表现出各种不同的属性，这是大多数学习索引模型中最常见的方法。我们还研究了在主内存中缓存这些索引的内部节点的影响。最后，我们通过报告尾部延迟来研究每个索引的存储使用情况、块大小的影响以及每个索引的鲁棒性。根据我们的评估结果，我们创建了一组观察结果 (O)，并提供了关键要点，可总结如下（详细观察结果可在第 6 节中找到）：</p><ul><li>K1：磁盘性能 (O1-O13)：每个学习索引都有优点和缺点 —-但在磁盘设置中，在所有测试的工作负载中，它们都无法与 B+ 树竞争。</li><li>K2：主内存影响（O14-O15）：当在主内存中缓存内部节点时，B+树在所有测试的工作负载、所有数据集上都可以优于学习索引，因为用于搜索和插入的学习索引的主要开销在“最后一英里” ” – 叶节点遍历，始终大于 B+ 树叶节点。</li><li>K3：存储使用 (O16)：当在比较中包含叶节点大小时，除 PGM 之外，现有的学习索引需要比磁盘上的 B+ 树更多的空间，甚至可以大 20 倍。磁盘上使用的空间无法轻易回收，并且学习索引需要对索引结构进行重大修改，这进一步增加了存储大小。</li><li>K4：块大小的影响 (O17)：较大的块大小有助于减少 FITing-tree、ALEX 和 PGM 中获取的块总数，但 LIPP 并未显示出这种更改带来的任何好处。</li><li>K5：鲁棒性 (O18)：在大多数评估设置中，B+ 树具有更稳定和更小的 p99 延迟，这意味着尾部查询要少得多，且明显慢于平均值。</li></ul><hr></li><li><p>我们讨论创建磁盘上的可更新学习索引时必须考虑的重要设计决策。根据我们的评估观察，我们在第 7.1 节中总结了磁盘上可更新学习索引的常见缺点。最后，我们在第 7.2 节中提出了四个重要的设计原则来指导磁盘上可更新学习索引的未来设计：</p><ul><li>降低索引从根节点到叶节点的高度； </li><li>更好的数据结构以降低操作开销； </li><li>提高扫描操作的效率； </li><li>更高效的存储布局。</li></ul></li></ul><p>我们相信这些原则和我们的实现 [1] 将帮助研究人员和从业者开发新的磁盘驻留学习索引，这些索引可用于许多实际应用。</p><hr><h3 id="重新审视可更新的学习索引"><a href="#重新审视可更新的学习索引" class="headerlink" title="重新审视可更新的学习索引"></a>重新审视可更新的学习索引</h3><p>我们现在详细回顾四个可更新的学习索引，并讨论与我们的工作相关的其他索引。根据它们的构造方式，我们将它们大致分为两类：自底向上，包括 FITing-tree 和 PGM；自上而下，包括 ALEX 和 LIPP。</p><p>表 1 提供了它们的分类。对于每个索引，我们描述索引结构，然后描述如何执行查找和插入操作。</p><img src="/posts/72ac/image-20240429130616423.png" class title="image-20240429130616423"><h4 id="自下而上构建的学习索引"><a href="#自下而上构建的学习索引" class="headerlink" title="自下而上构建的学习索引"></a>自下而上构建的学习索引</h4><h5 id="FITing-Tree-10"><a href="#FITing-Tree-10" class="headerlink" title="FITing-Tree[10]"></a>FITing-Tree[10]</h5><p>图 1(a) 显示了 FITing 树的布局。给定一个误差界限（它指示一个键的预测位置与其真实位置之间的最大距离），拟合树首先应用贪婪方法将排序数组分割成段，其中每个段包含一个线性模型（段的第一个键和段斜率）来预测关键点的位置。然后，在每个线性模型覆盖的键上构建 B+ 树。</p><p>为了支持查找操作，FITing 树首先使用内部节点的线性扫描从根节点遍历到叶节点。定位到包含搜索关键字的段后，使用学习到的线性模型来预测位置 pred_pos，然后对范围 [pred_pos-error, pred_pos+error] 应用二分搜索。</p><p>为了支持插入操作，FITing-tree 有两种策略：就地插入策略和增量插入策略。对于就地插入策略，每个段的开头和结尾添加了𝜀 空槽。该指数的预定义误差界限等于 𝑒 + 𝜀，其中 𝑒 源自线性模型的误差。如果段已满，则会在 目标段的关键有效负载对 上调用贪婪方法，以使用重新分段操作创建新段。增量插入策略为每个段添加一个缓冲区。新的键-有效负载对 首先插入到缓冲区中。当缓冲区满时，会触发重新分段操作。</p><h5 id="PGM"><a href="#PGM" class="headerlink" title="PGM"></a>PGM</h5><p>给定预定义的误差范围，PGM 使用流算法 [23] 而不是贪婪算法来创建段和关联的线性模型（起始键、斜率和截距）。然后，递归地应用流算法来构造模型中键的父节点。</p><p>为了支持查找操作，PGM 首先使用模型来预测位置 pos，然后在范围 [pred_pos-error, pred_pos+error] 上应用二分搜索。</p><p>为了支持插入操作，针对仅附加插入和任意插入提出了不同的插入机制。对于仅追加插入，PGM 首先尝试将新键添加到结束段中，并检查它是否超出目标错误界限。如果没有，则插入完成；否则，将使用新键创建新段，并相应更新父节点。如图1(b)所示，对于任意插入，PGM同时维护多个不同大小的索引，并采用LSM树的思想将许多小索引合并为一个较大的索引。</p><hr><h4 id="自上而下构建的学习索引"><a href="#自上而下构建的学习索引" class="headerlink" title="自上而下构建的学习索引"></a>自上而下构建的学习索引</h4><h5 id="ALEX"><a href="#ALEX" class="headerlink" title="ALEX"></a>ALEX</h5><p>图 1(c) 是原始论文 [7] 中描述的 ALEX 索引的一个实例。Alex 有两种节点类型 - 内部节点和数据节点；两者都包含一个数组和一个线性模型来预测关联数组中的位置。内部节点中的数组是一个存储子指针的指针数组。数据节点中的数组是一个有间隙的数组，用于存储键-有效负载对。空槽和键-有效负载对是交错的，这样可以通过减少移位操作来找到第一个可用槽，从而减少插入成本开销。位图用于更轻松地识别空槽。 为了支持查找操作，ALEX 使用基于模型的搜索从根遍历到数据节点。当使用基于模型的插入时，内部节点的预测位置不需要任何额外的搜索过程。当到达叶节点时，ALEX 首先调用模型来预测位置，然后执行指数搜索以在需要时找到最终位置。 为了支持插入操作，ALEX 首先使用搜索过程来查找键所在的槽。如果该槽位已被占用，ALEX 会移动item以获得新键的空槽位。当节点已满时，会触发 SMO（结构修改操作），该操作决定如何更新索引结构。ALEX 对 SMO 使用了四种机制，并提供了更新树结构的成本模型。</p><hr><h5 id="LIPP"><a href="#LIPP" class="headerlink" title="LIPP"></a>LIPP</h5><p>LIPP 具有单节点类型，如图 1(d) 所示。 LIPP 中的每个节点都有一个数据数组、一个位数组和一个线性模型。数据数组中的每个元素可以是三种类型之一：DATA、NULL 和 NODE。位数组标识元素类型。线性模型预测在查找期间要访问哪个槽。 LIPP首先采用<strong>最快最小冲突度（FMCD）算法</strong>来获得具有最小“冲突度”（同一槽中插入的键的最大数量）的节点的线性模型。然后，LIPP 使用生成的模型将键集插入到单个节点中。如果只有一个键插入到一个槽中，则该槽被标记为DATA并存储 键-有效负载对。如果多个键位于一个槽中，则该槽被标记为 NODE，其中存储指向子节点的指针。 LIPP 使用相同的过程为任何冲突的键构建一个新的子节点。</p><p><strong>为了支持查找操作，LIPP 在每个节点中使用线性模型来预测位置。如果插槽是 NODE，则它访问其子插槽。如果槽是 DATA，它会检查该槽中的键是否与查找键相同 - 如果为真，则返回有效负载；否则，返回 null。如果槽为NULL，则返回null</strong>。</p><p><strong>为了支持插入操作，LIPP 首先执行搜索来查找哪个槽应保存新键。如果槽为 NULL，LIPP 会将新键插入到该槽中。如果槽是DATA，LIPP将为插入的key和该槽中的key创建一个新节点，将该槽标记为NODE，并存储新节点的指针</strong>。</p><hr><h4 id="其他可更新的学习索引"><a href="#其他可更新的学习索引" class="headerlink" title="其他可更新的学习索引"></a>其他可更新的学习索引</h4><p>模型 B+-tree [17] 和 RUSLI [20] 是最近提出的两个可更新学习索引。模型 B+-Tree 为每个 B+-tree 节点构建模型来预测要访问哪个子节点，并使用类似于 B+-tree 的更新过程。<strong>如果根据预测误差预测的叶节点不是目标节点，则模型 B+ 树将比 B+ 树获取更多节点来定位目标叶节点，这在某些情况下可能会产生很大的开销</strong>。因此，我们在研究中省略了该指数。 RUSLI 通过添加溢出数组扩展了 RadixSpline [11] 以支持插入。然而，它有一个非常严格的假设——插入键必须从均匀分布中提取。由于这种假设在实践中很少成立，因此我们没有将这种方法纳入我们的研究中。【RUSLI 没研究意义】</p><p>研究 [4, 6] 将学习索引与日志结构合并 (LSM) 树数据结构相结合 [22]。为每个SSTable（排序字符串表）构建一个学习模型，该模型在创建后是不可变的。 LSM 框架支持修改（插入、更新、删除），并且在定期压缩过程中重建模型。由于它们是在实际生产系统中实现的，因此存在一些我们无法可靠重现的优化。 PGM 使用类似的思想来支持插入（压缩），我们可以对其进行广泛的测试。因此，我们将他们排除在我们的研究之外。</p><p>XIndex [27] 和 FINEdex [15] 为学习索引添加并发支持。 Wu等人[31]提出了一种基于归一化流[25]思想的方法，将数据分布转变为更容易学习的分布，所提出的索引结构是LIPP的扩展。 CARMI [32] 是主存的缓存感知学习索引。最近的几项研究还采用了字符串数据、空间数据和多维数据的学习索引的思想[8,16,21,24,26,28]。</p><hr><h3 id="COMPARISON"><a href="#COMPARISON" class="headerlink" title="COMPARISON"></a>COMPARISON</h3><p>如表1所示，不同的指标基于以下一个或多个方面引入了不同的设计思路：</p><ul><li>搜索内部节点：ALEX 和 LIPP 仅使用模型来预测孩子并且可以在恒定时间内访问。相比之下，B+-tree、PGM 和 FITing-tree 需要至少 𝑂(log𝑚) 时间的搜索，其中 𝑚 指节点中的 item 数（B+-tree 和 FITing-tree）或误差界限（PGM）。</li><li>在叶节点上搜索：除了 LIPP 之外，表 1 中提供的所有索引方法都需要搜索阶段（二进制或指数搜索）来找到目标键的确切位置。复杂度为 𝑂(log𝑚)，其中 𝑚 是 item 数量（在 ALEX 和 B+ 树中）或错误界限（在 PGM 和 FITing 树中）。因此，LIPP 找到叶节点的成本最低（𝑂(1) vs 𝑂(log𝑚)）。</li><li>数据分区：数据分区算法确定在索引的内部节点中对多少项进行索引。较小的索引项数量会产生较低的树高度，从而加快搜索时间。 ALEX 和 LIPP 使用学习模型（即基于模型的插入）将数据划分为节点，无需额外搜索即可找到目标键的确切位置。</li><li>插入。 (1) 所有索引首先使用搜索来找到插入新键的位置。因此，插入受益于高效的搜索。 (2) FITing-tree（增量插入策略）添加一个“缓冲区”来保存新键。 B+-tree、ALEX 和 LIPP 节点在创建节点来存储新 item 时包含额外的空间。相比之下，B+树是密集数组，而ALEX和LIPP使用间隙数组。 (3) 如果新关键字的目标位置在间隙数组中为空，则 ALEX 和 LIPP 将新关键字插入到该位置并完成插入过程。然而，B+树中总是需要移位操作。如果预测的位置被另一个键占据，ALEX 会移动 item 以查找空槽，并且间隙数组可以减少所需的移位操作的数量。相反，LIPP 创建一个新节点来保存新键以及已经占据预测位置的任何键，以减少未来的冲突。</li><li>结构修改操作（SMO）。当“缓冲区”或节点已满时，所有索引方法都必须更新树结构中的内部节点。更新叶节点时，ALEX、LIPP 和 FITing 树首先获取所有 item 并将它们重新插入到新节点中。当节点大小大于 B+-tree 时，SMO 会产生比 B+-tree 高得多的延迟。</li></ul><hr><h3 id="磁盘上的学习索引"><a href="#磁盘上的学习索引" class="headerlink" title="磁盘上的学习索引"></a>磁盘上的学习索引</h3><p>我们现在展示如何将学习索引扩展到磁盘场景。具体来说，我们使用ALEX作为具体示例，然后再介绍其他索引。我们使用 ALEX 作为示例，原因如下： (1) 由于 SMO 要求，当所有操作都必须在磁盘上时，ALEX 是最难实现的索引； (2) ALEX 是一个代表性示例，可用于演示所有现有可更新学习索引在移植以支持磁盘操作时的常见缺点。</p><h4 id="在磁盘上扩展-ALEX"><a href="#在磁盘上扩展-ALEX" class="headerlink" title="在磁盘上扩展 ALEX"></a>在磁盘上扩展 ALEX</h4><p>我们现在讨论将 ALEX 实施到磁盘配置所需的主要扩展。</p><p>磁盘上的布局。图 2 显示了如何在磁盘上存储索引数据结构。 ALEX 中的所有节点都是连续存储的。对于每个节点，存储一个模型以及实用结构（位图等）。在原始论文[7]中，一个内部节点的指针数组存储子指针（每个指针都是指向内存位置的地址）。当在磁盘上时，我们仍然需要 8 个字节来在磁盘上存储子节点地址 - 4 个字节用于块编号，4 个字节用于块中的偏移量。由于节点大小是可变的，ALEX中的一个节点可能跨越多个块，尤其是数据节点（参见N5）。多个节点也可以存储在一个块中（参见N6和N3）。</p><p><img src="/posts/72ac.htmlimage-20240429154435683.png" alt="image-20240429154435683" style="zoom:50%;"></p><p>ALEX 有两种不同的布局选择： 图 2(a) 中的 Layout#1 将内部节点和数据节点存储在同一个文件中；图 2(b) 中的 Layout#2 为每种类型创建一个文件。由于ALEX中的内部节点较小，内部节点文件中的一个块可以容纳多个节点。因此，我们可以使用一个块遍历多个级别。例如，如果我们需要访问N5，我们需要为Layout#1中的每个内部节点（N1和N3）获取一个块，但我们只需要在Layout#2中获取一个块。我们为 ALEX 实现了这两种布局，并使用第 5 节中的仅查找工作负载对其进行了测试。与 Layout#1 相比，Layout#2 的性能提高了 0.5%-30%。因此，我们在实现中更喜欢 Layout#2。</p><p>由于ALEX中的根节点可以因插入操作而改变，因此索引的第一个块被设置为元块，它记录根节点的地址。此外，还强制执行一项约束，使得一个节点中的数据必须存储在相邻空间中。否则，我们需要一种机制来记录块和节点之间的映射。</p><p><strong>磁盘上的查询处理</strong>。当处理搜索或插入操作时，首先获取由节点模型确定的块，然后计算节点数组中的位置。接下来，访问该块以获得磁盘上的子地址。当插入操作需要SMO时，将为新节点分配新空间，并将旧节点标记为无效。</p><p>当执行扫描操作（范围查询）时，ALEX会首先定位搜索范围内的最小键，然后向前扫描。位图用于跳过空槽。由于数据节点的大小可以达到16MB，如果1个块为4KB，则一个数据节点的位图最多可以覆盖32个块，并且会产生额外的I/O成本。在我们的实现中，不是将位图的所有块加载到主内存中，而是首先将一个块加载到主内存中并进行扫描。如果找到扫描范围的末尾，我们就不需要再获取与位图相关的任何块。</p><p>ALEX 还记录一些统计信息，例如 移动 和仅查找查询 的数量。因此，即使对于只读查询也会产生写入成本。在我们的实现中，这些记录不是为只读查询而维护的。</p><hr><h4 id="在磁盘上扩展其他学习索引"><a href="#在磁盘上扩展其他学习索引" class="headerlink" title="在磁盘上扩展其他学习索引"></a>在磁盘上扩展其他学习索引</h4><p>对于 FITing 树，实现了 Delta 插入策略，并包括以下优化：</p><ul><li>贪婪分割算法被最初用于 PGM [23] 的更高效的流算法所取代。</li><li>如果键小于当前最小键，则原始 FITing-tree 算法不允许键插入。引入额外的缓冲区（一个块）来保存诸如此类的键，并且物理地址被记录在元节点中。当这个额外的缓冲区已满时，将执行分段算法对数据进行分区并将生成的新段插入到索引中。</li><li>为了支持扫描操作，在每个段的开头添加了额外的元数据，以记录左兄弟和右兄弟的位置，以及每个段包含多少个 item。这类似于 B+ 树中叶节点之间的链接。</li></ul><p>我们还实现了 PGM 的可更新磁盘版本。 LIPP 与 ALEX 类似，因为它也是一个具有可变节点大小的不平衡树结构，并且磁盘上的布局与 ALEX 相同 - 除了节点位图之外，节点位图被替换为槽标志以标识类型。这消除了从磁盘获取位图的开销。</p>]]></content>
      
      
      <categories>
          
          <category> 学习型索引 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习型索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09-学习型索引-FITing-Tree</title>
      <link href="posts/9cf2.html"/>
      <url>posts/9cf2.html</url>
      
        <content type="html"><![CDATA[<h2 id="FITing-Tree-A-Data-aware-Index-Structure"><a href="#FITing-Tree-A-Data-aware-Index-Structure" class="headerlink" title="FITing-Tree: A Data-aware Index Structure"></a>FITing-Tree: A Data-aware Index Structure</h2><h3 id="1-背景概述"><a href="#1-背景概述" class="headerlink" title="1. 背景概述"></a>1. 背景概述</h3><p>对于主内存数据库（Main Memory Database, MMDB），基于树的索引可能会占用较多的内存资源。主内存数据库将数据存储在RAM【即运行内存中】中以实现高速访问，但这也意味着索引结构需要适配内存中的高效存取。</p><p><strong>T树索引</strong>：在主内存数据库中，T树是一种高效的索引结构。T树是B树的一种变体，它在每个节点中存储多个键值，包括最大值和最小值，这有助于控制树的深度，使得插入、删除和更新操作更加高效。但尽管 T树提高了索引的效率，但由于它需要在内存中维护多个键值，因此可能会消耗更多的内存。这对于内存资源有限的系统来说可能是一个问题。</p><p><strong>优化措施</strong>：为了减少内存占用，研究人员提出了各种内存索引及改进方案。例如，通过调整T树的参数，如节点大小和键值数量，可以在一定程度上平衡索引的大小和操作效率。</p><p>但是，对于各种应用（例如自动驾驶车辆、物联网IoT设备）中生成的时间戳或传感器读数等数据来说，要为此类数据类型建立索引的唯一键的数量通常会随着时间的推移而增长，从而导致索引不断增长。最终，要么删除索引，要么索引会持续消耗大量内存。</p><p><strong>补充</strong>：关于历史数据的处理，定期删除历史数据确实是一种减少索引大小的方法。然而，论文的表述可能是在强调，对于某些应用而言，历史数据可能不能或不易被删除，因为它们可能需要保留用于分析、审计或其他长期存储需求。在这种情况下，即使定期删除部分数据，索引的大小也可能因为新数据的不断添加而持续增长。</p><p><strong>贡献点</strong>：利用底层数据分布的属性来减小索引的大小；提出并分析了一种高效的分段算法，该算法包含一个可调误差参数，使 DBA 能够平衡索引的查找性能和空间占用；提出了一个成本模型，帮助 DBA 在给定延迟或存储要求的情况下确定适当的错误阈值；使用真实数据集测试发现，所提方法提供了近似或更好的性能，内存还少。</p><hr><h3 id="2-结构概述"><a href="#2-结构概述" class="headerlink" title="2. 结构概述"></a>2. 结构概述</h3><p>在较高层次上，索引（特别是排序属性上的 B+ 树）可以由将键（例如时间戳）映射到存储位置的函数来表示。使用这种表示形式，FITing-Tree 将键空间划分为一系列近似真实函数的不相交线性段，因为（通常）不可能对底层数据分布进行完全建模。该过程的核心是一个可调误差阈值，它表示段内任何键的预测位置与其实际位置的最大距离。 FITing-Tree 不存储键空间中的所有值，而是仅存储 (1) 每个线性段的起始键和 (2) 线性函数的斜率，以便使用线性插值计算键的近似位置。</p><p>下面，我们首先讨论如何使用函数将键值映射到存储位置。然后，我们讨论如何利用此函数表示在 B+ 树之上高效地实现聚簇索引的索引结构。最后，我们展示了如何将我们的想法应用于压缩二级索引。</p><hr><h4 id="2-1-Function-Representation"><a href="#2-1-Function-Representation" class="headerlink" title="2.1 Function Representation"></a>2.1 Function Representation</h4><p>我们的方法的一个关键见解是，我们可以将索引抽象地建模为一个单调递增函数，该函数将键（即索引属性的值）映射到存储位置（即其页面和该页面内的偏移量）。为了解释这种直觉，假设所有要索引的键都存储在一个排序数组中，允许我们使用数组中元素的位置作为其存储位置。</p><p>例如，考虑物联网数据集 [1]，其中包含来自安装在整个大学建筑中的各种设备（例如门传感器、运动传感器、功率监视器）的事件。在这个数据集中，数据按事件的时间戳排序，允许我们构造一个函数，将每个时间戳（即键）映射到其在数据集中的位置（即排序数组中的位置），如图1所示，毫不奇怪，由于安装的物联网设备会监控人类活动，因此记录的操作的时间戳遵循一定的模式（例如，周末和晚上几乎没有活动）。</p><p><strong>解释说明</strong>：在物联网数据集的例子中，由于时间戳的自然特性，数据记录往往在时间上是连续的，这符合FITing-Tree要求的单调递增键值特性。即使物理存储可能是非连续的，索引结构可以提供一个逻辑上的顺序视图，从而允许使用FITing-Tree进行高效的索引和查询。即在实际的数据库系统中，由于插入和更新操作的需要，数据往往不会以简单的数组形式存储。然而，对于分析查询，数据库系统可能会提供一种逻辑视图，使得数据看起来像是按时间戳排序的数组。</p><p><img src="/posts/9cf2.htmlimage-20240427150055549.png" alt="image-20240" style="zoom:50%;"></p><p>由于表示索引的函数可以任意复杂且依赖于数据，因此将键映射到位置的精确函数可能无法学习【也没必要要求太精确，毕竟ML本身波动就大，找到近似位置再二分查找即可】，并且构建和更新成本高昂。因此，<strong>我们的目标是近似表示键到位置的映射函数</strong>。</p><p>为了紧凑地捕获数据中存在的趋势，同时能够有效地构建新索引并处理更新，我们使用一系列分段线性函数来近似任意函数。例如，如图 1 所示，我们的分段算法（在第 3 节中进一步描述）将时间戳值划分为多个线性段，这些线性段能够准确反映数据中存在的各种趋势（例如，周末活动较少） 。<strong>由于近似捕获了数据中的趋势，因此它与键密度无关（可以捕获具有稀疏键的趋势以及具有密集键的趋势）</strong>。</p><p>尽管可以使用更复杂的函数（例如，高阶多项式）来逼近真实函数，但分段线性逼近的计算成本要低得多。这极大地降低了 (1) 初始索引构建成本，以及 (2) 改善了新 items 的插入延迟（参见第 5 节）。</p><p>然而，所得的分段线性近似并不精确（即，键的预测位置不一定是其真实位置）。因此，我们将与近似值相关的误差定义为任何键的实际位置和预测位置之间的最大距离，如下所示，其中 pred_pos(k) 和 true_pos(k) 分别返回元素 k 的预测位置和实际位置：</p><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.65ex;" xmlns="http://www.w3.org/2000/svg" width="51.475ex" height="2.347ex" role="img" focusable="false" viewbox="0 -750 22751.9 1037.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(466,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(917,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1368,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(1853,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2581.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mo" transform="translate(3637.6,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(833,0)"/><path data-c="78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z" transform="translate(1333,0)"/></g><g data-mml-node="mo" transform="translate(5498.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mo" transform="translate(5887.6,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(6165.6,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mi" transform="translate(6668.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(7119.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="msub" transform="translate(7585.6,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g><g data-mml-node="mi" transform="translate(8544.2,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(9029.2,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(9498.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(9887.2,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(10408.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(11019.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(12019.7,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(12380.7,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(12831.7,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="msub" transform="translate(13403.7,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g><g data-mml-node="mi" transform="translate(14308.3,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(14793.3,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(15262.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(15651.3,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(16172.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(16561.3,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mo" transform="translate(16839.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mi" transform="translate(17228.3,0)"><path data-c="2200" d="M0 673Q0 684 7 689T20 694Q32 694 38 680T82 567L126 451H430L473 566Q483 593 494 622T512 668T519 685Q524 694 538 694Q556 692 556 674Q556 670 426 329T293 -15Q288 -22 278 -22T263 -15Q260 -11 131 328T0 673ZM414 410Q414 411 278 411T142 410L278 55L414 410Z"/></g><g data-mml-node="mi" transform="translate(17784.3,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(18583.1,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="mi" transform="translate(19527.9,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mi" transform="translate(20048.9,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(20514.9,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(21004.9,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(21473.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(21862.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(22362.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></p><p>这个公式允许我们定义 FITing-Tree 的核心构建块，即段。段是排序数组的连续区域，其中<strong>任何键与其插值位置的距离不超过指定的错误阈值</strong>。根据数据分布和错误阈值，分段过程将产生不同数量的近似底层数据的分段。因此，重要的是，错误阈值使我们能够平衡内存消耗和性能。分段过程之后，FITing-Tree 将每个分段（而不是每个单独的键）的边界和斜率存储在 B+ 树中，从而减少索引的整体内存占用。</p><p>【<strong>B^+^ 树叶节点存储每个数据点，然后从底向上构建；FITing-Tree：相当于对B^+^ 树的叶节点进行分段，把每一段的边界和斜率存到B^+^ 树中以降低索引内存</strong>】</p><hr><h4 id="2-2-FITing-Tree-Design"><a href="#2-2-FITing-Tree-Design" class="headerlink" title="2.2 FITing-Tree Design"></a>2.2 FITing-Tree Design</h4><p>如前所述，我们的分割过程将属性的键空间划分为不相交的线性段，使得段内任何键的预测位置与键的真实位置之间的距离不超过有界距离。FITing-Tree 将这些段组织成树，以有效地支持插入和查找操作。 在下文中，我们首先讨论聚类索引，其中记录已按正在索引的键排序。 然后，我们展示如何扩展我们的技术以提供类似的好处用于二级索引。</p><h5 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h5><p>在传统的聚簇 B+ 树中，表数据存储在固定大小的页中，索引的叶级仅包含每个表页的第一个键。与聚簇 B+ 树不同，在 FITing-Tree 中，表数据被划分为满足给定错误阈值的可变大小的段（页）。每个段本质上是一个固定大小的数组，但<strong>连续的段可以独立分配</strong>（即不连续）【<strong>因为有指针指向</strong>】。</p><p>图 2 显示了聚簇 FITing-Tree 索引的结构。如图所示，底层数据被划分为一系列可变大小的段，这些段近似于要索引的键的分布。因此，根据错误参数和数据分布，可以将多个连续的键汇总为单个段。<strong>将表数据划分为可变大小段的分段算法的详细信息将在第 3 节中讨论</strong>。</p><p><img src="/posts/9cf2.htmlimage-20240427155142930.png" alt="image-20240425142930" style="zoom: 33%;"></p><p>与传统的 B+ 树不同，FITingTree 中的<strong>每个叶节点都存储段的斜率、起始键和指向段的指针</strong>。这允许我们<strong>在每个段中使用插值搜索</strong>，因为该段内的数据由斜率给出的线性函数近似。</p><p>FITing-Tree 的内部节点与 B+ 树相同（即查找和插入操作与普通 B+ 树相同）。然而，一旦查找或插入到达叶级别，FITing-Tree 就需要执行额外的工作。对于查找，我们需要<strong>使用斜率和到起始键的距离来计算键的大致位置（段中的偏移量）</strong>。由于结果位置是近似的，因此 FITing-Tree 必须执行局部搜索（例如，二分搜索、线性搜索）来查找该 item，这将在第 4 节中进一步讨论。</p><p>插入操作在到达叶级页面时还需要额外的工作，因为我们必须确保始终满足错误阈值。因此，我们提出了两种不同的插入策略（在第 5 节中详细描述）。第一个策略对段执行就地更新（作为基线），而第二个策略使用更高级的基于缓冲区的策略来保存插入的数据项。最后，FITing-Tree 可以使用任何其他索引结构，而不是在内部使用 B+ 树来定位键的段。例如，如果工作负载是只读的，则可以使用其他高性能索引结构（例如，FAST [28]）。在第 7.4 节中，我们展示了 FITing-Tree 在使用不同的内部数据结构（包括 FAST）时如何执行。</p><hr><h5 id="非聚簇索引"><a href="#非聚簇索引" class="headerlink" title="非聚簇索引"></a>非聚簇索引</h5><p>二级索引可以显着提高涉及非主键属性选择的查询的性能。如果没有二级索引，这些查询必须检查所有元组，这通常是令人望而却步的。与聚簇索引不同，非主键属性未排序并且可能包含重复项。</p><p>聚簇和非聚簇 FITing-Tree 之间的主要区别在于，非聚簇 FITing-Tree 需要额外的“间接层”（在图 3 中称为“关键页面”）。该层本质上是一个指针数组，其大小与数据相同，但按正在索引的键排序。例如，该间接层中的第一个位置将包含指向正在索引的键的最小值的指针。<strong>请注意，使用固定大小分页的辅助 B+ 树也需要此间接层</strong>。</p><p><img src="/posts/9cf2.htmlimage-20240427162012916.png" alt="image-20240162012916" style="zoom: 50%;"></p><p>【<strong>说白了，加层间接层对无序数据进行有序化处理，然后再对有序数据进行索引的构建</strong>】</p><p>创建非聚簇 FITing-Tree 的第一步是通过按索引键（例如温度、年龄）对数据进行排序来构建间接层，并按排序顺序具体化指向每个数据项的指针数组。接下来，与聚簇索引情况类似，分段算法扫描间接层并生成一组有效的段，然后将其插入到上层树中。</p><p>非聚簇 FITing-Tree 上的所有操作都在间接层上进行内部操作。例如，对于查找，数据项的返回位置是其在间接层中的位置。然后，为了访问该值，FITing-Tree 遵循间接层中预测位置处的指针。</p><p>尽管与聚簇 FITing-Tree 索引相比，非聚簇 FITing-Tree 中关键页的排序级别会带来额外的开销，但这种开销会发生在任何非聚簇（二级）索引中。然而，正如我们在实验中所示，非聚簇 FITing-Tree 明显小于具有固定大小页面的非聚簇 B+ 树，因为它的叶节点和内部节点较少。</p><hr><ol><li>聚簇索引： 聚簇索引决定了表中数据的物理存储顺序。一个表只能有一个聚簇索引，因为数据行只能按照一个顺序存储。聚簇索引通常是根据表的主键创建的，但也可以是其他列。当表有聚簇索引时，数据行会按照聚簇索引的顺序存储在磁盘上。这意味着，当插入新行时，数据库会按照聚簇索引的顺序来维护数据的物理顺序。聚簇索引可以提供快速的查询性能，尤其是在查询条件与聚簇索引列匹配时。</li><li>非聚簇索引： 非聚簇索引与数据的物理存储顺序无关。一个表可以有多个非聚簇索引，它们是基于表中的列创建的，但不决定数据的物理存储顺序。非聚簇索引包含索引列的值和指向数据行的指针。当使用非聚簇索引进行查询时，数据库会根据索引找到对应的数据行指针，然后通过指针访问数据行。非聚簇索引适合于查询不经常改变的数据，或者查询条件与聚簇索引列不匹配的情况。</li></ol><hr><h3 id="3-分段"><a href="#3-分段" class="headerlink" title="3. 分段"></a>3. 分段</h3><p>下面，我们描述 FITing-Tree 如何将属性的键空间划分为满足指定误差的可变大小的段。在此过程之后，每个段都被插入到 B+ 树中，以实现高效的插入和查找操作，第 4 节和第 5 节将进一步介绍。</p><h4 id="3-1-Design-Choices"><a href="#3-1-Design-Choices" class="headerlink" title="3.1 Design Choices"></a>3.1 Design Choices</h4><p>拟合函数时的一个常见目标是最小化最小二乘误差（最小化第二误差范数 E~2~）。不幸的是，这样的目标不能保证最大误差，因此不能限制插入键的位置后必须扫描的位置数量。因此，我们的目标是满足最大误差 (E~∞~)，如图 4 所示。</p><p><img src="/posts/9cf2.htmlimage-20240427171644599.png" alt="image-20240421644599" style="zoom:33%;"></p><p>虽然存在几种最佳（以生成的段数计）分段线性逼近算法，但这些技术的成本过高（例如，动态编程算法 [31] 使用 O(n) 内存，运行时间为 O(n^3^ )） 。其次，大多数现有的在线分段线性逼近算法[17, 27]具有较高的存储复杂性和/或不保证最大误差。最后，即使是线性时间算法也可能不够高效，因为乘法常数具有显着的影响。</p><p>因此，为了能够高效地（1）构建索引，以及（2）支持插入，我们需要一种高效的一次性线性算法。对效率的关注导致我们选择线性分段函数，因为如前所述，高阶近似通常会产生额外的成本。</p><p>接下来，我们描述了一种类似于 FSW [33, 45] 的分段算法，该算法在运行时是线性的，具有较低的恒定内存使用量，并保证每个分段的最大误差。但重要的是，我们解决了（1）如何将这些技术扩展到索引，包括查找和插入数据项，（2）证明，在最坏的情况下，段的大小是有限的，（3）分析算法和将其与最佳算法进行比较。</p><hr><h4 id="3-2-Segment-Definition"><a href="#3-2-Segment-Definition" class="headerlink" title="3.2 Segment Definition"></a>3.2 Segment Definition</h4><p>如前所述，段是 key space 的一个区域，可以由线性函数表示，其中所有 keys 都在距其线性内插位置的有界距离内。更具体地，段由段中的第一个点（第一个键）和最后一个点（最后一个键）表示。使用这个定义，我们可以将线性函数拟合到段中键的位置（使用开始键、结束键和位置数）。</p><p>回想一下，每个段都必须满足最大误差（即，键的预测位置最多距其真实位置有 error 个元素）。这导致了最大段的一个重要属性（附录 A.1 中的证明）（当添加 key 违反指定 error 时，段是最大的）：</p><p>定理3.1：最大线性段覆盖的最小位置数为 error + 1。</p><p>这使我们能够量化“最坏情况”（即产生最大分段数的数据集和错误阈值）的糟糕程度。由于最大段覆盖的最小位置数受到 error 的限制，因此 FITing-Tree 的总大小也受到限制。因此，在最坏的情况下（每个最大段覆盖 error + 1 个位置），FITing-Tree 将不会大于使用大小错误的固定大小页面的索引（例如，B+ 树）。</p><hr><h4 id="3-3-Segmentation-Algorithm"><a href="#3-3-Segmentation-Algorithm" class="headerlink" title="3.3 Segmentation Algorithm"></a>3.3 Segmentation Algorithm</h4><p><strong>如前所述，我们需要一种快速高效的算法，而不是最佳算法</strong>。因此，我们选择使用贪婪流算法 ShrinkingCone（算法 1），该算法在给定段的起点（键）的情况下，尝试在满足给定 error 阈值的同时最大化段的长度。 </p><p><strong>ShrinkingCone 与 FSW [33] 类似，但仅考虑单调递增函数，并且可以产生不相交的线段</strong>。 ShrinkingCone 背后的主要思想是：<strong>当且仅当新 key 不违反段中任何先前键的 error 约束时，才可以将新 key 添加到段中</strong>。</p><p><img src="/posts/9cf2.htmlimage-20240427175635182.png" alt="image-202404271756182" style="zoom:67%;"></p><p>更具体地说，我们通过三元组定义圆锥体：原点（key 及其position）、高斜率 (sl~high~) 和低斜率 (sl~low~)。起点和低斜率的组合给出了圆锥体的下界，起点和高斜率的组合给出了圆锥体的上界。直观上，圆锥代表从圆锥原点开始的线段的可行线性函数族（高斜率和低斜率代表有效斜率的范围）。当将新 key 添加到段时，将使用该 key 和该 key 的位置加上 error 和减去 error（分别）来计算高斜率和低斜率。在更新步骤（算法 1 的第 6-7 行）中，选择最低的高斜率和最高的低斜率值（在新计算的斜率和之前的斜率之间）。因此，圆锥体要么变窄（高斜率减小和/或低斜率增大），要么保持不变。如果要添加到段的新 key 位于圆锥体之外，则该段中必须存在至少一个将违反 error 约束的先前键。因此，不在圆锥体内部的新 key 不能包含在该段中，其应该成为新段的原点。</p><p>图 5 说明了圆锥体的更新方式：点 1 是圆锥体的原点。点 2 更新高斜率和低斜率。点 3 位于圆锥体内部，但它仅更新圆锥体的上限（点 3 小于下限上方的误差）。点 4 位于更新的圆锥体之外，因此将是新线段的第一个点。</p><p><img src="/posts/9cf2.htmlimage-20240427180958029.png" alt="image-202404271958029" style="zoom:50%;"></p><hr><h4 id="3-4-Algorithm-Analysis"><a href="#3-4-Algorithm-Analysis" class="headerlink" title="3.4 Algorithm Analysis"></a>3.4 Algorithm Analysis</h4><p><strong>虽然 ShrinkingCone 算法的运行时间为 O(n) 和仅使用少量常量内存（用于跟踪圆锥体），但它并不是最佳的。此外，对于给定的最大误差和对抗性数据集，它生成的分段数量可能比最佳算法更差，正如我们在附录 A.2 中证明的那样</strong>。</p><p><strong>尽管对于给定的最大误差，与最佳分割相比，ShrinkingCone 可能会任意糟糕，但在实践中，它的糟糕程度是有限度的，因为我们确实保证最大分段至少覆盖 error + 1 个位置</strong>。</p><p>ShrinkingCone 生成的最大段数最多为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.469ex;" xmlns="http://www.w3.org/2000/svg" width="19.58ex" height="4.07ex" role="img" focusable="false" viewbox="0 -1149.5 8654.4 1799"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(833,0)"/><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1111,0)"/></g><g data-mml-node="mrow" transform="translate(1833.7,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M180 96T180 250T205 541T266 770T353 944T444 1069T527 1150H555Q561 1144 561 1141Q561 1137 545 1120T504 1072T447 995T386 878T330 721T288 513T272 251Q272 133 280 56Q293 -87 326 -209T399 -405T475 -531T536 -609T561 -640Q561 -643 555 -649H527Q483 -612 443 -568T353 -443T266 -270T205 -41Z"/></g><g data-mml-node="mfrac" transform="translate(597,0)"><g data-mml-node="mrow" transform="translate(220,516.4) scale(0.707)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mi" transform="translate(799,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1265,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1755,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(2224,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g></g><g data-mml-node="mn" transform="translate(927.8,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><rect width="1969.2" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(2806.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mfrac" transform="translate(3250.8,0)"><g data-mml-node="mrow" transform="translate(997.1,516.4) scale(0.707)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/></g><g data-mml-node="mo" transform="translate(1106,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(466,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(917,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1368,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(1853,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2304,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(3082,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><rect width="2732.9" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(6223.7,0) translate(0 -0.5)"><path data-c="29" d="M35 1138Q35 1150 51 1150H56H69Q113 1113 153 1069T243 944T330 771T391 541T416 250T391 -40T330 -270T243 -443T152 -568T69 -649H56Q43 -649 39 -647T35 -637Q65 -607 110 -548Q283 -316 316 56Q324 133 324 251Q324 368 316 445Q278 877 48 1123Q36 1137 35 1138Z"/></g></g></g></g></svg></mjx-container>, 其中 |D|是数据集的大小。少于 3 个键且跨越至少 error + 2 个位置的输入不会导致 ShrinkingCone 创建新段。</p><p>因此，与传统的 B+ 树相比，在最坏的情况下，FITing-Tree 不会比使用固定大小页面（of size error）的 B+ 树产生更多的段（页面）。</p><p>为了评估ShrinkingCone，我们使用现实世界数据集的10^6^个元素实现了最优算法（运行时间为O(n^2^)和内存消耗为O(n^2^)）：NYC Taxi Dataset [2]，OpenStreetMap [3]，Weblogs [1]，和IoT [1]。表1显示了最优算法和ShrinkingCone生成的段数。如图所示，我们算法产生的段数与最优情况下的段数相当。</p><hr><h3 id="4-查找"><a href="#4-查找" class="headerlink" title="4. 查找"></a>4. 查找</h3><p>索引最重要的操作之一是查找单个键或一系列键。然而，由于FITing-Tree的叶级中的每个条目都指向一个段，因此执行查找需要首先找到键所属的段，然后在该段内执行本地搜索。下面，我们首先描述 FITing-Tree 如何对单个键执行查找操作，然后展示如何将此技术扩展到范围谓词。</p><h4 id="4-1-Point-Queries"><a href="#4-1-Point-Queries" class="headerlink" title="4.1 Point Queries"></a>4.1 Point Queries</h4><p>在 FITing-Tree 中搜索单个元素的过程涉及两个步骤：（1）搜索树以查找该元素所属的段，以及（2）在段内查找该元素。算法 2 概述了这些步骤。</p><p><img src="/posts/9cf2.htmlimage-20240427185209159.png" alt="image-202404285209159" style="zoom:50%;"></p><hr><h5 id="树搜索"><a href="#树搜索" class="headerlink" title="树搜索"></a>树搜索</h5><p>正如前面所描述的，由于每个段都存储在 B+ 树中（以其第一个键作为键，段的斜率和指向表页的指针作为其值），因此我们必须首先搜索树以找到给定的 key 属于 哪个段。为此，我们开始使用标准树遍历算法从根到叶遍历 B+ 树。算法 2 的 SearchTree 函数中概述的这些步骤在到达指向包含键的段的叶节点时终止。</p><p>由于 B+ 树用于索引段而不是单个点，因此搜索键所属段的运行时间为 O(log~b~ (p))，其中 b 是表示树扇出的常量（即，节点内的分隔数量），p 是分段过程中创建的分段数。</p><hr><h5 id="分段搜索"><a href="#分段搜索" class="headerlink" title="分段搜索"></a>分段搜索</h5><p>一旦 FITing-Tree 找到某个键的段，它就必须找到该键在该段内的位置。回想一下，创建线段时，元素与通过线性插值确定的元素位置的距离不超过恒定距离（error）。在固定大小索引页内进行插值搜索的其他技术在[22]中讨论。</p><p>为了计算给定段 s 中键 k 的大致位置，我们从段 s.start 中出现的第一个键中减去该键 。然后，我们将差值乘以线段的斜率 s.slope，如下式所示。</p><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.65ex;" xmlns="http://www.w3.org/2000/svg" width="40.515ex" height="2.347ex" role="img" focusable="false" viewbox="0 -750 17907.5 1037.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(954,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="msub" transform="translate(1420,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g><g data-mml-node="mi" transform="translate(2378.7,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(2863.7,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(3610.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mo" transform="translate(4666.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(5055.2,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(5798.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(6798.7,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(7267.7,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/></g><g data-mml-node="mi" transform="translate(7712.3,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mi" transform="translate(8181.3,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(8542.3,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(9071.3,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(9522.3,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mo" transform="translate(9883.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(10494.6,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"/></g><g data-mml-node="mi" transform="translate(11494.8,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(11963.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/></g><g data-mml-node="mi" transform="translate(12408.5,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mi" transform="translate(12877.5,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(13175.5,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(13660.5,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mi" transform="translate(14163.5,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mstyle" transform="translate(14629.5,0)"><g data-mml-node="mspace"/></g><g data-mml-node="mstyle" transform="translate(15629.5,0)"><g data-mml-node="mspace"/></g><g data-mml-node="mo" transform="translate(16629.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(17018.5,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mo" transform="translate(17518.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> </p><p>对元素位置进行插值后，可以保证元素的真实位置在误差阈值内。因此，FITing-Tree 使用二分搜索来局部搜索以下区域（如算法 2 所示）。</p><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.65ex;" xmlns="http://www.w3.org/2000/svg" width="53.082ex" height="2.347ex" role="img" focusable="false" viewbox="0 -750 23462.1 1037.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(361,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(812,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="msub" transform="translate(1384,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g><g data-mml-node="mi" transform="translate(2288.7,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(2773.7,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(3520.5,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="mo" transform="translate(4465.2,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(4743.2,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mi" transform="translate(5246.2,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(5697.2,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="msub" transform="translate(6163.2,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g><g data-mml-node="mi" transform="translate(7121.9,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(7606.9,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(8298.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(9298.3,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(9764.3,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(10215.3,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(10666.3,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(11151.3,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(11602.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(12047,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mi" transform="translate(12550,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(13001,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="msub" transform="translate(13467,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g><g data-mml-node="mi" transform="translate(14425.7,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(14910.7,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(15601.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(16602.1,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(17068.1,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(17519.1,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(17970.1,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(18455.1,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(18906.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mstyle" transform="translate(19184.1,0)"><g data-mml-node="mspace"/></g><g data-mml-node="mstyle" transform="translate(20184.1,0)"><g data-mml-node="mspace"/></g><g data-mml-node="mstyle" transform="translate(21184.1,0)"><g data-mml-node="mspace"/></g><g data-mml-node="mo" transform="translate(22184.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(22573.1,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g><g data-mml-node="mo" transform="translate(23073.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></p><p>然而，还需要注意的是，根据具体场景（例如硬件属性、错误阈值），也可以使用任何搜索算法，包括线性搜索、二分搜索或指数搜索。由于段满足指定的错误条件，因此在段内搜索元素的成本是有界的。更具体地说，在段内定位元素的运行时间是 O(log~2~(error))，其中 error 是恒定的。</p><hr><h5 id="Range-Queries"><a href="#Range-Queries" class="headerlink" title="Range Queries"></a>Range Queries</h5><p>与点查询不同，范围查询有一个额外的要求，即检查指定范围内的每个 item。因此，对于范围查询，查询的选择性（即满足谓词的元组数量）对查询的总运行时间有很大影响。</p><p>但是，与点查询一样，范围查询也必须找到单个元组：范围的开始或结束。因此，FITing-Tree 使用前面描述的点查找技术来查找指定范围的开头。然后，由于段要么连续存储键（聚集索引），要么具有带有按键排序的指针的间接层（非聚集索引），因此 FITing-Tree 可以简单地从起始位置开始扫描，直到找到指定范围内的外部的键。对于聚集索引，扫描相关范围仅执行非常有效的顺序访问，而对于非聚集索引，范围查询需要随机内存访问（这对于任何非聚集索引都是如此）。</p><hr><h3 id="5-插入"><a href="#5-插入" class="headerlink" title="5. 插入"></a>5. 插入</h3><p>除了定位元素之外，索引还需要能够处理插入操作。在某些应用程序中，需要保持严格的排序保证，在这种情况下，FITing-Tree 应确保新 item 插入到位。但是，在情况并非如此的情况下，我们开发了一种更高效的插入策略，可以提高插入吞吐量。在下文中，我们将讨论将新 item 插入 FITing-Tree 的每种策略。然后，在第 7.1.3 节中，我们将展示这些策略在各种工作负载和参数下的比较情况。</p><h4 id="5-1-In-place-Insert-Strategy"><a href="#5-1-In-place-Insert-Strategy" class="headerlink" title="5.1 In-place Insert Strategy"></a>5.1 In-place Insert Strategy</h4><p>在使用分页的典型 B+ 树中，页面部分填充，并使用就地策略将新值插入到空槽中。当给定页面已满时，该节点将被拆分为两个节点，并且更改将沿树向上传播（即更新树中的内部节点）。</p><p>尽管类似，但 FITing-Tree 中的插入操作需要额外考虑，因为段中的任何键与其插值位置的距离不得超过指定的错误量（错误）。重要的是，就地插入需要移动页面中的键以保留键的顺序。</p><p>在没有任何关于给定键的错误的先验知识的情况下，任何移动键的尝试都需要检查错误条件是否满足。更糟糕的是，单个插入可能需要移动许多键（在最坏的情况下，页面中的所有键）来维持排序顺序。因此，我们必须对任何给定的 键 有先验知识，以确定它是否可以在保持错误保证的同时向任何方向移动。</p><p>与页面的填充因子类似，我们将指定的误差分为两部分：分段误差 e（用于分段数据的误差）和插入预算 ε（键可以在任意方向移动的位置数）。为了保留指定的误差，我们要求 error = e + ε。通过为每个页面保留插入预算，FITing-Tree 可以确保插入新元素不会违反页面的 error。</p><p>更具体地说，给定一个段 s，页面的总大小为 |s| + 2ε（|s| 是段中的位置数）。数据放置在新页面的中间，在页面的开头和结尾处产生 ε 个空位置。</p><p>通过这种策略，可以在不违反错误条件的情况下向具有可用空间的方向移动任何键。因此，要使用就地插入策略插入新 item，FITing-Tree 首先定位新 item 在页面中所属的位置。然后，根据页面的哪一端（左端或右端）更接近，所有元素都会移动（左端或右端）到页面的空白区域。一旦所有的空白空间都被填充，就需要重新近似该段（使用第 3 节中描述的分段算法）。如果分段算法生成多个分段，我们将创建 n 个新分段（其中 n 是在现在已满的单个分段上运行算法 1 后生成的分段数）。最后，每个新段都被插入到上层树中，并且删除对旧段的任何引用。</p><hr><h4 id="5-2-Delta-Insert-Strategy"><a href="#5-2-Delta-Insert-Strategy" class="headerlink" title="5.2 Delta Insert Strategy"></a>5.2 Delta Insert Strategy</h4><p>由于 FITing-Tree 中的段大小可变，因此使用前面描述的就地插入策略的插入操作的成本可能很高，特别是对于大错误阈值或生成具有许多数据项的大段的统一数据。具体来说，平均而言，对于单个插入操作可能需要移动 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex;" xmlns="http://www.w3.org/2000/svg" width="2.635ex" height="3.148ex" role="img" focusable="false" viewbox="0 -1046.4 1164.8 1391.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.4) scale(0.707)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(747,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g></g><g data-mml-node="mn" transform="translate(405.6,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><rect width="924.8" height="60" x="120" y="220"/></g></g></g></svg></mjx-container> 个键，其中 |s| 是段中的位置数。因此，将新数据项插入 FITing-Tree 的更好方法应该分摊在段中移动键的成本。</p><p>为了减少插入新项目时在页面内移动数据项的开销，FITing-Tree 中的每个段都包含一个额外的固定大小缓冲区，而不是在每一端添加额外空间。更具体地，如算法3所示，新的键被添加到该键所属的段的缓冲区部分（第2行）。该缓冲区保持排序，以实现高效的搜索和合并操作。</p><p><img src="/posts/9cf2.htmlimage-20240427200556907.png" alt="image-202407200556907" style="zoom:50%;"></p><p>一旦缓冲区达到其预定大小 (buff )，它就会与段中的数据组合，然后使用前面描述的分段算法（算法 1）重新分段，以创建一系列满足错误阈值的有效段（第 5 行）。请注意，根据数据的不同，此处理后的段数可以是一个（即插入缓冲区的数据不违反错误阈值）或多个。最后，将分段过程生成的每个新段插入到树中（第 6-7 行），并删除旧页面（第 8 行）。</p><p>在段内存储附加数据会影响如何定位给定 item 以及如何定义error。由于为每个分段添加缓冲区可能会违反 FITing-Tree 提供的 error 保证，因此我们透明地将缓冲区的大小合并到分段过程的 error 参数中。更正式地说，给定指定的错误的错误，我们透明地将分割过程的错误阈值设置为（error - buff）。这确保即使元素位于缓冲区中，查找操作也将满足指定的 error。</p><p>将新元素插入 FITing-Tree 的总运行时间是定位段并将元素添加到段缓冲区所需的时间。将 p 页存储在 FITing-Tree 中，扇出为 b（即每个内部分隔符节点中的键数），将新键插入 FITing-Tree 的运行时间如下： <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="40.311ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 17817.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z"/><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"/><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(834,0)"/><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(1228,0)"/><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(1672,0)"/><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(2064,0)"/><path data-c="20" d="" transform="translate(2453,0)"/><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(2703,0)"/><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(3095,0)"/><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(3651,0)"/><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(4207,0)"/><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(4596,0)"/><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(4874,0)"/><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(5707,0)"/></g><g data-mml-node="mo" transform="translate(6428.8,0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/></g><g data-mml-node="mi" transform="translate(6984.6,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(7747.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(8136.6,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(8434.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="msub" transform="translate(8919.6,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mi" transform="translate(510,-150) scale(0.707)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g></g><g data-mml-node="mi" transform="translate(9782.9,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mo" transform="translate(10285.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(10897.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(11897.3,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(12660.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(13049.3,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g><g data-mml-node="mi" transform="translate(13478.3,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(14050.3,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mi" transform="translate(14600.3,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(15150.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mstyle" transform="translate(15539.3,0)"><g data-mml-node="mspace"/></g><g data-mml-node="mo" transform="translate(16539.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(16928.3,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"/></g><g data-mml-node="mo" transform="translate(17428.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> 。</p><p>请注意，当缓冲区已满并且需要重新分该段时，运行时会产生 O(d) 的额外成本，其中 d 是段的数据大小和缓冲区大小的总和。</p><p>此外，如果写入速率非常高，我们还可以支持使用第二个缓冲区的合并算法，类似于列存储将写入优化的增量合并到主压缩列的方式。然而，这是一个正交考虑因素，很大程度上取决于工作负载的读/写比率，超出了本文的范围。</p><hr><h3 id="6-成本模型"><a href="#6-成本模型" class="headerlink" title="6. 成本模型"></a>6. 成本模型</h3><p>由于指定的错误阈值会影响查找和插入的性能以及索引的大小，因此自然会出现以下问题：DBA 应如何为给定的工作负载选择错误阈值？为了进行这种权衡，我们提供了一个成本模型，帮助 DBA 在创建 FITing-Tree 时选择“好的”错误阈值。从较高层面来看，DBA 可以优化两个主要目标：性能（即查找延迟）和空间消耗 [8, 15]。</p><p>因此，我们提出两种应用成本模型的方法来帮助 DBA 选择错误阈值。</p><hr><h4 id="6-1-Latency-Guarantee"><a href="#6-1-Latency-Guarantee" class="headerlink" title="6.1 Latency Guarantee"></a>6.1 Latency Guarantee</h4><p>对于给定的工作负载，能够为应用程序提供延迟保证非常有价值。例如，由于 SLA 或应用程序特定要求（例如，对于交互式应用程序），应用程序可能要求查找时间不超过指定的时间阈值（例如，1000ns）。由于 FITing-Tree 包含一个错误项，而该错误项又会影响性能，因此我们可以对索引的延迟进行建模，以便选择满足指定延迟要求的错误阈值。</p><p>正如所讨论的，查找需要找到相关段，然后在段（数据和缓冲区）中搜索元素。由于错误阈值会影响创建的分段数量（即，较小的错误阈值会产生更多的分段），因此我们使用一个函数返回为给定数据集和错误阈值创建的分段数量。该函数可以针对特定数据集学习（即，使用不同的错误阈值对数据进行分段），也可以使用通用函数（例如，做出简化假设，分段数量随着错误的增加而线性减少）。我们使用 S~e~ 来表示给定数据集的结果段数量，并使用错误阈值 e。</p><p>因此，错误阈值 e 的总估计查找延迟可以通过以下表达式进行建模，其中 b 是树的扇出，buff 是段的最大缓冲区大小，c 是一个常量，表示给定硬件上缓存未命中的延迟（以 ns 为单位）（例如，50ns）。此外，成本函数假设对以 e 为界的段内需要搜索的区域进行二分搜索以及搜索整个缓冲区。此外，成本函数假设对以 e 为界的段内需要搜索的区域进行二分搜索以及搜索整个缓冲区。</p><img src="/posts/9cf2/image-20240502223212245.png" class title="image-20240502223212245"><p>将 c 设置为常量值意味着所有随机内存访问都具有恒定的惩罚，但缓存通常可以改变随机访问的惩罚。理论上，c 不是一个常数，而是一个返回随机访问惩罚的函数，但我们简化为 c 是一个常数。</p><p>使用此成本估算，满足给定延迟要求 L~req~（以纳秒为单位）的具有最小存储占用的索引由以下表达式给出，其中 E 表示一组可能的错误值（例如，E = {10, 100, 1000}），SIZE 是一个返回索引估计大小的函数（在下一节中定义）。</p><img src="/posts/9cf2/image-20240502223153458.png" class title="image-20240502223153458"><p>除了对查找操作的延迟进行建模之外，我们还可以对插入操作的延迟进行类似的建模。</p><p>然而，有一些重要的区别。首先，插入不必探测段。此外，插入不需要搜索段的缓冲区，而是需要按排序顺序将 item 添加到缓冲区。最后，我们还必须考虑与分割完整段相关的成本。</p><hr><h4 id="6-2-Space-Budget"><a href="#6-2-Space-Budget" class="headerlink" title="6.2 Space Budget"></a>6.2 Space Budget</h4><p>DBA 还可以为 FITing-Tree 提供要使用的存储预算，而不是指定查找延迟限制。在这种情况下，目标是提供最高性能（即查找和插入的最低延迟），同时不超过指定的存储预算。</p><p>更正式地说，我们可以使用以下函数估计给定错误阈值 e 的只读聚集索引的大小（以字节为单位），其中 S~e~ 又是为错误阈值 e 创建的段数，并且b 是树的扇出。</p><img src="/posts/9cf2/image-20240502223107651.png" class title="image-20240502223107651"><p>第一项是树存储成本的悲观界限（叶 + 使用 8 字节键/指针的内部节点），而第二项表示有关每个段的添加元数据（即每个段都有一个起始键、斜率、和指向底层数据的指针，每个8字节）。</p><p>因此，满足给定存储预算 S~req~（以字节为单位）的最小错误阈值由以下表达式给出，其中 E 再次表示所有可能错误值的集合（例如，E = {10, 100, 1000}）。</p><img src="/posts/9cf2/image-20240502223131855.png" class title="image-20240502223131855"><p>正如我们在第 7.7 节中所示，我们的成本模型可以准确地估计 FITing-Tree 相对于实际数据集的大小，为 DBA 提供了一种宝贵的方法来平衡性能（即延迟）与 FITing-Tree 的存储占用空间。</p><hr><h3 id="7-实验"><a href="#7-实验" class="headerlink" title="7. 实验"></a>7. 实验</h3><p>本节评估 FITing-Tree 和所提出的技术。总的来说，我们看到 FITing-Tree 实现了与完整索引以及使用固定大小分页但使用的空间少几个数量级的索引相当的性能。</p><p>首先，在第 7.1 节中，我们比较了 FITing-Tree 的整体性能，使用各种真实数据集测量了聚簇索引和非聚簇索引的查找和插入性能。接下来，我们比较 7.2 节中提出的两种插入策略。然后，在第 7.3 节中，我们测量了 FITing-Tree 的构建成本，在第 7.4 节中，我们展示了 FITing-Tree 如何利用其他内部索引结构。 7.5 节展示了我们的索引对于不同数据集大小的可扩展性。最后，第 7.6 节展示了 FITingTree 如何在对抗性综合生成的数据集（即最坏情况数据分布）上执行，第 7.7 节评估了我们的成本模型。</p><p>附录 B 包括其他实验，将 FITing-Tree 与相关图 [29] 进行比较，显示范围查询的结果，测量各种缓冲区大小的吞吐量，并分解 FITing-Tree 的查找性能。</p><p>我们在一台配备 Intel E5-2660 CPU（2.2GHz，10 核，25MB 三级缓存）和 256GB RAM 的服务器上进行了所有实验，所有索引和表数据都保存在内存中</p><hr><h4 id="Exp-1-Overall-Performance"><a href="#Exp-1-Overall-Performance" class="headerlink" title="Exp. 1: Overall Performance"></a>Exp. 1: Overall Performance</h4><p>下面，我们评估 FITing-Tree 的整体查找和插入性能。为了进行这些比较，我们针对完整索引（即密集索引）和使用固定大小页面的索引（即稀疏索引）对 FITing-Tree 进行基准测试。完整索引可以被视为查找性能的最佳情况基线，从而为我们提供了一个有趣的参考点。</p><p>对于两个基线（完整和固定大小分页），我们使用流行的 B+ 树实现（STX-tree [4] v0.9），因为我们的 FITing-Tree 原型也使用该树来索引可变大小的段。重要的是，正如我们在第 7.4 节中所示，任何其他树实现也可以充当组织层。</p><p><strong>数据集</strong>：由于索引的性能取决于给定数据集中元素的分布，因此我们在具有不同分布的真实数据集上评估 FITing-Tree。随后，在第 7.6 节中，我们使用综合生成的最坏情况数据集证明了我们的技术仍然有价值。为了进行评估，我们使用三个不同的现实世界数据集，每个数据集都有非常不同的底层数据分布：(1) Weblogs[1]、(2) IoT [1] 和 (3) Maps [3]。</p><p>Weblogs 数据集包含过去 14 年来向大学计算机科学系发出的每个 Web 请求的约 7.15 亿条日志条目。该数据集包含微妙的趋势，例如在特定时间（例如学年与夏季、白天与夜间）发生更多请求的事实。另一方面，物联网数据集包含大约 500 万个读数，这些读数来自安装在大学学术大楼中的大约 100 个不同的物联网传感器（例如门、运动、电源）。由于这些传感器通常反映人类活动，因此该数据集具有有趣的模式，例如，由于课程正在上课，因此在某些时间段内活动较多。对于每个数据集，我们使用时间戳属性（例如，请求资源的时间）创建一个聚簇 FITing-Tree。最后，地图数据集包含世界各地 ≈ 2B 个要素（例如博物馆、咖啡店）的经度。毫不奇怪，位置的经度是相对线性的，并且不包含许多周期性趋势。与前两个数据集不同，我们在此数据集的经度属性上创建一个非聚簇 FITing-Tree。</p><p>对于我们的方法来说，影响 FITing-Tree 性能的数据集最重要的方面是数据的周期性。现在，将周期性视为逐步函数中两个“凸起”之间的距离，该函数将键映射到存储位置，如图 13a（蓝线）所示。如果 FITing-Tree 的指定误差大于周期性（绿线），则分割结果为单个片段。</p><p>然而，如果误差小于周期性（红线），我们需要多个段来近似数据分布。</p><p>因此，我们定义一个非线性比率来显示数据集的周期性。为了计算这个比率，我们首先计算覆盖给定错误阈值的数据集所需的段数。然后，我们通过相同大小的数据集所需的段数来标准化该结果，其周期性等于误差（这是最坏的情况，或者该规模中最“非线性”的情况）。</p><hr><h3 id="8-辅助证明"><a href="#8-辅助证明" class="headerlink" title="8. 辅助证明"></a>8. 辅助证明</h3><p>我们提供有关我们的分段算法 ShrinkingCone 的附加信息，如第 3 节中所述。首先，<strong>我们证明我们的算法生成的分段的最小大小</strong>。然后，尽管在实践中很有效，但我们表明，在考虑其产生的段数时，我们的算法可能比最佳算法更差。</p><h4 id="A-1-ShrinkingCone-Segment-Size"><a href="#A-1-ShrinkingCone-Segment-Size" class="headerlink" title="A.1 ShrinkingCone Segment Size"></a>A.1 ShrinkingCone Segment Size</h4><p>我们证明了定理 3.1 中有关最大线性段大小的主张。</p><p>证明。考虑 3 个任意点 (x1,y1)、(x2,y2)、(x3,y3)，其中 x1 &lt; x2 &lt; x3 且 y1 &lt; y2 &lt; y3。根据定义，线性函数从线段中的第一个点开始，到线段中的最后一个点结束。如果 y 轴上的距离 (loc) 大于指定的误差，则线性段无效。因此，给定 3 个点，在以下情况下，从 (x1,y1) 开始并在 (x3,y3) 结束的线性段不可行：</p><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.045ex;" xmlns="http://www.w3.org/2000/svg" width="37.809ex" height="3.075ex" role="img" focusable="false" viewbox="0 -897.2 16711.5 1359.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(1148.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(2149,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(2615,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(3066,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(3794.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"/></g><g data-mml-node="mfrac" transform="translate(4850.6,0)"><g data-mml-node="mrow" transform="translate(278,485) scale(0.707)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(926.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msub" transform="translate(1704.6,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(1008.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msub" transform="translate(1786.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><rect width="2176.4" height="60" x="120" y="220"/></g><g data-mml-node="mrow" transform="translate(7267,0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(1619.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msub" transform="translate(2620,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(3628.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="mo" transform="translate(11506.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msub" transform="translate(12507,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mstyle" transform="translate(13433.5,0)"><g data-mml-node="mspace"/></g><g data-mml-node="mstyle" transform="translate(14433.5,0)"><g data-mml-node="mspace"/></g><g data-mml-node="mo" transform="translate(15433.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(15822.5,0)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"/></g><g data-mml-node="mo" transform="translate(16322.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></p><p>通过重新排列不等式我们得到：</p><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -2.148ex;" xmlns="http://www.w3.org/2000/svg" width="132.933ex" height="5.428ex" role="img" focusable="false" viewbox="0 -1449.5 58756.2 2399"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="mtext"><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z"/><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(444,0)"/><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(836,0)"/></g><g data-mml-node="mo" transform="translate(1505.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"/></g><g data-mml-node="msub" transform="translate(2561.6,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(3710.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msub" transform="translate(4710.6,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(5859.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mfrac" transform="translate(6859.6,0)"><g data-mml-node="mrow" transform="translate(302,676)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(1148.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msub" transform="translate(2149,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(1230.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msub" transform="translate(2231,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><rect width="3439.6" height="60" x="120" y="220"/></g><g data-mml-node="mrow" transform="translate(10539.1,0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(1619.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msub" transform="translate(2620,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(3628.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="mrow" transform="translate(14556.7,0)"><g data-mml-node="mstyle"><g data-mml-node="mspace"/></g><g data-mml-node="mstyle" transform="translate(1000,0)"><g data-mml-node="mspace"/></g><g data-mml-node="mtext" transform="translate(2000,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(389,0)"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(889,0)"/><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(1389,0)"/></g></g><g data-mml-node="mtext" transform="translate(18334.7,0)"><path data-c="A0" d=""/></g><g data-mml-node="mo" transform="translate(18862.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mo" transform="translate(19918.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(20307.2,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(21456,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msub" transform="translate(22456.2,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(23382.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(23994,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"/></g><g data-mml-node="mrow" transform="translate(24494.2,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M701 -940Q701 -943 695 -949H664Q662 -947 636 -922T591 -879T537 -818T475 -737T412 -636T350 -511T295 -362T250 -186T221 17T209 251Q209 962 573 1361Q596 1386 616 1405T649 1437T664 1450H695Q701 1444 701 1441Q701 1436 681 1415T629 1356T557 1261T476 1118T400 927T340 675T308 359Q306 321 306 250Q306 -139 400 -430T690 -924Q701 -936 701 -940Z"/></g><g data-mml-node="mn" transform="translate(736,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(1458.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mfrac" transform="translate(2458.4,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(1230.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msub" transform="translate(2231,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(1230.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msub" transform="translate(2231,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><rect width="3439.6" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(6138,0) translate(0 -0.5)"><path data-c="29" d="M34 1438Q34 1446 37 1448T50 1450H56H71Q73 1448 99 1423T144 1380T198 1319T260 1238T323 1137T385 1013T440 864T485 688T514 485T526 251Q526 134 519 53Q472 -519 162 -860Q139 -885 119 -904T86 -936T71 -949H56Q43 -949 39 -947T34 -937Q88 -883 140 -813Q428 -430 428 251Q428 453 402 628T338 922T245 1146T145 1309T46 1425Q44 1427 42 1429T39 1433T36 1436L34 1438Z"/></g></g><g data-mml-node="mo" transform="translate(31590.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mo" transform="translate(32590.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(32979.6,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(34128.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msub" transform="translate(35128.6,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(36055.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mrow" transform="translate(36444.2,0)"><g data-mml-node="mstyle"><g data-mml-node="mspace"/></g><g data-mml-node="mstyle" transform="translate(1000,0)"><g data-mml-node="mspace"/></g><g data-mml-node="mtext" transform="translate(2000,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(389,0)"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(889,0)"/><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(1389,0)"/></g></g><g data-mml-node="mtext" transform="translate(40222.2,0)"><path data-c="A0" d=""/></g><g data-mml-node="mo" transform="translate(40750,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="mo" transform="translate(41805.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(42194.8,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(43343.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msub" transform="translate(44343.7,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(45270.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(45881.5,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"/></g><g data-mml-node="mrow" transform="translate(46381.7,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M701 -940Q701 -943 695 -949H664Q662 -947 636 -922T591 -879T537 -818T475 -737T412 -636T350 -511T295 -362T250 -186T221 17T209 251Q209 962 573 1361Q596 1386 616 1405T649 1437T664 1450H695Q701 1444 701 1441Q701 1436 681 1415T629 1356T557 1261T476 1118T400 927T340 675T308 359Q306 321 306 250Q306 -139 400 -430T690 -924Q701 -936 701 -940Z"/></g><g data-mml-node="mn" transform="translate(736,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(1458.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mfrac" transform="translate(2458.4,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(1230.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msub" transform="translate(2231,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(1230.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msub" transform="translate(2231,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><rect width="3439.6" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(6138,0) translate(0 -0.5)"><path data-c="29" d="M34 1438Q34 1446 37 1448T50 1450H56H71Q73 1448 99 1423T144 1380T198 1319T260 1238T323 1137T385 1013T440 864T485 688T514 485T526 251Q526 134 519 53Q472 -519 162 -860Q139 -885 119 -904T86 -936T71 -949H56Q43 -949 39 -947T34 -937Q88 -883 140 -813Q428 -430 428 251Q428 453 402 628T338 922T245 1146T145 1309T46 1425Q44 1427 42 1429T39 1433T36 1436L34 1438Z"/></g></g><g data-mml-node="mo" transform="translate(53478,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(54478.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mrow" transform="translate(54978.2,0)"><g data-mml-node="mstyle"><g data-mml-node="mspace"/></g><g data-mml-node="mstyle" transform="translate(1000,0)"><g data-mml-node="mspace"/></g><g data-mml-node="mtext" transform="translate(2000,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(389,0)"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(889,0)"/><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(1389,0)"/></g></g></g></g></g></g></g></svg></mjx-container></p><p>在(11)中对 y3 进行了加法和减法，在 (12) 中我们使用了 y2 和 y3 是整数的事实（因此y3−y2≥1）。这为线段中的第一个点与下一个线段中的第一个点之间的距离提供了下限【<strong>这有个很强的假设前提：position为数组下标</strong>】：</p><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -2.401ex;" xmlns="http://www.w3.org/2000/svg" width="86.889ex" height="5.933ex" role="img" focusable="false" viewbox="0 -1561.2 38405.1 2622.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,219.2)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(1148.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msub" transform="translate(2149,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="mtd" transform="translate(3075.6,0)"><g data-mml-node="mi"/><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"/></g><g data-mml-node="mfrac" transform="translate(1333.6,0)"><g data-mml-node="mrow" transform="translate(744.2,676)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(466,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(917,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1590.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(2590.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mrow" transform="translate(220,-818.3)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mfrac" transform="translate(1722.4,0)"><g data-mml-node="mrow" transform="translate(220,446.1) scale(0.707)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(1008.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msub" transform="translate(1786.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(1008.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msub" transform="translate(1786.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><rect width="2176.4" height="60" x="120" y="220"/></g></g><rect width="4338.9" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(6190.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mo" transform="translate(7246,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(7635,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(8101,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(8552,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(9225.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(10225.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(10725.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(11336.7,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"/></g><g data-mml-node="mfrac" transform="translate(11836.9,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(1230.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msub" transform="translate(2231,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(1230.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msub" transform="translate(2231,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g><rect width="3439.6" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(15794.2,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"/></g><g data-mml-node="mi" transform="translate(16850,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(17316,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(17767,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(18440.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(19440.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mtd" transform="translate(25016,0)"><g data-mml-node="mi"/><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"/></g><g data-mml-node="mo" transform="translate(1389,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mi" transform="translate(1778,0)"><path data-c="26" d="M156 540Q156 620 201 668T302 716Q354 716 377 671T401 578Q401 505 287 386L274 373Q309 285 416 148L429 132L437 142Q474 191 543 309L562 341V349Q562 368 541 376T498 385H493V431H502L626 428Q709 428 721 431H727V385H712Q688 384 669 379T639 369T618 354T603 337T591 316T578 295Q537 223 506 176T464 117T454 104Q454 102 471 85T497 62Q543 24 585 24Q618 24 648 48T682 113V121H722V112Q721 94 714 75T692 32T646 -7T574 -22Q491 -19 414 42L402 51L391 42Q312 -22 224 -22Q144 -22 93 25T42 135Q42 153 46 169T55 197T74 225T96 249T125 278T156 308L195 347L190 360Q185 372 182 382T174 411T165 448T159 491T156 540ZM361 576Q361 613 348 646T305 679Q272 679 252 649T232 572Q232 497 255 426L259 411L267 420Q361 519 361 576ZM140 164Q140 103 167 64T240 24Q271 24 304 36T356 61T374 77Q295 156 235 262L220 292L210 310L193 293Q177 277 169 268T151 229T140 164Z"/></g><g data-mml-node="mo" transform="translate(2833.8,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"/></g><g data-mml-node="msub" transform="translate(4111.6,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(5260.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msub" transform="translate(6260.6,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(7464.9,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"/></g><g data-mml-node="mi" transform="translate(8520.7,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(8986.7,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(9437.7,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(10110.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(11111.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mtd" transform="translate(36627.1,0)"><g data-mml-node="mi"/><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"/></g><g data-mml-node="mo" transform="translate(1389,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></g></g></g></svg></mjx-container></p><p>由于 (x3,y3) 是线段之外的第一个点，因此线段中的位置数量为 y3−1−y1 ≥ err+1。</p><hr><h4 id="A-2-ShrinkingCone-Competitive-Analysis"><a href="#A-2-ShrinkingCone-Competitive-Analysis" class="headerlink" title="A.2 ShrinkingCone Competitive Analysis"></a>A.2 ShrinkingCone Competitive Analysis</h4><p>接下来，我们证明在考虑生成的线段数量时，ShrinkingCone 可以比最优解任意差（即，ShrinkingCone 不具有竞争力）。</p><p>证明。给定误差阈值 E = 100，请考虑 ShrinkingCone 的以下输入：</p><p>1) 3 个键(x1,y1), (x2,y2), (x3,y3) 其中 y1 = 1,y2 = 2,y3 = 3 且 x3 −x2 = x2 −x1 = E / 2 （这是图 15中的步骤 1）。</p><p>2) 键 x4 = x3 + 1 / E， 重复 E + 1 次（使用 E + 1 个连续位置），并且键  x5 = x4+ 1 / E 不重复（使用 1 个位置）。之后，对 i ∈ [1, N] 重复以下模式：键  x~2(i+2)~ = x~2(i+2)−1~ +E 重复 E +1 次，并且键  x~2(i+2)+1~ = x~2(i+2)~ + 1 / E（这是图 15 中的步骤 2）。<br>3) 键  x~2(N+1+2)~ = x~2(N+1+2)−1~ + E / 2 （图 15 中的步骤 3）。</p><p><img src="/posts/9cf2.htmlimage-20240427231910086.png" alt="image-202427231910086" style="zoom:50%;"></p><p><img src="/posts/9cf2.htmlimage-20240427231947328.png" alt="image-202404271947328" style="zoom:50%;"></p><p>因此，算法将根据此输入创建 N + 2 个段。</p><p>另一方面，最佳算法只需要 2 个段：第一个段是第一个键，第二个段覆盖输入的其余部分，因为从第二个键开始到最后一个键结束的行永远不会更远由于输入的构造，任何键上的 E 都比 E 好。</p><p><img src="/posts/9cf2.htmlimage-20240427232307563.png" alt="image-202404272307563" style="zoom:50%;"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 学习型索引 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习型索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06-学习型索引-RadixSpline</title>
      <link href="posts/0.html"/>
      <url>posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="RadixSpline-A-Single-Pass-Learned-Index"><a href="#RadixSpline-A-Single-Pass-Learned-Index" class="headerlink" title="RadixSpline: A Single-Pass Learned Index"></a>RadixSpline: A Single-Pass Learned Index</h2><p>RadixSpline ：一次数据传输时便可构建完模型，大小和查询性能与RMI具有竞争力。</p><hr><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>认为 <code>Kraska</code> 等人提出的学习型索引结构是一种新型的排序数据索引，使用 ML 中的<code>监督学习技术</code>来学习数据分布，并预测 <code>key 对应的 position</code>。</p><p><code>SOSD</code>基准证明：学习的索引结构（可以被视为 <code>CDF</code>近似器）可以与最先进的索引结构在大小与查找性能方面进行竞争。【<strong>训练底层数据的累积分布函数CDF</strong>】。</p><p>针对时序数据库，像 <code>LSM</code>树所设计的那样，即有些应用程序的索引是不需要支持单独的更新的，能够有效地构建它们就足够了。</p><p>在 LSM 树中，数据存储在多个文件中，每个文件都按键列排序。每个文件通常存储附加元数据，例如布隆过滤器或索引。此元数据可在查询时用于从查找中排除文件（通过布隆过滤器或下限/上限）或快速定位文件中的相关元组（通过索引）。</p><p>这些文件被组织成多个级别，较高级别包含的文件数量比 较低级别多得多。新数据被插入到较低级别的文件中，<strong>这些文件定期与较高级别的文件合并</strong>。</p><p><strong>创新点：两个文件之间的合并过程是重新构建学习索引的最佳时机</strong>。</p><p><strong>合并按排序顺序生成数据</strong>【<strong>数据有序</strong>】，这些数据可以在写回磁盘之前使用单遍训练算法过一遍。由于合并操作本身的成本很高，并且通常是异步完成的，因此训练这样的一次性学习索引只会产生可以忽略不计的恒定开销。然而，现有的学习索引不允许高效构建【<strong>难点，也是创新所在</strong>】。</p><p>RadixSpline (RS)：在排序数据的单次传递中构建。FITing-Tree 和 PGM 也支持单通道构建，但是他们每个元素的工作量与级别数成对数关系（类似于 BTree 中的插入）。RS是第一个单遍学习索引，每个新元素的工作量恒定。</p><p>作为有序索引，RS 支持相等和范围谓词（例如下限查找）。 RS 的构建分两步进行。首先，将线性样条拟合到数据的 CDF，以保证一定的误差范围。这会产生一组样条点，该样条点可能明显小于基础数据。其次，我们构建一个基数表（平面基数结构），用作样条点的近似索引。与自适应基数树（ART）中的 Node256 类似，我们提取某个基数前缀（例如，前 20 位，忽略所有键共享的公共前缀位）并将其用作基数表中的偏移量。这两个步骤都可以在排序数据上一次执行。RS 不仅构建效率高，而且在大小和查找性能方面可与最先进的 RMI 模型相媲美。索引大小对于 LSM-tree 应用程序来说是一个特别重要的因素，因为索引保存在主内存中（而每个大的排序文件存储在磁盘上）。此外，RS的实现仅由大约一百行C++代码组成，并且没有任何外部依赖项。最后，RS 仅采用两个超参数（样条误差和基数表大小）。两者都会对大小和查找延迟产生直观且可靠的影响。因此，调整 RS 比调整具有许多超参数的更复杂的学习索引结构更容易 [20]。需要注意的是，RS 可能会受到严重偏差的影响，导致基数表在很大程度上无效。在这种情况下，人们可以退回到树形结构的基数表或单独处理异常值。然而，我们尚未在现实世界的数据中遇到如此极端的偏差。总之，我们认为 RS 是一种实用的学习索引结构，在一次写入/多次读取设置（例如 LSM 树）中具有潜在的高影响力。</p><p>更广泛地说，这项工作遵循了将机器学习组件集成到系统中的最新趋势[7]，特别是数据库系统[10,12,16–19,21,24,26–31]。</p><hr><h3 id="RadixSpline"><a href="#RadixSpline" class="headerlink" title="RadixSpline"></a>RadixSpline</h3><p>RS索引：将查找 key 与 基础数据中 key 的实际位置做映射。与 RMI 类似，基数样条索引要求基础数据根据一维数组中的查找键进行排序。</p><p>RS 索引由两个部分组成：一组样条点和一个基数表。样条点集是键的子集，经过选择，以便任何查找键的样条插值将导致预设误差范围内的预测查找位置。</p><p>例如，如果预设误差界限为32，则任何查找关键字的位置与 RS索引预测的位置相距不超过32个位置。基数表有助于快速找到给定查找键的正确样条点。直观上，基数表限制了可能的样条点的范围，以搜索查找键的每个可能的 b 长度前缀。</p><p>在查找时，基数表用于确定要检查的样条点的范围。搜索这些样条点，直到找到关键点周围的两个样条点。然后，使用线性插值来预测查找键在基础数据中的位置（索引）。由于样条插值是有误差范围的，因此只需要搜索（小）范围的基础数据</p><p>与其他学习索引 [3, 13] 相比，RS 可以在排序数据上一次性构建。虽然之前在 FITing-Tree [6] 和其他 [5, 25] 中已经探索过样条线和自下而上的方法，但在本研究中，我们将 [6] 中的思想与基数树相结合，使其与自上而下构建的索引 [13] 具有很强的竞争力。</p><hr><h4 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h4><p>RS 索引，如 PGM 索引 [5] 或 FITing-Trees [6]，是“自下而上”构建的。首先，我们在基础数据之上构造一个误差有界样条曲线。然后，所选样条点本身在基数表中索引。</p><h5 id="构建样条线"><a href="#构建样条线" class="headerlink" title="构建样条线"></a>构建样条线</h5><p>正如[13]中所观察到的，所有索引结构都可以被视为将查找键映射到位置的模型。 令索引 D 的数据集为元组的索引集， 其中 D~i~ = (k~i~ ,p~i~)， 其中 D~i~ 表示第 i 个数据点， k~i~ 表示第 i 个数据点的键，p~i~ 表示第 i 个数据点的位置（偏移量）。基数样条索引首先构建样条模型 S，使得 S(k~i~) = p~i~ ±e，其中 e 是指定常数。换句话说，样条模型 S 总是在恒定误差 e 内预测数据的正确位置。</p><p>这个误差有界模型是通过样条插值实现的（我们使用 GreedySplineCorridor [22]）。模型 S 的参数 Knots(S) 是一组样条点或节点，它们是一组有代表性的数据点（参见图 1）。</p><p><img src="/posts/0.htmlRS模型.png" alt="RS模型" style="zoom:50%;"></p><p>选择这些数据点，使得对于任何查找键 x，在 Knots(S) 中两个最接近的样条点之间进行线性插值将产生误差不大于 e 的估计（参见图 2）。形式上，为了评估 S(x)，令 (k~left~,p~left~) ∈ Knots(S) 为具有最大键的结，使得 k~left~ ≤ x 并令 (k~right~,p~right~) ∈ Knots(S) 为具有最小键的结，使得 k~right~ &gt; x，我们计算：</p><p>$S(x)=p<em>{left}+(x-k</em>{left})\times\frac{p<em>{right}-p</em>{left}}{k<em>{right}-k</em>{left}}$</p><p>有关误差有界样条算法的更多详细信息，请读者参考[22]。</p><p><img src="/posts/0.htmlCDFS.png" alt="CDFS" style="zoom:50%;"></p><hr><h5 id="构建基数表"><a href="#构建基数表" class="headerlink" title="构建基数表"></a>构建基数表</h5><p>在选定的样条点之上构建一个基数表，以快速找到查找键周围的两个样条点。基数表是一个一维uint32_t 数组，它将固定长度的键前缀（“基数位”）映射到具有该前缀的第一个样条点。键前缀是基数表中的偏移量，而样条点表示为存储在基数表中的 uint32_t 值（参见图 1 中的指针）。</p><p>基数表以基数位 r 的数量作为参数。例如，对于 r = 18，我们分配一个包含 2^18^ 个条目（大小为 1 MiB）的数组。较大的 r 会使表的大小呈指数增长 (2^r^ )，但也可能会提高其精度。也就是说，我们可能需要搜索更窄范围的样条点来找到查找键周围的两个样条点。在第 3 节中，我们展示了该参数对大小和查找性能的影响。</p><p>构建过程本身非常简单且非常快：我们首先分配一个适当大小的数组（2^r^ 个条目），然后遍历所有样条点，每当遇到新的 r 位前缀 b 时，我们就插入偏移量将样条点（uint32_t 值）放入基数表中偏移量 b 处的槽中。由于样条点是有序的，因此基数表是从左到右按连续顺序填充的。作为一种优化，我们在构建基数表时消除了所有键共享的公共前缀位。</p><hr><h5 id="单次通行证"><a href="#单次通行证" class="headerlink" title="单次通行证"></a>单次通行证</h5><p>构建 CDF、样条曲线和基数表都可以在排序数据点上一次性执行。当遇到新的 CDF 点时（即，当键发生变化时），我们将该点传递给样条构造算法 [22]。在同一遍中填充预先分配的基数表也很简单：每当我们在选定的样条点中遇到新的 r 位前缀时，我们都会在表中创建一个新条目。</p><hr><h5 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h5><p><img src="/posts/0.htmlRS.png" alt="RS" style="zoom:33%;"></p><p>使用图 1 中的示例，查找逻辑如下：我们首先提取查找键的 r 位前缀 b（本例中为 101）。然后，我们使用提取的位 b 对基数表进行偏移访问，检索存储在位置 b 和 b +1（此处为位置 5 和 6）的两个指针。这些指针（以橙色标记）定义样条点上的缩小搜索范围。接下来，我们使用二分搜索在该范围内搜索查找键周围的两个样条点。</p><p>随后，我们在这两个样条点之间执行线性插值以获得按键的估计位置 p。最后，我们在误差范围 (p ± e) 内执行二分搜索，以找到该键的第一次出现。</p><hr><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><p>与 SOSD 一样，我们在排序数组之上构建索引。索引接受一个键并在基础数据中生成一个搜索范围。如果查找键存在，则此范围必须包含查找键，否则必须包含不大于查找键的第一个键（下限搜索）。</p><p>然后，使用二分查找来定位搜索范围内的精确键。索引的评估基于其端到端性能：生成搜索范围的时间加上执行二分搜索的时间。我们对给定数据集执行 10M 查找（1 个线程）并报告平均查找延迟。查找键统一从键中选择。</p><p>我们将 RS 与三种传统的非学习方法进行比较：ART [14]、STX B+ 树 (BTree) [1] 和二分搜索 (BS)。对于 ART 和 BTree，我们使用 32 的步幅（意味着每个第 32 个键都插入到索引中 - 与为每个键建立索引相比，这提供了更好的空间和性能）。我们还与递归模型索引（RMI）[13]的公共实现[20]进行比较，这是一种“自上而下”构建的学习方法（即从松散拟合开始，然后逐步学习更细粒度的模型）并在内部使用一系列模型（例如线性、立方、甚至 BTree）。基于哈希的方法被排除在外，因为基于哈希的方法不支持下限搜索。由于 ART 不支持重复键，因此它没有 wiki（唯一具有重复项的数据集）的结果。</p><hr><h4 id="构建时间"><a href="#构建时间" class="headerlink" title="构建时间"></a>构建时间</h4><p>（图 3，左）。由于其单遍构建过程，RS 的构建效率几乎与 ART 或 BTree 一样，并且比 RMI 快得多，后者对排序的数据点执行多次训练。</p><h4 id="查找延迟"><a href="#查找延迟" class="headerlink" title="查找延迟"></a>查找延迟</h4><p>（图 3，中）。二分搜索 (BS) 在所有数据集中每次查找大约需要 850 纳秒。 BTree 通过更有效地使用缓存来改进 BS，并且只需要大约 600ns。与 BS 一样，它很大程度上独立于数据分布。 RMI 和 RS 这两种学习方法都比传统索引快得多，但也更容易受到数据分布的影响。请注意，我们已经调整了这两种方法以实现最小查找延迟。</p><img src="/posts/0/%E5%8F%AF%E8%A7%86%E5%8C%9601.png" class title="可视化01"><h4 id="索引大小。"><a href="#索引大小。" class="headerlink" title="索引大小。"></a>索引大小。</h4><p>（图 3，右）。除了 BS 和一些异常值之外，所有索引都消耗大约 100 MiB，相当于未压缩密钥大小（200 M 64 位密钥）的 6.6%。对于人脸数据集，RS 一反常态地需要超过 600 MiB (39%) 才能实现其最佳性能。接下来，我们研究该数据集的不同 RS 配置。</p><h5 id="配置空间"><a href="#配置空间" class="headerlink" title="配置空间"></a>配置空间</h5><p>人脸的最佳 RS 配置（图 3）会使用大量内存（约 650 MiB）。然而，我们可以轻松地用查找性能换取内存，如图 4 所示：构建时间（左）和大小（右）主要取决于样条误差。从误差为 16 开始，RS 可以在 2 秒内为此数据集构建，并且需要不到 200 MiB。</p><p>例如，当样条误差为 16（而不是 2）和 20（而不是 25 基数位）时，RS 以性能 (-11.5%) 换取了显著的空间减少 (-99.9%)。</p><img src="/posts/0/%E5%8F%AF%E8%A7%86%E5%8C%9602.png" class title="可视化02"><hr><h4 id="LSM-性能"><a href="#LSM-性能" class="headerlink" title="LSM 性能"></a>LSM 性能</h4><p>为验证 RS 对 LSM 的适用性，我们进行了初步实验，用 RocksDB 中的 RadixSpline 替换 BTree 索引。</p><p>我们使用 osmc 数据集并执行了 400 M 操作，其中 50% 是读取，50% 是写入（参见图 5）。使用RS时，平均写入时间增加了约4%，但平均读取时间减少了20%以上。 BTree 的总执行时间从 712 秒降至 521 秒。此外，RS 变体使用的内存减少了约 45%，可能为更大的 Bloom 过滤器或增加的缓存创造空间。虽然这是初步的，但该实验表明了 RS 在 LSM 中的潜在好处。</p><p><img src="/posts/0.html可视化03.png" alt="可视化03" style="zoom:67%;"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 学习型索引 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习型索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05-学习型索引-PGM-index</title>
      <link href="posts/d9da.html"/>
      <url>posts/d9da.html</url>
      
        <content type="html"><![CDATA[<h2 id="PGM-索引：具有可证明的最坏情况边界的完全动态压缩学习索引"><a href="#PGM-索引：具有可证明的最坏情况边界的完全动态压缩学习索引" class="headerlink" title="PGM 索引：具有可证明的最坏情况边界的完全动态压缩学习索引"></a>PGM 索引：具有可证明的最坏情况边界的完全动态压缩学习索引</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>来自网络、社交网络和物联网的信息量不断增加，严重影响了可用数据的管理。如果没有正确设计的算法解决方案，CPU、GPU 和内存的进步很难解决这个问题。因此，大量研究致力于处理如此庞大的数据量，特别关注内存层次结构利用算法 [6, 35]、流查询处理 [13]、空间效率 [24]、并行和分布式处理 [19] 。</p><p>但尽管取得了这些令人敬畏的结果，我们仍然怀念足够灵活的算法和数据结构，能够在因用户、设备和应用程序而异的计算约束下工作，并且可能会随着时间的推移而演变。</p><p>【解决的问题：利用有限的CPU、内存等资源尽量更快速处理更多更大的数据量】</p><p>在本文中，我们将注意力集中在内部或外部存储器的索引数据结构的情况，这解决了所谓的完全动态可索引字典问题。该问题要求正确存储真实键的 multiset S，以便有效支持以下查询和更新操作：</p><ol><li>member(x) = TRUE  if <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="6.148ex" height="2.034ex" role="img" focusable="false" viewbox="0 -705 2717.6 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="mi" transform="translate(1794.6,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(2439.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g></g></svg></mjx-container>  FALSE otherwise;    【存在性判断】</li><li>lookup(x)  returns the satellite data of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="5.519ex" height="1.686ex" role="img" focusable="false" viewbox="0 -705 2439.6 745"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="mi" transform="translate(1794.6,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g></g></g></svg></mjx-container> (if any)，NIL otherwise;</li><li>predecessor(x)= <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.563ex;" xmlns="http://www.w3.org/2000/svg" width="17.856ex" height="2.26ex" role="img" focusable="false" viewbox="0 -750 7892.3 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(833,0)"/><path data-c="78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z" transform="translate(1333,0)"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2027.7,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(767.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="mi" transform="translate(1712.6,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(2635.3,0)"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(3191.1,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(3958.9,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"/></g><g data-mml-node="mi" transform="translate(5014.7,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g></g><g data-mml-node="mo" transform="translate(7614.3,0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"/></g></g></g></svg></mjx-container> 【比 x 小的最大数】</li><li>range(x,y) = <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.269ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 4097.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(867.2,0)"><path data-c="2229" d="M88 -21T75 -21T55 -7V200Q55 231 55 280Q56 414 60 428Q61 430 61 431Q77 500 152 549T332 598Q443 598 522 544T610 405Q611 399 611 194V-7Q604 -22 591 -22Q582 -22 572 -9L570 405Q563 433 556 449T529 485Q498 519 445 538T334 558Q251 558 179 518T96 401Q95 396 95 193V-7Q88 -21 75 -21Z"/></g><g data-mml-node="mo" transform="translate(1756.4,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(2034.4,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(2606.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(3051.1,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(3541.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(3819.1,0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"/></g></g></g></svg></mjx-container>                            【区间与集合的交集】</li><li>insert(x)  adds x to S, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="14.722ex" height="2.034ex" role="img" focusable="false" viewbox="0 -705 6507.3 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/></g><g data-mml-node="mi" transform="translate(789.7,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mo" transform="translate(1255.7,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/></g><g data-mml-node="mi" transform="translate(1700.3,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(2623.1,0)"><path data-c="2190" d="M944 261T944 250T929 230H165Q167 228 182 216T211 189T244 152T277 96T303 25Q308 7 308 0Q308 -11 288 -11Q281 -11 278 -11T272 -7T267 2T263 21Q245 94 195 151T73 236Q58 242 55 247Q55 254 59 257T73 264Q121 283 158 314T215 375T247 434T264 480L267 497Q269 503 270 505T275 509T288 511Q308 511 308 500Q308 493 303 475Q293 438 278 406T246 352T215 315T185 287T165 270H929Q944 261 944 250Z"/></g><g data-mml-node="mi" transform="translate(3900.9,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(4768.1,0)"><path data-c="222A" d="M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(5657.3,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g></g><g data-mml-node="mo" transform="translate(6229.3,0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"/></g></g></g></svg></mjx-container></li><li>delete(x) removes <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g></g></g></svg></mjx-container>  from <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="2.088ex" height="2.034ex" role="img" focusable="false" viewbox="0 -705 923 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(645,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g></g></svg></mjx-container> i.e. <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.869ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 4362 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(922.8,0)"><path data-c="2190" d="M944 261T944 250T929 230H165Q167 228 182 216T211 189T244 152T277 96T303 25Q308 7 308 0Q308 -11 288 -11Q281 -11 278 -11T272 -7T267 2T263 21Q245 94 195 151T73 236Q58 242 55 247Q55 254 59 257T73 264Q121 283 158 314T215 375T247 434T264 480L267 497Q269 503 270 505T275 509T288 511Q308 511 308 500Q308 493 303 475Q293 438 278 406T246 352T215 315T185 287T165 270H929Q944 261 944 250Z"/></g><g data-mml-node="mi" transform="translate(2200.6,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(3067.8,0)"><path data-c="2216" d="M56 731Q56 740 62 745T75 750Q85 750 92 740Q96 733 270 255T444 -231Q444 -239 438 -244T424 -250Q414 -250 407 -240Q404 -236 230 242T56 731Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3790,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g></g></g></g></svg></mjx-container>. </li></ol><p>在下文中，我们使用通用表达式“查询操作”来指代任何先前类型的逐点查询（member、lookup 和 predecessor），而我们明确指代范围查询，因为它的输出大小可变。</p><p>一个众所周知的关键观察是，任何先前的逐点查询和范围操作的实现都归结为实现所谓的rank(x) 原语，对于任何实值 x，该原语返回 S 中比 x 更小的 keys 的数量。事实上，如果 S 中的键<strong>存储在排序数组</strong> A 中，则 member (x) 只需检查 A[rank(x)] = x 是否成立；predecessor(x) 由返回 A[rank(x) − 1] 组成； range(x,y) 由数组A的位置 rank(x) 到大于 y 的键的值组成。</p><p>因此，从现在开始，我们重点关注rank的实现，除非时空界限的正式表述需要参考具体的操作。</p><p><strong>背景及相关工作</strong>。现有的索引数据结构可以分为：（i）<strong>基于哈希的</strong>，范围从传统哈希表到最新技术，如布谷鸟哈希[30]； (ii) <strong>基于树的</strong>，例如 B 树及其变体 [3,6,33,35,37]； (iii) <strong>基于位图的</strong> [10, 38]，允许高效的集合操作； (iv) <strong>基于 trie</strong>，通常用于可变长度 keys，支持前驱与范围。</p><p>不幸的是，基于散列的索引不支持前驱或范围搜索；基于位图的索引的存储、维护和解压缩成本可能很高[36]；基于 trie 的索引大多是基于指针的，除了最近的结果 [15] 之外，键都是未压缩存储的，因此占用的空间与字典大小成正比。因此，B 树及其变体仍然是商业数据库系统中此类查询的主要数据结构 [31]。</p><p>最近，引入了一个新的数据结构系列，称为学习索引 [22, 16]。这些新数据结构的关键思想是索引是模型，我们可以训练它来学习将输入集 S 中的键映射到数组 A 中的位置的函数 rank。</p><p>索引数据结构和 rank 函数之间的这种并行似乎并不是什么新鲜事，事实上，前面四个索引系列中的任何一个都提供了它的具体实现。</p><p><strong>但当我们将 keys <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="5.404ex" height="1.686ex" role="img" focusable="false" viewbox="0 -705 2388.6 745"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(798.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="mi" transform="translate(1743.6,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g></g></g></svg></mjx-container> 视为笛卡尔平面中的点 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.637ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 5143.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(910,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(1354.7,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1805.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(2334.7,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2934.7,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(3455.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(3844.7,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(4365.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(4754.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>  时，它的新颖性就变得清晰起来。作为一个例子，让我们考虑一个 keys 的字典的情况：a,a+1,……,a+n−1，其中 a 是整数。这里，rank(k) 可以精确地计算为 k−a（即通过斜率为1和截距−a的线），因此它需要恒定的时间和空间来实现，与 S中键的数量 n无关</strong>。这个简单的例子揭示了数据分布的模式和趋势提供的潜在压缩机会。然而，我们不能说所有数据集都完全遵循“线性趋势”，事实上，这就是 [1, 22] 的新颖贡献。</p><p>这些作者提出了机器学习（ML）技术，通过简洁的模型提取数据中的模式（从线性到更复杂的模型），通过一些“错误”来学习函数 rank。可以有效地纠正这些错误，以返回 精确的 rank 的值。这样，rank 的实现可以被重新构建为一个 ML 问题，其中我们搜索计算速度快、空间简洁且根据下面详细介绍的一些标准最接近 rank 的模型。</p><p>这是 [22] 及其递归模型索引 (RMI) 所追求的设计目标，它使用组织为有向无环图 (DAG) 的 ML 模型层次结构，并经过训练来学习输入分布（k,rank(k)），其针对所有 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="5.404ex" height="1.686ex" role="img" focusable="false" viewbox="0 -705 2388.6 745"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(798.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="mi" transform="translate(1743.6,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g></g></g></svg></mjx-container>。在查询时，每个模型从顶部开始，将查询键作为输入，并在 DAG 中选择对该键“负责”的层次以下模型。RMI 的输出是最后查询的 ML 模型返回的位置，但这只是一个近似位置。因此，最终的二分搜索是在相邻位置范围内执行的，其大小取决于 RMI 的预测误差。</p><p>人们可能会认为 ML 模型无法提供传统索引所保证的保证，因为它们可能无法学习分布，而且评估它们的成本可能很高 [16, 21]。出乎意料的是，RMI 主导了 B+ 树，速度快了 1.5-3×，空间小了两个数量级 [22]。</p><p>尽管如此，RMI 在模型大小和查询时间之间引入了另一组难以控制的时空权衡，因为它们取决于输入数据的分布、RMI 的 DAG 结构以及 ML采用的模型的复杂性。这促使了 FITing-tree [17] 的引入，它仅使用线性模型，B + 树来索引它们，并且它提供了一个整数参数“<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="5.203ex" height="1.819ex" role="img" focusable="false" viewbox="0 -666 2299.6 804"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g><g data-mml-node="mo" transform="translate(743.8,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="mn" transform="translate(1799.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>”来控制最终二分搜索步骤所在区域的大小。</p><p>图 1 显示了一个近似 14 个键的线性模型 f~s~ 的示例，及其用于确定键 k = 37 的近似位置，这实际上是 f~s~(k) ≈ 7，而不是正确的位置 5，因此犯了一个错误“<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.203ex" height="1.692ex" role="img" focusable="false" viewbox="0 -666 2299.6 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g><g data-mml-node="mo" transform="translate(743.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1799.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g></svg></mjx-container>”。</p><p><img src="/posts/d9da.htmlimage01.png" alt="FITing-tree示例图" style="zoom:50%;"></p><p>实验上，FITing-tree 提高了 B+-tree 的时间性能，节省了几个数量级的空间[17]，但这个结果没有与 RMI 的性能进行比较。此外，拟合树叶子中的线性模型的计算在理论上不是最优的，并且在实践中效率低下。<strong>由于索引这些线性模型的 B+ 树的高度增加，这对其最终空间占用产生负面影响并降低其查询效率</strong>。</p><p><strong>我们的贡献</strong>。在本文中，我们致力于设计可证明有效的学习索引，这些索引也是压缩的、分布感知的，并且可以根据任何给定的空间或延迟要求进行自动调整。</p><p>具体来说，我们设计了一个完全动态的学习索引，即分段几何模型索引（PGM-index），它基于新颖的递归结构中的固定最大误差容限来协调最佳数量的线性模型（第2节和第3节）。根据[32]证明的下界，PGM索引在占用简洁空间的同时最优地解决了I/O前驱搜索问题。此外，它的新设计使其成为一个完全学习的索引（与混合传统和学习设计元素的 RMI 和 FITing-tree 不同），并且它允许我们引入新颖的技术来使其压缩（第 4 节）并且不仅适应 keys 分配还涉及查询分配（第 5 节）。然后我们证明 PGM 索引可以有效地自动调整自身以满足任何给定的空间或延迟要求（第 6 节）。</p><p>我们在包含多达 10 亿个键的合成数据集和真实数据集上测试 PGM 索引的效率（第 7 节）。简而言之，PGM-index 的实验成果是：（i）空间占用率比 FITing-tree [17] 好 75%，比 CSS-tree [33] 好 83 倍，而相同的情况下或更好的查询时间； (ii) 在查询时间和空间占用方面统一提高了 RMI [22] 的性能，并且构建速度提高了 15 倍，同时不需要超参数调整； (iii) 在各种动态工作负载中，查询和更新时间比 B+ 树快 71%，同时将其空间占用减少四个数量级（从千兆字节到几兆字节）。</p><p>作为对学术研究的最后贡献，我们发布（<a href="https://pgm.di.unipi.it）我们学习的数据结构的实现，以促进进一步的研究以及在现有软件中采用新一代学习的数据结构。">https://pgm.di.unipi.it）我们学习的数据结构的实现，以促进进一步的研究以及在现有软件中采用新一代学习的数据结构。</a></p><hr><h3 id="PGM-INDEX"><a href="#PGM-INDEX" class="headerlink" title="PGM-INDEX"></a>PGM-INDEX</h3><p>令 S 为从 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.063ex;" xmlns="http://www.w3.org/2000/svg" width="1.554ex" height="1.609ex" role="img" focusable="false" viewbox="0 -683 687 711"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="55" d="M8 592Q8 616 70 649T193 683Q246 683 246 631Q246 587 205 492T124 297T83 143Q83 101 100 75T154 48Q202 48 287 135T450 342T560 553Q589 635 593 640Q603 656 626 668T669 683H670Q687 683 687 672T670 616T617 463T547 220Q525 137 521 68Q521 54 522 50T533 42L543 47Q573 61 588 61Q604 61 604 47Q599 16 506 -22Q486 -28 468 -28T436 -18T421 18Q421 92 468 258Q468 259 467 257T459 248Q426 206 391 167T303 81T194 6T83 -22Q66 -22 58 -20Q25 -11 4 19T-17 99Q-17 146 8 220T64 358T120 488T146 586Q146 604 141 608T123 613H120Q99 613 72 597T25 580Q8 580 8 592Z"/></g></g></g></g></svg></mjx-container>【<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.063ex;" xmlns="http://www.w3.org/2000/svg" width="1.554ex" height="1.609ex" role="img" focusable="false" viewbox="0 -683 687 711"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="55" d="M8 592Q8 616 70 649T193 683Q246 683 246 631Q246 587 205 492T124 297T83 143Q83 101 100 75T154 48Q202 48 287 135T450 342T560 553Q589 635 593 640Q603 656 626 668T669 683H670Q687 683 687 672T670 616T617 463T547 220Q525 137 521 68Q521 54 522 50T533 42L543 47Q573 61 588 61Q604 61 604 47Q599 16 506 -22Q486 -28 468 -28T436 -18T421 18Q421 92 468 258Q468 259 467 257T459 248Q426 206 391 167T303 81T194 6T83 -22Q66 -22 58 -20Q25 -11 4 19T-17 99Q-17 146 8 220T64 358T120 488T146 586Q146 604 141 608T123 613H120Q99 613 72 597T25 580Q8 580 8 592Z"/></g></g></g></g></svg></mjx-container>：由于线性模型需要算术运算，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.063ex;" xmlns="http://www.w3.org/2000/svg" width="1.554ex" height="1.609ex" role="img" focusable="false" viewbox="0 -683 687 711"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="55" d="M8 592Q8 616 70 649T193 683Q246 683 246 631Q246 587 205 492T124 297T83 143Q83 101 100 75T154 48Q202 48 287 135T450 342T560 553Q589 635 593 640Q603 656 626 668T669 683H670Q687 683 687 672T670 616T617 463T547 220Q525 137 521 68Q521 54 522 50T533 42L543 47Q573 61 588 61Q604 61 604 47Q599 16 506 -22Q486 -28 468 -28T436 -18T421 18Q421 92 468 258Q468 259 467 257T459 248Q426 206 391 167T303 81T194 6T83 -22Q66 -22 58 -20Q25 -11 4 19T-17 99Q-17 146 8 220T64 358T120 488T146 586Q146 604 141 608T123 613H120Q99 613 72 597T25 580Q8 580 8 592Z"/></g></g></g></g></svg></mjx-container> 是实数范围。我们的解决方案适用于可以映射到实数同时保留其顺序的任何类型的键。示例包括整数、字符串等】 中提取的 n 个键的多重集，PGM 索引是一个以整数“<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="5.203ex" height="1.819ex" role="img" focusable="false" viewbox="0 -666 2299.6 804"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g><g data-mml-node="mo" transform="translate(743.8,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="mn" transform="translate(1799.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>” 表示的参数化数据结构，它解决了 S 上的完全可索引字典问题，如第 1 节中所定义那样。</p><p>令 A 为存储 S 的（可能重复的）键的排序数组。</p><p>PGM 索引的第一个成分是分段线性近似模型（PLA 模型），即 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.063ex;" xmlns="http://www.w3.org/2000/svg" width="1.554ex" height="1.609ex" role="img" focusable="false" viewbox="0 -683 687 711"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="55" d="M8 592Q8 616 70 649T193 683Q246 683 246 631Q246 587 205 492T124 297T83 143Q83 101 100 75T154 48Q202 48 287 135T450 342T560 553Q589 635 593 640Q603 656 626 668T669 683H670Q687 683 687 672T670 616T617 463T547 220Q525 137 521 68Q521 54 522 50T533 42L543 47Q573 61 588 61Q604 61 604 47Q599 16 506 -22Q486 -28 468 -28T436 -18T421 18Q421 92 468 258Q468 259 467 257T459 248Q426 206 391 167T303 81T194 6T83 -22Q66 -22 58 -20Q25 -11 4 19T-17 99Q-17 146 8 220T64 358T120 488T146 586Q146 604 141 608T123 613H120Q99 613 72 597T25 580Q8 580 8 592Z"/></g></g></g></g></svg></mjx-container> 中的键与其在 数组A 中的近似位置之间的映射。</p><p>具体来说，我们的目标是学习一种映射，该映射返回键 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="5.499ex" height="1.661ex" role="img" focusable="false" viewbox="0 -694 2430.6 734"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(798.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1743.6,0)"><g data-mml-node="mi"><path data-c="55" d="M8 592Q8 616 70 649T193 683Q246 683 246 631Q246 587 205 492T124 297T83 143Q83 101 100 75T154 48Q202 48 287 135T450 342T560 553Q589 635 593 640Q603 656 626 668T669 683H670Q687 683 687 672T670 616T617 463T547 220Q525 137 521 68Q521 54 522 50T533 42L543 47Q573 61 588 61Q604 61 604 47Q599 16 506 -22Q486 -28 468 -28T436 -18T421 18Q421 92 468 258Q468 259 467 257T459 248Q426 206 391 167T303 81T194 6T83 -22Q66 -22 58 -20Q25 -11 4 19T-17 99Q-17 146 8 220T64 358T120 488T146 586Q146 604 141 608T123 613H120Q99 613 72 597T25 580Q8 580 8 592Z"/></g></g></g></g></svg></mjx-container> 的位置，该位置至多 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container> 远离 A 中的正确位置。</p><p>我们说分段是因为单个线性模型（也称为分段）可能不足以 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container> 近似 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.063ex;" xmlns="http://www.w3.org/2000/svg" width="1.554ex" height="1.609ex" role="img" focusable="false" viewbox="0 -683 687 711"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="55" d="M8 592Q8 616 70 649T193 683Q246 683 246 631Q246 587 205 492T124 297T83 143Q83 101 100 75T154 48Q202 48 287 135T450 342T560 553Q589 635 593 640Q603 656 626 668T669 683H670Q687 683 687 672T670 616T617 463T547 220Q525 137 521 68Q521 54 522 50T533 42L543 47Q573 61 588 61Q604 61 604 47Q599 16 506 -22Q486 -28 468 -28T436 -18T421 18Q421 92 468 258Q468 259 467 257T459 248Q426 206 391 167T303 81T194 6T83 -22Q66 -22 58 -20Q25 -11 4 19T-17 99Q-17 146 8 220T64 358T120 488T146 586Q146 604 141 608T123 613H120Q99 613 72 597T25 580Q8 580 8 592Z"/></g></g></g></g></svg></mjx-container> 中所有键的位置。</p><p>因此，PGM 索引学习一系列段，每个段占用恒定空间（两个浮点数和一个键）和恒定查询时间来返回 k 在 A 中的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container> -近似位置。</p><p>我们在下面的引理 1 中表明，存在一种计算最佳 PLA 模型的线性时间和空间算法，即由最少数量的“<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container>-近似段”组成的模型。我们还观察到，最优 PLA 模型返回的“<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container>-近似位置”可以通过 A 中 ±<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container> keys 范围内的二分搜索转换为精确位置，从而在参数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container> 中取对数时间，与 n 无关。</p><p>PGM 索引的第二个要素是适应输入键分布的递归索引结构（参见图 2 的图示示例）。更准确地说，为了充分利用单个段在恒定空间和时间内对任意长范围的键进行索引的能力，我们将在数组 A 上构建的最佳 PLA 模型转变为键的子集，并且我们通过在此子集上构建另一个最佳 PLA 模型来递归地进行。这一过程持续进行，直到获得一个单独的段，该段形成 PGM 索引的根。</p><p>总体而言，每个 PLA 模型形成 PGM 索引的一个级别，并且该 PLA 模型的每个段形成该级别的数据结构的一个节点。</p><p>这种递归构造相对于已知的学习索引（参见 FITing-tree 或 RMI）的特点是，PGM 索引是一个纯粹的学习索引，其结构不依赖于经典数据结构（如 FITing-tree 中所示）或作为 ML 模型错误太多时的后备（如 RMI）。最终结果是影响其时空复杂性的三个主要优势。</p><p>首先，PGM索引使用线性模型（即段）作为数据结构各级的恒定空间路由表，而其他索引（例如FITing 树、B 树和变体）使用消耗空间的节点来存储大量仅取决于磁盘页面大小的键，从而导致对数据分布中可能存在的规律性视而不见。</p><p>其次，PGM 索引的这些路由表需要恒定的时间来将节点中键的搜索限制为较小的键子集（大小为 2<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container> ），而 B + 树和 FITing 树中的节点会产生搜索成本随着节点大小而增长，从而减慢查询操作期间树的遍历速度。</p><p>第三，在本文中，我们观察到计算最小段数是一个众所周知的计算几何问题，在时间和空间内，它允许线性最优解，从而超越了 FITing-tree 和 RMI 的次优建议。</p><p>接下来的两小节详细介绍了 PGM 索引的构造和查询操作，而第 3 节讨论了插入和删除。</p><hr><h4 id="最优-PLA-模型"><a href="#最优-PLA-模型" class="headerlink" title="最优 PLA 模型"></a>最优 PLA 模型</h4><p>在本节中，我们将描述如何通过最佳数量的段有效计算并简洁地存储从键到 A 中位置的映射 rank 的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container>-近似 实现，这是 PGM 索引的核心设计元素之一。</p><p>段 s 是一个三元组（键；斜率；截距），通过函数 f~s~(k) = k × slope+intercept 对 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.063ex;" xmlns="http://www.w3.org/2000/svg" width="1.554ex" height="1.609ex" role="img" focusable="false" viewbox="0 -683 687 711"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="55" d="M8 592Q8 616 70 649T193 683Q246 683 246 631Q246 587 205 492T124 297T83 143Q83 101 100 75T154 48Q202 48 287 135T450 342T560 553Q589 635 593 640Q603 656 626 668T669 683H670Q687 683 687 672T670 616T617 463T547 220Q525 137 521 68Q521 54 522 50T533 42L543 47Q573 61 588 61Q604 61 604 47Q599 16 506 -22Q486 -28 468 -28T436 -18T421 18Q421 92 468 258Q468 259 467 257T459 248Q426 206 391 167T303 81T194 6T83 -22Q66 -22 58 -20Q25 -11 4 19T-17 99Q-17 146 8 220T64 358T120 488T146 586Q146 604 141 608T123 613H120Q99 613 72 597T25 580Q8 580 8 592Z"/></g></g></g></g></svg></mjx-container> 的范围进行索引，如图 1 所示。PGM 索引的一个重要特征是其分段的精度 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container>。</p><p>定义 1：令 A 为从 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.063ex;" xmlns="http://www.w3.org/2000/svg" width="1.554ex" height="1.609ex" role="img" focusable="false" viewbox="0 -683 687 711"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="55" d="M8 592Q8 616 70 649T193 683Q246 683 246 631Q246 587 205 492T124 297T83 143Q83 101 100 75T154 48Q202 48 287 135T450 342T560 553Q589 635 593 640Q603 656 626 668T669 683H670Q687 683 687 672T670 616T617 463T547 220Q525 137 521 68Q521 54 522 50T533 42L543 47Q573 61 588 61Q604 61 604 47Q599 16 506 -22Q486 -28 468 -28T436 -18T421 18Q421 92 468 258Q468 259 467 257T459 248Q426 206 391 167T303 81T194 6T83 -22Q66 -22 58 -20Q25 -11 4 19T-17 99Q-17 146 8 220T64 358T120 488T146 586Q146 604 141 608T123 613H120Q99 613 72 597T25 580Q8 580 8 592Z"/></g></g></g></g></svg></mjx-container> 中抽取的 n 个键的排序数组，并令“<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="5.203ex" height="1.819ex" role="img" focusable="false" viewbox="0 -666 2299.6 804"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g><g data-mml-node="mo" transform="translate(743.8,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="mn" transform="translate(1799.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>”为整数。段 s = (key; 斜率; 截距) 提供了范围在 [k~i~，k~i+r~] 内的所有键的 “<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container>-近似索引”，即对于一些 k~i~，k~i+r~ <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container> A，条件是如果 $|f<em>s(x)-rank(x)|\leq\varepsilon\text{ for all }x\in\mathcal{U}<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="4.525ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 2000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">使</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">得</text></g></g></g></svg></mjx-container>k</em>{i}\leq x\leq k_{i+r}$ 。</p><p>我们注意到，段提供的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container>-近似索引不仅适用于 A 中的键，还适用于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.063ex;" xmlns="http://www.w3.org/2000/svg" width="1.554ex" height="1.609ex" role="img" focusable="false" viewbox="0 -683 687 711"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="55" d="M8 592Q8 616 70 649T193 683Q246 683 246 631Q246 587 205 492T124 297T83 143Q83 101 100 75T154 48Q202 48 287 135T450 342T560 553Q589 635 593 640Q603 656 626 668T669 683H670Q687 683 687 672T670 616T617 463T547 220Q525 137 521 68Q521 54 522 50T533 42L543 47Q573 61 588 61Q604 61 604 47Q599 16 506 -22Q486 -28 468 -28T436 -18T421 18Q421 92 468 258Q468 259 467 257T459 248Q426 206 391 167T303 81T194 6T83 -22Q66 -22 58 -20Q25 -11 4 19T-17 99Q-17 146 8 220T64 358T120 488T146 586Q146 604 141 608T123 613H120Q99 613 72 597T25 580Q8 580 8 592Z"/></g></g></g></g></svg></mjx-container> 的所有键。因此，段可以看作是其覆盖的键范围的近似前驱搜索数据结构，提供 O(1) 查询时间和 O(1) 占用空间。</p><p>然而，一个片段可能不足以 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container>-近似 覆盖 A 中的整个keys 的 rank 函数；因此，我们研究一系列片段的计算，也称为 PLA 模型。</p><p>定义 2：给定 “<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="5.203ex" height="1.819ex" role="img" focusable="false" viewbox="0 -666 2299.6 804"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g><g data-mml-node="mo" transform="translate(743.8,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="mn" transform="translate(1799.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>”，分段线性  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container>-近似 问题包括计算 PLA 模型以使其段数 ${s<em>{0},\ldots,s</em>{m-1}}<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.462ex;" xmlns="http://www.w3.org/2000/svg" width="51.077ex" height="2.158ex" role="img" focusable="false" viewbox="0 -750 22576 954"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">最</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">小</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">化</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">确</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">保</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">每</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">个</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">段</text></g><g data-mml-node="mi" transform="translate(9000,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mtext" transform="translate(9469,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(9719,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g><g data-mml-node="mtext" transform="translate(10131,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(10381,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">对</text></g><g data-mml-node="mi" transform="translate(11381,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">于</text></g><g data-mml-node="mi" transform="translate(12381,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mi" transform="translate(13026,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">中</text></g><g data-mml-node="mi" transform="translate(14026,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">其</text></g><g data-mml-node="mi" transform="translate(15026,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">覆</text></g><g data-mml-node="mi" transform="translate(16026,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">盖</text></g><g data-mml-node="mi" transform="translate(17026,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(18026,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">键</text></g><g data-mml-node="mi" transform="translate(19026,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">范</text></g><g data-mml-node="mi" transform="translate(20026,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">围</text></g><g data-mml-node="mi" transform="translate(21026,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">是</text></g><g data-mml-node="mo" transform="translate(22026,0)"><g data-c="2036"><path data-c="2035" d="M12 501Q12 527 31 542T63 558Q73 560 77 560Q114 560 128 528Q133 518 188 293T244 61Q244 56 223 50T195 43Q192 43 190 45T102 263T14 486Q12 496 12 501Z"/><path data-c="2035" d="M12 501Q12 527 31 542T63 558Q73 560 77 560Q114 560 128 528Q133 518 188 293T244 61Q244 56 223 50T195 43Q192 43 190 45T102 263T14 486Q12 496 12 501Z" transform="translate(275,0)"/></g></g></g></g></svg></mjx-container>\varepsilon<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="50.516ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 22328 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">近</text></g><g data-mml-node="mi" transform="translate(1778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">似</text></g><g data-mml-node="mo" transform="translate(2778,0)"><g data-c="2033"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"/><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z" transform="translate(275,0)"/></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3328,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">。</text></g></g><g data-mml-node="mi" transform="translate(4328,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">这</text></g><g data-mml-node="mi" transform="translate(5328,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">些</text></g><g data-mml-node="mi" transform="translate(6328,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">范</text></g><g data-mml-node="mi" transform="translate(7328,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">围</text></g><g data-mml-node="mi" transform="translate(8328,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">是</text></g><g data-mml-node="mi" transform="translate(9328,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">不</text></g><g data-mml-node="mi" transform="translate(10328,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">相</text></g><g data-mml-node="mi" transform="translate(11328,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">交</text></g><g data-mml-node="mi" transform="translate(12328,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(13328,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(14328,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">并</text></g><g data-mml-node="mi" transform="translate(15328,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">且</text></g><g data-mml-node="mi" transform="translate(16328,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">一</text></g><g data-mml-node="mi" transform="translate(17328,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">起</text></g><g data-mml-node="mi" transform="translate(18328,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">覆</text></g><g data-mml-node="mi" transform="translate(19328,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">盖</text></g><g data-mml-node="mi" transform="translate(20328,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">整</text></g><g data-mml-node="mi" transform="translate(21328,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">个</text></g></g></g></svg></mjx-container>\mathcal{U}$。</p><p>为数组 A 找到最佳 PLA 模型的一种方法是通过动态规划，但所需的 O(n^3^ ) 时间令人望而却步。 FITing-tree [17] 的作者通过一种称为收缩锥体的启发式方法解决了这个问题，它在时间上是线性的，但不能保证找到最佳的 PLA 模型，而且实际上它在实践中表现很差（如我们在 7.1 节中所示）。</p><p>有趣的是，我们发现这个问题已经被广泛研究用于时间序列的有损压缩和相似性搜索（参见例如[28,9,11,12,39]和其中的参考文献），并且它允许采用 O(n）最佳时间和空间。这一系列方法的关键思想是将分段线性“<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container>-近似”问题简化为构造一组点的凸包，在我们的例子中是增长的集合 {(k~i~，rank(k~i~))} ，i = 0，…，n−1 ；只要凸包可以包含在高度不超过 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.186ex" height="1.557ex" role="img" focusable="false" viewbox="0 -666 966 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container> 的（可能旋转的）矩形中，索引 i 就会递增并且集合会扩展。一旦包围凸包的矩形高于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.186ex" height="1.557ex" role="img" focusable="false" viewbox="0 -666 966 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container> ，<strong>我们就停止构造并通过将该矩形分成两个相等大小的半部分的线来确定 PLA 模型的一段</strong>。【可以理解为从左下到右上的扩展，当矩形高度大于阈值时，保留下面的，继续以下一个点扩展】然后，当前处理的一组元素被清空，算法从其余输入点重新开始，这种贪心方法可以被证明在 PLA 模型的大小方面是最优的，并且具有线性时间和空间复杂度。我们可以在我们的上下文中重新表述这个结果，如下所示。</p><p>引理 1（选项 PLA 模型 [28]）：给定一个 x 坐标不减的点序列 ${(x<em>i,y_i)}</em>{i=0,\ldots,n-1}<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="56.561ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 25000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">。</text></g></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">存</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">在</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">一</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">种</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">流</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">式</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">算</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">法</text></g><g data-mml-node="mi" transform="translate(9000,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(10000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">该</text></g><g data-mml-node="mi" transform="translate(11000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">算</text></g><g data-mml-node="mi" transform="translate(12000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">法</text></g><g data-mml-node="mi" transform="translate(13000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">在</text></g><g data-mml-node="mi" transform="translate(14000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">线</text></g><g data-mml-node="mi" transform="translate(15000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">性</text></g><g data-mml-node="mi" transform="translate(16000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(17000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g><g data-mml-node="mi" transform="translate(18000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">和</text></g><g data-mml-node="mi" transform="translate(19000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">空</text></g><g data-mml-node="mi" transform="translate(20000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g><g data-mml-node="mi" transform="translate(21000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">内</text></g><g data-mml-node="mi" transform="translate(22000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">计</text></g><g data-mml-node="mi" transform="translate(23000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">算</text></g><g data-mml-node="mi" transform="translate(24000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">出</text></g></g></g></svg></mjx-container>\varepsilon$-近似于该序列中每个点的 y 坐标的最小分段数。</p><p>对于我们在字典问题中的应用，引理 1 的 x~i~ 对应于输入键 k~i~，y~i~ 对应于它们位于已排序的输入数组 A 中的位置0,…,n−1 。下一步是证明最优 PLA 模型的一段所覆盖的键数量的简单但非常有用的限制，我们在 PGM 索引的分析中部署了该限制。</p><p>引理 2：给定键 $k<em>i\in\mathcal{U}<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="40.724ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 18000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">有</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">序</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">序</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">列</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">和</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">笛</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">卡</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">尔</text></g><g data-mml-node="mi" transform="translate(9000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">平</text></g><g data-mml-node="mi" transform="translate(10000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">面</text></g><g data-mml-node="mi" transform="translate(11000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">中</text></g><g data-mml-node="mi" transform="translate(12000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">相</text></g><g data-mml-node="mi" transform="translate(13000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">应</text></g><g data-mml-node="mi" transform="translate(14000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(15000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">点</text></g><g data-mml-node="mi" transform="translate(16000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">序</text></g><g data-mml-node="mi" transform="translate(17000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">列</text></g></g></g></svg></mjx-container>{(k</em>{i},i)}<em>{i=0,\ldots,n-1}<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="58.824ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 26000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">这</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">些</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">点</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">坐</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">标</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">均</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">不</text></g><g data-mml-node="mi" transform="translate(9000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">递</text></g><g data-mml-node="mi" transform="translate(10000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">减</text></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(11000,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">。</text></g></g><g data-mml-node="mi" transform="translate(12000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">引</text></g><g data-mml-node="mi" transform="translate(13000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">理</text></g><g data-mml-node="mn" transform="translate(14000,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mi" transform="translate(14500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(15500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">算</text></g><g data-mml-node="mi" transform="translate(16500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">法</text></g><g data-mml-node="mi" transform="translate(17500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">确</text></g><g data-mml-node="mi" transform="translate(18500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">定</text></g><g data-mml-node="mi" transform="translate(19500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">每</text></g><g data-mml-node="mi" transform="translate(20500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">个</text></g><g data-mml-node="mi" transform="translate(21500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">覆</text></g><g data-mml-node="mi" transform="translate(22500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">盖</text></g><g data-mml-node="mi" transform="translate(23500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">至</text></g><g data-mml-node="mi" transform="translate(24500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">少</text></g><g data-mml-node="mn" transform="translate(25500,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g></svg></mjx-container>\varepsilon<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="35.581ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 15727 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">点</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">段</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">（</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">最</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">小</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">）</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(9000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">量</text></g><g data-mml-node="mi" transform="translate(10000,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mtext" transform="translate(10878,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(11128,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(11613,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mi" transform="translate(12116,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mtext" transform="translate(12477,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(12727,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(13727,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">使</text></g><g data-mml-node="mi" transform="translate(14727,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">得</text></g></g></g></svg></mjx-container>m</em>{opt}\leq n/(2\varepsilon)$。【为了简化表示法，我们用 m 代替 m~opt~】</p><p>证明。对于任何  2<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container> 连续键 k~i~，k~i+1~，…… ，$k<em>{i+2\varepsilon-1}<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="24.766ex" height="2.161ex" role="img" focusable="false" viewbox="0 -750 10946.6 955"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">块</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">取</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">水</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">平</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">线</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">段</text></g><g data-mml-node="mi" transform="translate(8000,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(8767.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(9823.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(10168.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g></g></g></svg></mjx-container>\varepsilon<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="27.149ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 12000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">。</text></g></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">很</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">容</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">易</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">看</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">出</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">这</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">些</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">键</text></g><g data-mml-node="mi" transform="translate(9000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">生</text></g><g data-mml-node="mi" transform="translate(10000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">成</text></g><g data-mml-node="mi" transform="translate(11000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">点</text></g></g></g></svg></mjx-container>(k_i,i),(k</em>{i+1},i+<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="0.036ex" height="0.036ex" role="img" focusable="false" viewbox="0 0 16 16"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"/></g></svg></mjx-container>1),\ldots,(k_{i+2\varepsilon-1},i+2\varepsilon-1)<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="42.986ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 19000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">并</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">且</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">这</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">些</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">键</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">中</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">每</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">一</text></g><g data-mml-node="mi" transform="translate(9000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">个</text></g><g data-mml-node="mi" transform="translate(10000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">与</text></g><g data-mml-node="mi" transform="translate(11000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">该</text></g><g data-mml-node="mi" transform="translate(12000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">行</text></g><g data-mml-node="mi" transform="translate(13000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(14000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">距</text></g><g data-mml-node="mi" transform="translate(15000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">离</text></g><g data-mml-node="mi" transform="translate(16000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">最</text></g><g data-mml-node="mi" transform="translate(17000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">多</text></g><g data-mml-node="mi" transform="translate(18000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">为</text></g></g></g></svg></mjx-container>\varepsilon<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="30.543ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 13500 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">那</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">么</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">这</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">是</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">一</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">个</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">对</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">于</text></g><g data-mml-node="mi" transform="translate(9000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">该</text></g><g data-mml-node="mi" transform="translate(10000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">范</text></g><g data-mml-node="mi" transform="translate(11000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">围</text></g><g data-mml-node="mi" transform="translate(12000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mn" transform="translate(13000,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g></svg></mjx-container>\varepsilon<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="4.525ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 2000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">键</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g></g></g></svg></mjx-container>\varepsilon<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="55.339ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 24460 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">近</text></g><g data-mml-node="mi" transform="translate(1778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">似</text></g><g data-mml-node="mi" transform="translate(2778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">段</text></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3778,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">。</text></g></g><g data-mml-node="mi" transform="translate(4778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">因</text></g><g data-mml-node="mi" transform="translate(5778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">此</text></g><g data-mml-node="mi" transform="translate(6778,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(7778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">最</text></g><g data-mml-node="mi" transform="translate(8778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">佳</text></g><g data-mml-node="mi" transform="translate(9778,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g><g data-mml-node="mi" transform="translate(10529,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mi" transform="translate(11210,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mi" transform="translate(11960,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">模</text></g><g data-mml-node="mi" transform="translate(12960,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">型</text></g><g data-mml-node="mi" transform="translate(13960,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(14960,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">任</text></g><g data-mml-node="mi" transform="translate(15960,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">何</text></g><g data-mml-node="mi" transform="translate(16960,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">部</text></g><g data-mml-node="mi" transform="translate(17960,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">分</text></g><g data-mml-node="mi" transform="translate(18960,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">都</text></g><g data-mml-node="mi" transform="translate(19960,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">至</text></g><g data-mml-node="mi" transform="translate(20960,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">少</text></g><g data-mml-node="mi" transform="translate(21960,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">覆</text></g><g data-mml-node="mi" transform="translate(22960,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">盖</text></g><g data-mml-node="mn" transform="translate(23960,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g></svg></mjx-container>\varepsilon$的键。【初步来看，这方法仅适用于时序数据库】</p><hr><h4 id="索引-PLA-模型"><a href="#索引-PLA-模型" class="headerlink" title="索引 PLA 模型"></a>索引 PLA 模型</h4><p>引理 1 的算法将输入数组 A 的最优 PLA 模型返回为序列 $M=[s<em>{0},\ldots,s</em>{m-1}] <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="111.778ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 49406 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(1000,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">个</text></g><g data-mml-node="mi" transform="translate(2878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">段</text></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3878,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">。</text></g></g><g data-mml-node="mi" transform="translate(4878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">现</text></g><g data-mml-node="mi" transform="translate(5878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">在</text></g><g data-mml-node="mi" transform="translate(6878,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(7878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">为</text></g><g data-mml-node="mi" transform="translate(8878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">了</text></g><g data-mml-node="mi" transform="translate(9878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">解</text></g><g data-mml-node="mi" transform="translate(10878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">决</text></g><g data-mml-node="mi" transform="translate(11878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">完</text></g><g data-mml-node="mi" transform="translate(12878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">全</text></g><g data-mml-node="mi" transform="translate(13878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">可</text></g><g data-mml-node="mi" transform="translate(14878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">索</text></g><g data-mml-node="mi" transform="translate(15878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">引</text></g><g data-mml-node="mi" transform="translate(16878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(17878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">字</text></g><g data-mml-node="mi" transform="translate(18878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">典</text></g><g data-mml-node="mi" transform="translate(19878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">问</text></g><g data-mml-node="mi" transform="translate(20878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">题</text></g><g data-mml-node="mi" transform="translate(21878,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(22878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">我</text></g><g data-mml-node="mi" transform="translate(23878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">们</text></g><g data-mml-node="mi" transform="translate(24878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">需</text></g><g data-mml-node="mi" transform="translate(25878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">要</text></g><g data-mml-node="mi" transform="translate(26878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">一</text></g><g data-mml-node="mi" transform="translate(27878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">种</text></g><g data-mml-node="mi" transform="translate(28878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">方</text></g><g data-mml-node="mi" transform="translate(29878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">法</text></g><g data-mml-node="mi" transform="translate(30878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">来</text></g><g data-mml-node="mi" transform="translate(31878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">找</text></g><g data-mml-node="mi" transform="translate(32878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">到</text></g><g data-mml-node="mi" transform="translate(33878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">负</text></g><g data-mml-node="mi" transform="translate(34878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">责</text></g><g data-mml-node="mi" transform="translate(35878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">估</text></g><g data-mml-node="mi" transform="translate(36878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">计</text></g><g data-mml-node="mi" transform="translate(37878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">查</text></g><g data-mml-node="mi" transform="translate(38878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">询</text></g><g data-mml-node="mi" transform="translate(39878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">键</text></g><g data-mml-node="mi" transform="translate(40878,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mi" transform="translate(41399,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(42399,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">近</text></g><g data-mml-node="mi" transform="translate(43399,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">似</text></g><g data-mml-node="mi" transform="translate(44399,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">位</text></g><g data-mml-node="mi" transform="translate(45399,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">置</text></g><g data-mml-node="mi" transform="translate(46399,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mi" transform="translate(46902,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(47387,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mi" transform="translate(47856,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mo" transform="translate(48856,0)"><g data-c="2036"><path data-c="2035" d="M12 501Q12 527 31 542T63 558Q73 560 77 560Q114 560 128 528Q133 518 188 293T244 61Q244 56 223 50T195 43Q192 43 190 45T102 263T14 486Q12 496 12 501Z"/><path data-c="2035" d="M12 501Q12 527 31 542T63 558Q73 560 77 560Q114 560 128 528Q133 518 188 293T244 61Q244 56 223 50T195 43Q192 43 190 45T102 263T14 486Q12 496 12 501Z" transform="translate(275,0)"/></g></g></g></g></svg></mjx-container>\varepsilon<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="240.334ex" height="2.161ex" role="img" focusable="false" viewbox="0 -750 106227.7 955"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">近</text></g><g data-mml-node="mi" transform="translate(1778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">似</text></g><g data-mml-node="mi" transform="translate(2778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">段</text></g><g data-mml-node="mi" transform="translate(3778,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mtext" transform="translate(4247,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(4497,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g><g data-mml-node="mtext" transform="translate(4909,0)"><path data-c="A0" d=""/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(5159,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">。</text></g></g><g data-mml-node="mi" transform="translate(6159,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">这</text></g><g data-mml-node="mi" transform="translate(7159,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">是</text></g><g data-mml-node="mi" transform="translate(8159,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">最</text></g><g data-mml-node="mi" transform="translate(9159,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">右</text></g><g data-mml-node="mi" transform="translate(10159,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">边</text></g><g data-mml-node="mi" transform="translate(11159,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(12159,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">段</text></g><g data-mml-node="mi" transform="translate(13159,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mtext" transform="translate(13628,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(13878,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g><g data-mml-node="mtext" transform="translate(14290,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(14540,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">使</text></g><g data-mml-node="mi" transform="translate(15540,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">得</text></g><g data-mml-node="mi" transform="translate(16540,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mtext" transform="translate(17009,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(17259,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g><g data-mml-node="mtext" transform="translate(17671,0)"><path data-c="A0" d=""/></g><g data-mml-node="mo" transform="translate(17921,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/></g><g data-mml-node="mi" transform="translate(18365.7,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mi" transform="translate(18886.7,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(19352.7,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(20120.4,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="mi" transform="translate(21176.2,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mi" transform="translate(21697.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">当</text></g><g data-mml-node="mi" transform="translate(22697.2,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(23575.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">很</text></g><g data-mml-node="mi" transform="translate(24575.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">大</text></g><g data-mml-node="mi" transform="translate(25575.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(26575.2,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(27575.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">我</text></g><g data-mml-node="mi" transform="translate(28575.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">们</text></g><g data-mml-node="mi" transform="translate(29575.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">可</text></g><g data-mml-node="mi" transform="translate(30575.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">以</text></g><g data-mml-node="mi" transform="translate(31575.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">对</text></g><g data-mml-node="mi" transform="translate(32575.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">序</text></g><g data-mml-node="mi" transform="translate(33575.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">列</text></g><g data-mml-node="mi" transform="translate(34575.2,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"/></g><g data-mml-node="mi" transform="translate(35626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">执</text></g><g data-mml-node="mi" transform="translate(36626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">行</text></g><g data-mml-node="mi" transform="translate(37626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">二</text></g><g data-mml-node="mi" transform="translate(38626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">分</text></g><g data-mml-node="mi" transform="translate(39626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">搜</text></g><g data-mml-node="mi" transform="translate(40626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">索</text></g><g data-mml-node="mi" transform="translate(41626.2,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(42626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">或</text></g><g data-mml-node="mi" transform="translate(43626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">者</text></g><g data-mml-node="mi" transform="translate(44626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">我</text></g><g data-mml-node="mi" transform="translate(45626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">们</text></g><g data-mml-node="mi" transform="translate(46626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">可</text></g><g data-mml-node="mi" transform="translate(47626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">以</text></g><g data-mml-node="mi" transform="translate(48626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">通</text></g><g data-mml-node="mi" transform="translate(49626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">过</text></g><g data-mml-node="mi" transform="translate(50626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">适</text></g><g data-mml-node="mi" transform="translate(51626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">当</text></g><g data-mml-node="mi" transform="translate(52626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(53626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(54626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">据</text></g><g data-mml-node="mi" transform="translate(55626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">结</text></g><g data-mml-node="mi" transform="translate(56626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">构</text></g><g data-mml-node="mi" transform="translate(57626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">对</text></g><g data-mml-node="mi" transform="translate(58626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">其</text></g><g data-mml-node="mi" transform="translate(59626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">进</text></g><g data-mml-node="mi" transform="translate(60626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">行</text></g><g data-mml-node="mi" transform="translate(61626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">索</text></g><g data-mml-node="mi" transform="translate(62626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">引</text></g><g data-mml-node="mi" transform="translate(63626.2,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(64626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">例</text></g><g data-mml-node="mi" transform="translate(65626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">如</text></g><g data-mml-node="mi" transform="translate(66626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">多</text></g><g data-mml-node="mi" transform="translate(67626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">路</text></g><g data-mml-node="mi" transform="translate(68626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">搜</text></g><g data-mml-node="mi" transform="translate(69626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">索</text></g><g data-mml-node="mi" transform="translate(70626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">树</text></g><g data-mml-node="mi" transform="translate(71626.2,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">（</text></g><g data-mml-node="mi" transform="translate(72626.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">如</text></g><g data-mml-node="mi" transform="translate(73626.2,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"/></g><g data-mml-node="mi" transform="translate(74375.2,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g><g data-mml-node="mi" transform="translate(74879.2,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mi" transform="translate(75583.2,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(75928.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(76528.2,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mo" transform="translate(77227.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(78227.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">中</text></g><g data-mml-node="mi" transform="translate(79227.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">所</text></g><g data-mml-node="mi" transform="translate(80227.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">做</text></g><g data-mml-node="mi" transform="translate(81227.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(82227.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">那</text></g><g data-mml-node="mi" transform="translate(83227.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">样</text></g><g data-mml-node="mi" transform="translate(84227.7,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">）</text></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(85227.7,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">。</text></g></g><g data-mml-node="mi" transform="translate(86227.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">在</text></g><g data-mml-node="mi" transform="translate(87227.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">后</text></g><g data-mml-node="mi" transform="translate(88227.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">一</text></g><g data-mml-node="mi" transform="translate(89227.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">种</text></g><g data-mml-node="mi" transform="translate(90227.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">情</text></g><g data-mml-node="mi" transform="translate(91227.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">况</text></g><g data-mml-node="mi" transform="translate(92227.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">下</text></g><g data-mml-node="mi" transform="translate(93227.7,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(94227.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">对</text></g><g data-mml-node="mi" transform="translate(95227.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">此</text></g><g data-mml-node="mi" transform="translate(96227.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(97227.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">据</text></g><g data-mml-node="mi" transform="translate(98227.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">结</text></g><g data-mml-node="mi" transform="translate(99227.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">构</text></g><g data-mml-node="mi" transform="translate(100227.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(101227.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">查</text></g><g data-mml-node="mi" transform="translate(102227.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">询</text></g><g data-mml-node="mi" transform="translate(103227.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">将</text></g><g data-mml-node="mi" transform="translate(104227.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">需</text></g><g data-mml-node="mi" transform="translate(105227.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">要</text></g></g></g></svg></mjx-container>O(\log_Bm+\log(\varepsilon/B))<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="31.663ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 13995 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(504,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mi" transform="translate(1004,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mi" transform="translate(1767,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mi" transform="translate(2236,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(3236,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">其</text></g><g data-mml-node="mi" transform="translate(4236,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">中</text></g><g data-mml-node="mi" transform="translate(5236,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"/></g><g data-mml-node="mi" transform="translate(5995,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">是</text></g><g data-mml-node="mi" transform="translate(6995,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">多</text></g><g data-mml-node="mi" transform="translate(7995,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">路</text></g><g data-mml-node="mi" transform="translate(8995,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">树</text></g><g data-mml-node="mi" transform="translate(9995,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(10995,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">扇</text></g><g data-mml-node="mi" transform="translate(11995,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">出</text></g><g data-mml-node="mi" transform="translate(12995,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g></g></g></svg></mjx-container>\varepsilon$ 是分段在逼近 rank(k) 时产生的误差。</p><p>然而，上面的索引策略并没有充分利用密钥分布，因为它采用了具有固定扇出的经典数据结构来索引 M。因此，我们引入了一种新颖的策略，该策略包括再从段序列派生的一组密钥。更准确地说，我们从在整个输入数组 A 上构建的序列 M 开始，然后提取每个段覆盖的 A 的第一个键，最后在这组缩减的键上构建另一个最佳 PLA 模型。我们以这种递归方式进行，直到 PLA 模型由一个段组成，如图 2 的伪代码所示。</p><img src="/posts/d9da/image02.png" class title="框架示意图"><p>如果我们将段映射到节点，那么这种方法会构造一种多路搜索树，但相对于 B 树（相对于 FITing 树）具有三个主要优点：</p><p>i）其节点具有可变扇出由与这些节点关联的段所覆盖的（通常大量）键驱动；</p><p>ii) 节点中的段对于要支持的各种查询起到恒定空间和恒定时间“近似路由表”的作用；</p><p>iii) 每个节点中的搜索通过该路由表更正“<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container>-近似位置”二分搜索（见下文），因此它的时间成本以对数方式取决于“<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container>”，与相应段覆盖的键的数量无关。</p><p>现在，对此递归 PGM 索引的查询操作的工作原理如下。在每个级别，它使用引用访问节点的段来估计搜索到的键 k 在较低级别的键中的位置【为了正确估计位于段 s~j~ 覆盖的最后一个键和 s~j+1~ 覆盖的第一个键之间的键 k 的位置，我们计算：$\min{f<em>{s</em>{j}}(k),f<em>{s</em>{j+1}}(s_{j+1}.key)}<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="16.968ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 7500 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">】</text></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1000,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">。</text></g></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">然</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">后</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">通</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">过</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">以</text></g><g data-mml-node="mn" transform="translate(7000,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g></svg></mjx-container>\varepsilon$ 为中心的大小范围内的二分搜索找到真实位置。假设下一个级别上的每个键都是该级别上的段覆盖的第一个键，我们已经确定了要查询的下一个段，并且该过程将继续，直到到达最后一个级别。查询操作如图2所示。</p><p>定理1：设 A为来自全集U 的 n 个关键字的有序数组，且 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container> ≥ 1为一个固定的整数参数。参数为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container> 的 PGM索引以 Θ(m) 空间对数组A 进行索引，并在O(log m + log <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container>)时间内以及O((log~c~ m) log(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container>/B)) 的 I/O 操作中回答 rank、member 和前驱查询，其中 m是 覆盖A 的最小”<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container>-近似段，c ≥ 2<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container> 表示数据结构的可变分支数，B是外部存储模型的块大小。范围查询在额外的（最优的）O(K) 时间和 O(K/B)  I/Os 操作中得到回答，其中 K是满足范围查询的关键字数量。</p><p>证明：递归的每个步骤都会通过可变因子 c 减少段数，由于引理 2，该因子 c 至少为 2<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container>。因此，级别数为 L = O(log~c~m)，并且索引所需的总空间 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.777ex;" xmlns="http://www.w3.org/2000/svg" width="15.973ex" height="2.949ex" role="img" focusable="false" viewbox="0 -960 7059.9 1303.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"/></g><g data-mml-node="mi" transform="translate(1089,477.1) scale(0.707)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="2113" d="M345 104T349 104T361 95T369 80T352 59Q268 -20 206 -20Q170 -20 146 3T113 53T99 104L94 129Q94 130 79 116T48 86T28 70Q22 70 15 79T7 94Q7 98 12 103T58 147L91 179V185Q91 186 91 191T92 200Q92 282 128 400T223 612T336 705Q397 705 397 636V627Q397 453 194 233Q185 223 180 218T174 211T171 208T165 201L163 186Q159 142 159 123Q159 17 208 17Q228 17 253 30T293 56T335 94Q345 104 349 104ZM360 634Q360 655 354 661T336 668Q328 668 322 666T302 645T272 592Q252 547 229 467T192 330L179 273Q179 272 186 280T204 300T221 322Q327 453 355 590Q360 612 360 634Z"/></g><g data-mml-node="mo" transform="translate(417,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1195,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g><g data-mml-node="mi" transform="translate(2504.2,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3382.2,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mo" transform="translate(3882.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(4271.2,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(4771.2,0)"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g><g data-mml-node="msup" transform="translate(5237.2,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mi" transform="translate(422,363) scale(0.707)"><path data-c="2113" d="M345 104T349 104T361 95T369 80T352 59Q268 -20 206 -20Q170 -20 146 3T113 53T99 104L94 129Q94 130 79 116T48 86T28 70Q22 70 15 79T7 94Q7 98 12 103T58 147L91 179V185Q91 186 91 191T92 200Q92 282 128 400T223 612T336 705Q397 705 397 636V627Q397 453 194 233Q185 223 180 218T174 211T171 208T165 201L163 186Q159 142 159 123Q159 17 208 17Q228 17 253 30T293 56T335 94Q345 104 349 104ZM360 634Q360 655 354 661T336 668Q328 668 322 666T302 645T272 592Q252 547 229 467T192 330L179 273Q179 272 186 280T204 300T221 322Q327 453 355 590Q360 612 360 634Z"/></g></g><g data-mml-node="mo" transform="translate(6281.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g></g></g></svg></mjx-container> <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.507ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2434 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="398" d="M56 340Q56 423 86 494T164 610T270 680T388 705Q521 705 621 601T722 341Q722 260 693 191T617 75T510 4T388 -22T267 3T160 74T85 189T56 340ZM610 339Q610 428 590 495T535 598T463 651T384 668Q332 668 289 638T221 566Q168 485 168 339Q168 274 176 235Q189 158 228 105T324 28Q356 16 388 16Q415 16 442 24T501 54T555 111T594 205T610 339ZM223 263V422H263V388H514V422H554V263H514V297H263V263H223Z"/></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1167,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2045,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>。对于 rank、membership 和 predecessor 查询，通过观察查询在大小最多为 2<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container> 的间隔上执行 L 个二分搜索，可以轻松地确定运行时间和 I/O 复杂性的界限。在范围查询的情况下，我们输出通过从 rank 查询返回的位置开始扫描 A 来获取 K 个键。</p><p>PGM 索引的主要新颖之处在于，它的空间开销并不像第 1 节中提到的传统索引那样随 n 线性增长，而是取决于输入数组 A 的“规律性趋势”。如引理 2 中所述，PGM索引最后一级的 段数m 小于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.434ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2844 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(600,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mo" transform="translate(1100,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(1489,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(1989,0)"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g><g data-mml-node="mo" transform="translate(2455,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>。由于这一事实也适用于递归级别，因此 PGM 索引在空间和时间上不会渐近地比 2<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container>-路树更差，例如 FITing 树、B + 树或 CSS 树（只是取定理 1 中的 c = 2<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewbox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container> = <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.238ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2315 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="398" d="M56 340Q56 423 86 494T164 610T270 680T388 705Q521 705 621 601T722 341Q722 260 693 191T617 75T510 4T388 -22T267 3T160 74T85 189T56 340ZM610 339Q610 428 590 495T535 598T463 651T384 668Q332 668 289 638T221 566Q168 485 168 339Q168 274 176 235Q189 158 228 105T324 28Q356 16 388 16Q415 16 442 24T501 54T555 111T594 205T610 339ZM223 263V422H263V388H514V422H554V263H514V297H263V263H223Z"/></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1167,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"/></g><g data-mml-node="mo" transform="translate(1926,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>）。因此，根据[32]证明的下界，我们可以说PGM索引通过前驱搜索最优地解决了I/O完全可索引字典问题，这意味着它可以取代任何现有索引而几乎不会降低性能。</p><p>表 1 总结了 PGM 索引及其竞争对手在随机存取机 (RAM) 和逐点查询的外部存储器 (EM) 模型中的这些界限。第 7 节的实验结果进一步支持了这些理论成果，表明 PGM 索引比 FITing 树、B + 树和 CSS 树更快、更简洁，因为在实践中，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.65ex;" xmlns="http://www.w3.org/2000/svg" width="9.209ex" height="1.935ex" role="img" focusable="false" viewbox="0 -568 4070.4 855.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" transform="translate(911,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mi" transform="translate(988,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g></g></g><g data-mml-node="mo" transform="translate(2192.7,0)"><path data-c="226A" d="M639 -48Q639 -54 634 -60T619 -67H618Q612 -67 536 -26Q430 33 329 88Q61 235 59 239Q56 243 56 250T59 261Q62 266 336 415T615 567L619 568Q622 567 625 567Q639 562 639 548Q639 540 633 534Q632 532 374 391L117 250L374 109Q632 -32 633 -34Q639 -40 639 -48ZM944 -48Q944 -54 939 -60T924 -67H923Q917 -67 841 -26Q735 33 634 88Q366 235 364 239Q361 243 361 250T364 261Q367 266 641 415T920 567L924 568Q927 567 930 567Q944 562 944 548Q944 540 938 534Q937 532 679 391L422 250L679 109Q937 -32 938 -34Q944 -40 944 -48Z"/></g><g data-mml-node="mi" transform="translate(3470.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container> 和递归结构保证了 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.152ex;" xmlns="http://www.w3.org/2000/svg" width="6.685ex" height="1.658ex" role="img" focusable="false" viewbox="0 -666 2954.6 733"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mo" transform="translate(710.8,0)"><path data-c="226B" d="M55 539T55 547T60 561T74 567Q81 567 207 498Q297 449 365 412Q633 265 636 261Q639 255 639 250Q639 241 626 232Q614 224 365 88Q83 -65 79 -66Q76 -67 73 -67Q65 -67 60 -61T55 -47Q55 -39 61 -33Q62 -33 95 -15T193 39T320 109L321 110H322L323 111H324L325 112L326 113H327L329 114H330L331 115H332L333 116L334 117H335L336 118H337L338 119H339L340 120L341 121H342L343 122H344L345 123H346L347 124L348 125H349L351 126H352L353 127H354L355 128L356 129H357L358 130H359L360 131H361L362 132L363 133H364L365 134H366L367 135H368L369 136H370L371 137L372 138H373L374 139H375L376 140L378 141L576 251Q63 530 62 533Q55 539 55 547ZM360 539T360 547T365 561T379 567Q386 567 512 498Q602 449 670 412Q938 265 941 261Q944 255 944 250Q944 241 931 232Q919 224 670 88Q388 -65 384 -66Q381 -67 378 -67Q370 -67 365 -61T360 -47Q360 -39 366 -33Q367 -33 400 -15T498 39T625 109L626 110H627L628 111H629L630 112L631 113H632L634 114H635L636 115H637L638 116L639 117H640L641 118H642L643 119H644L645 120L646 121H647L648 122H649L650 123H651L652 124L653 125H654L656 126H657L658 127H659L660 128L661 129H662L663 130H664L665 131H666L667 132L668 133H669L670 134H671L672 135H673L674 136H675L676 137L677 138H678L679 139H680L681 140L683 141L881 251Q368 530 367 533Q360 539 360 547Z"/></g><g data-mml-node="mn" transform="translate(1988.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(2488.6,0)"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container>。</p><hr><h3 id="动态PGM指数"><a href="#动态PGM指数" class="headerlink" title="动态PGM指数"></a>动态PGM指数</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>04-学习型索引-Dabble</title>
      <link href="posts/c1e1.html"/>
      <url>posts/c1e1.html</url>
      
        <content type="html"><![CDATA[<h2 id="思想回顾"><a href="#思想回顾" class="headerlink" title="思想回顾"></a>思想回顾</h2><h3 id="模型的概述"><a href="#模型的概述" class="headerlink" title="模型的概述"></a>模型的概述</h3><p>前提假设：只读工作负载。即不支持插入、更新、删除工作负载。针对的也是一维有序数据集。</p><img src="/posts/c1e1/%E6%A8%A1%E5%9E%8B%E5%AF%B9%E6%AF%94%E5%9B%BE.png" class title="模型对比图"><p>B树 索引最终寻到磁盘的某个块，因为数据是以磁盘块为单位存储的。要找记录的最终位置，可能需要遍历磁盘页，如果块内存储有序，则使用偏移量即可定位到记录实际位置。</p><p>近似的，当把索引看成模型后，由于机器学习模型预测的往往不精确，因此需要在训练时记录模型的最大、最小误差，最终在误差范围内采用二分查找确定记录的准确位置。</p><hr><h3 id="层次结构模型-RMI"><a href="#层次结构模型-RMI" class="headerlink" title="层次结构模型-RMI"></a>层次结构模型-RMI</h3><p><strong>层次：下一层各模型带训练的数据集取决于对上一层模型的预测值的划分规则</strong>。</p><p><strong>相较于 B树 与 B+树 采用 if 语句 对数据集进行划分，RMI 模型采用 ML与区间划分方式均等划分数据集</strong>。</p><img src="/posts/c1e1/%E6%A8%A1%E5%9E%8B%E7%A4%BA%E4%BE%8B%E5%9B%BE.png" class title="模型示例图"><p>如：第1层给出一个0~N的预测，假设第2层有K个模型，则第1层预测在范围<code>(0,N/K)</code> 的记录将交给 第2层 的模型1 进一步预测，落在 <code>(N/K+1,2×N/K)</code> 的记录将 由第2层的模型2 进一步预测，以此类推。</p><p>类似B树，RMI 的每层模型将会进一步缩小搜索范围，<code>每一层被选择的模型接受相同键值的输入</code>，<code>并根据输出选择下一层的模型</code>，直到最后一层给出记录位置的最终预测（通常还会根据最大误差进行二分搜索来确定记录的精确位置）。</p><hr><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p><strong>前提假设：单维数据索引，即数据集为内存中的有序数组</strong>。</p><img src="/posts/c1e1/Dabble%E6%A8%A1%E5%9E%8B%E7%A4%BA%E6%84%8F%E5%9B%BE.png" class title="Dabble模型示意图"><p><strong>模型四部分</strong>：</p><p>1) 首先，利用聚类方法对数据集进行预处理，通过 K-Means 聚类，将数据集按照其分布规律划分为不相交的区域；<br>1) 初始化 K个 神经网络模型，分别对上一步得到的 K个数据区域进行训练，得到 K个学习索引模型；<br>1) 当数据查询时，通过模型选择器选出对应的模型，并预测出键对应的记录位置，并通过二分查找在误差范围内找到最终的位置；<br>1) 插入新的数据时，数据首先放入一个 B 树的缓存中，当缓存达到一定的阈值后，将缓存中的数据一次性归并到数据集中，并对相应的模型进行重新训练。</p><p><strong>具体的</strong>：对于每一个数据区域，分别利用神经网络对其进行训练，使网络能够对该数据区域的分布得到一个比较好的拟合【过拟合】；在神经网络训练阶段，重点关注访问频率高的热点数据，从而使神经网络对这些数据的预测精度更高。</p><p>针对数据插入问题，借鉴  LSM 树中的延迟更新机制，在内存中开辟一块缓存用来存放新插入的数据，当缓存溢出时，一次性将数据进行插入；针对索引更新问题，通过模型解耦的方式缓解索引更新带来的消耗。</p><p>当数据插入时，只需要重新训练有数据插入的那个数据区域对应的模型即可，不需要对整个 Dabble 模型重新训练，从而提高了模型的可扩展性。</p><hr><h4 id="数据空间划分"><a href="#数据空间划分" class="headerlink" title="数据空间划分"></a>数据空间划分</h4><p>目的：使用 ML 模型尽可能学习到数据分布特点，从而充分拟合数据使得查的既快又准，内存占用还少。</p><p>客观事实：现实世界中，数据分布较为复杂，很难用通用的模型较好地学习到数据分布特点。</p><img src="/posts/c1e1/%E6%95%B0%E6%8D%AE%E9%9B%86%E5%88%86%E5%B8%83%E5%9B%BE.png" class title="数据集分布图"><p>图 4(a)展示了一个日志记录数据集的键-值分布，其中，键(key)是每一条记录的生成时间，即时间戳<br>(timestamp)；值(value)代表了每一条记录的存储位置。通过图中可以看到：键的分布是有区域性的，反映在日志记<br>录数据集上可以理解为对数据集的访问具有时间属性，<strong>在不同时间段数据的访问频率是不一样的</strong>；其次，从宏观<br>角度看，图 4(a)中的数据分布是比较杂乱的，呈现出一种非线性特点。但是，把图4(a)中的某一局部信息放大来看， 可以发现局部区域数据呈现较好的线性分布，因此最直观的想法是利用简单函数对每一个区域分段学习拟合。但是，<strong>如果不对数据进行预处理</strong>，直接对整个数据集进行学习，训练出的模型预测精度往往比较低。</p><p>图 4(b)中展示了经过聚类算法处理后得到的数据划分：整个数据集按照分布特点划分成了K个区域{D~1~，D~2~，…，D~K~}，数据区域间不相交且大小有序，即 <strong>第 i+1 个数据区域中的数据比第 i 个数据区域中的数据都要大</strong>。</p><p>假设训练数据集是 {x^(1)^，x^(2)^，…，x^(n)^}，x^(i)^ 代表了第 i 个数据记录，c^(i)^代表了训练数据 i 与 K 个类中最近的那个类，质心 u~j~ 代表了每一个簇中样本的中心点。输入的应该是<code>&lt;key,position&gt;</code> 。</p><p>算法1：数据集聚类过程。</p><p>初始化：随机选取 K 个数据点作为聚类之心${u<em>{1},u</em>{2},\ldots,u_{K}}$。</p><p>输出：K 个数据区域。 </p><ol><li>重复以下过程，直至模型训练收敛 { </li><li>对于每一个数据 i，计算其属于的类 c^(i)^:</li><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="28.076ex" height="2.687ex" role="img" focusable="false" viewbox="0 -893.3 12409.4 1187.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="TeXAtom" transform="translate(466,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(734,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g><g data-mml-node="mo" transform="translate(1587.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(2643.6,0)"><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z"/><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(500,0)"/><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(892,0)"/></g><g data-mml-node="mo" transform="translate(4035.6,0)"><path data-c="2061" d=""/></g><g data-mml-node="munder" transform="translate(4202.3,0)"><g data-mml-node="mo"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(833,0)"/><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1111,0)"/></g><g data-mml-node="mi" transform="translate(1700,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g><g data-mml-node="mo" transform="translate(6521.4,0)"><path data-c="2225" d="M133 736Q138 750 153 750Q164 750 170 739Q172 735 172 250T170 -239Q164 -250 152 -250Q144 -250 138 -244L137 -243Q133 -241 133 -179T132 250Q132 731 133 736ZM329 739Q334 750 346 750Q353 750 361 744L362 743Q366 741 366 679T367 250T367 -178T362 -243L361 -244Q355 -250 347 -250Q335 -250 329 -239Q327 -235 327 250T329 739Z"/></g><g data-mml-node="msup" transform="translate(7299.2,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="TeXAtom" transform="translate(605,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(734,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g><g data-mml-node="mo" transform="translate(8970.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msub" transform="translate(9970.7,0)"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g><g data-mml-node="msup" transform="translate(11194.8,0)"><g data-mml-node="mo"><path data-c="2225" d="M133 736Q138 750 153 750Q164 750 170 739Q172 735 172 250T170 -239Q164 -250 152 -250Q144 -250 138 -244L137 -243Q133 -241 133 -179T132 250Q132 731 133 736ZM329 739Q334 750 346 750Q353 750 361 744L362 743Q366 741 366 679T367 250T367 -178T362 -243L361 -244Q355 -250 347 -250Q335 -250 329 -239Q327 -235 327 250T329 739Z"/></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(12131.4,0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"/></g></g></g></svg></mjx-container></li><li>对于每一个类 j，重新计算该类的质心：</li><li>$u<em>j=\frac{\sum</em>{i=1}^K1{c^{(i)}=j}x^{(i)}}{\sum<em>{i=1}^K1{c^{(i)}=j}};<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="7.041ex" height="1.505ex" role="img" focusable="false" viewbox="0 -583 3112 665"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><g data-mml-node="text"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="text" transform="translate(1556,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="text" transform="translate(2334,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"/></g></g></g></g></svg></mjx-container>u_j=\frac{\sum</em>{i=1}^n1{c^{(i)}=j}x^{(i)}}{\sum_{i=1}^n1{c^{(i)}=j}};$  </li></ol><p>}</p><p>存在的制约关系：K 值越大，会使神经网络模型对应的数据区域越小，数据分布越一致，模型拟合效果越好。但是 K 值过大会使模型的数目过多，从而使模型选择器在选择某个数据查询对应的模型时花费时间过多。</p><hr><h4 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h4><p>数据集应已被划分为：K个不相交的数据区域，每个数据区域内数据分布近似一致。</p><p>采用神经网络模型分别对各自的数据区域进行训练。</p><p>模型的输入：数据记录的 key；对应的训练标签：该 key 的 position。</p><img src="/posts/c1e1/Dabble%E6%A8%A1%E5%9E%8B%E8%AF%A6%E7%BB%86%E5%9B%BE.png" class title="Dabble模型详细图"><p>如图5 所示，模型的输入与输出均为一维的标量类型。其中，神经网络模型采用两层架构，即：在输入层与输出层中间只加入一层隐藏层的神经元，并且在隐藏层后面加一层 ReLU 激活函数用来做非线性变换。【由于数据的局部区域分布依然可能存在非线性的特征，因此需要引入激活函数来学习非线性特征】</p><p>最终目标：模型预测出来的位置与数据记录对应的位置尽可能接近【过拟合】。</p><p>结合客户端对数据的访问请求往往呈现某种规律，如齐夫定律(Zipf’s law)。引入热点数据访问。</p><p>定义损失函数如下：$L<em>i=\sum</em>{(x,y)}\lambda_x\cdot(f_i(x)-y)^2<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="129.552ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 57262 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">其</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">中</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(4000,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4572,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">、</text></g></g><g data-mml-node="mi" transform="translate(5572,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(6062,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">分</text></g><g data-mml-node="mi" transform="translate(7062,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">别</text></g><g data-mml-node="mi" transform="translate(8062,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">代</text></g><g data-mml-node="mi" transform="translate(9062,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">表</text></g><g data-mml-node="mi" transform="translate(10062,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">训</text></g><g data-mml-node="mi" transform="translate(11062,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">练</text></g><g data-mml-node="mi" transform="translate(12062,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(13062,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">据</text></g><g data-mml-node="mi" transform="translate(14062,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(15062,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mi" transform="translate(15583,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(16049,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(16539,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">以</text></g><g data-mml-node="mi" transform="translate(17539,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">及</text></g><g data-mml-node="mi" transform="translate(18539,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">对</text></g><g data-mml-node="mi" transform="translate(19539,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">应</text></g><g data-mml-node="mi" transform="translate(20539,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(21539,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">存</text></g><g data-mml-node="mi" transform="translate(22539,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">储</text></g><g data-mml-node="mi" transform="translate(23539,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">位</text></g><g data-mml-node="mi" transform="translate(24539,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">置</text></g><g data-mml-node="mi" transform="translate(25539,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(26539,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mtext" transform="translate(27089,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(27339,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mtext" transform="translate(27684,0)"><path data-c="A0" d=""/></g><g data-mml-node="mo" transform="translate(27934,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(28323,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(28895,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mi" transform="translate(29284,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">代</text></g><g data-mml-node="mi" transform="translate(30284,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">表</text></g><g data-mml-node="mi" transform="translate(31284,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">第</text></g><g data-mml-node="mi" transform="translate(32284,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(32629,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">个</text></g><g data-mml-node="mi" transform="translate(33629,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">训</text></g><g data-mml-node="mi" transform="translate(34629,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">练</text></g><g data-mml-node="mi" transform="translate(35629,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">模</text></g><g data-mml-node="mi" transform="translate(36629,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">型</text></g><g data-mml-node="mo" transform="translate(37629,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(38018,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(38363,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">取</text></g><g data-mml-node="mi" transform="translate(39363,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">值</text></g><g data-mml-node="mi" transform="translate(40363,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">为</text></g><g data-mml-node="mn" transform="translate(41363,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mtext" transform="translate(41863,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(42113,0)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"/></g><g data-mml-node="mo" transform="translate(43002,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mi" transform="translate(43391,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(44391,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mtext" transform="translate(45072,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(45322,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mtext" transform="translate(45667,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(45917,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">为</text></g><g data-mml-node="mi" transform="translate(46917,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">第</text></g><g data-mml-node="mi" transform="translate(47917,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(48262,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">个</text></g><g data-mml-node="mi" transform="translate(49262,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">模</text></g><g data-mml-node="mi" transform="translate(50262,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">型</text></g><g data-mml-node="mi" transform="translate(51262,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(52262,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">损</text></g><g data-mml-node="mi" transform="translate(53262,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">失</text></g><g data-mml-node="mi" transform="translate(54262,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">函</text></g><g data-mml-node="mi" transform="translate(55262,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(56262,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">。</text></g></g></g></g></svg></mjx-container>\lambda_x<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="54.624ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 24144 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">代</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">表</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">了</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">单</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">个</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">据</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">键</text></g><g data-mml-node="mi" transform="translate(8000,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mi" transform="translate(8572,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(9572,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">访</text></g><g data-mml-node="mi" transform="translate(10572,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">问</text></g><g data-mml-node="mi" transform="translate(11572,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">热</text></g><g data-mml-node="mi" transform="translate(12572,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">度</text></g><g data-mml-node="mi" transform="translate(13572,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(14572,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">每</text></g><g data-mml-node="mi" transform="translate(15572,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">一</text></g><g data-mml-node="mi" transform="translate(16572,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">个</text></g><g data-mml-node="mi" transform="translate(17572,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(18572,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">据</text></g><g data-mml-node="mi" transform="translate(19572,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">键</text></g><g data-mml-node="mi" transform="translate(20572,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mi" transform="translate(21144,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">对</text></g><g data-mml-node="mi" transform="translate(22144,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">应</text></g><g data-mml-node="mi" transform="translate(23144,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g></g></g></svg></mjx-container>\lambda_x$ 值不同， 该值可以通过对 x 的历史访问数据计算得出。【类似词频统计】</p><p>【相当于，在计算损失时，预测值与真实值之差的平方又分别乘了个权重参数】</p><p>当 K个神经网络模型 f~i~(x)，1&lt;=i&lt;=K 训练完成后，每一个模型都会对应一个误差值 (MaxError)，这个值代表了 模型 f~i~(x) 在第i个数据区域最大的预测误差。</p><p>$\mathrm{MaxError}<em>i=\max</em>{x\in D_i}|f_i(x)-y(x)|$ </p><p>其中：</p><ul><li>f~i~(x) 是第 i 个神经网络模型对输入 x 的预测输出；</li><li>y(x) 是输入 x 对应的真实标签或值；</li><li>D~i~  是第 i 个数据区域，其中包含了用于评估模型性能的数据样本集；</li><li>MaxError~i~  是在第 i 个数据区域上模型 f~i~(x) 的最大预测误差。</li></ul><hr><h4 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h4><p>经过聚类得到的 K个数据区域之间大小有序，并且每个区域都有对应的键值范围(MinKey， MaxKey)。</p><p>当一个查询到来时，首先通过模型选择器比较判断键的大小【key与区域键值范围进行比较】，从而找到该查询对应的索引模型 f~i~(x)，然后利用 f~i~(x) 计算出该数据记录所对应的存储位置 y。此时得到的位置是一个近似位置，可用二分查找算法，在 [y−MaxError，y+MaxError] 范围内查找数据的最终位置，从而完成查询操作。</p><p>另外，为了提高查询效率，<strong>Dabble 模型会在服务器端缓存(cache) 近期访问的数据以及热点数据</strong>。所以每当查询到来，首先查询系统缓存：如果数据命中，则直接返回结果；否则，访问 Dabble索引进行数据的查询。</p><p>为了防止缓存与真实数据的不一致性，可采用租赁机制。在租赁有效期间，缓存数据有效，且该缓存对应的数据更新被锁定【不可更新】；租赁失效后，如果想要重新缓存该部分数据，需要重新向系统发出租赁申请。</p><hr><h4 id="索引更新"><a href="#索引更新" class="headerlink" title="索引更新"></a>索引更新</h4><p>学习型索引存在的问题：新数据的不断插入，会引起数据分布的改变。在这种情况下，之前训练的神经网络模型将出现预测位置偏移的情况，并且会随着数据分布改变的程度不断加大。因此，朴素的想法是在新数据集上重新训练模型，但这个耗费是非常大的。</p><h5 id="模型解耦"><a href="#模型解耦" class="headerlink" title="模型解耦"></a>模型解耦</h5><p>当新查询到来的时候，经过模型选择器选择模型 f~i~(x)，计算得到 键x 对应的位置，并在误差范围内进行查找，从而获得最终的数据。在数据预处理阶段，我们通过聚类方法把数据集分割成 K个区域， 那么能不能在数据插入的时候，只更新当前的模型 f~i~(x)？这样，其余K−1个模型可保持不变，从而将更新带来的消耗尽可能降低。</p><p>受到程序设计领域模型解耦思想的启发，我们可以在模型的预测部分加一层中间层，使模型之间相互独立，<br>这样每个模型预测出来的位置变为这个键在该模型对应的数据区域的位置。在这种情况下，如图 5 所示，模型<br>f~i~(x) 的输出值 y 代表的是键 x 在第 i 个数据区域 D~i~ 中的位置。令 |D~i~| 代表第 i 个数据区域的大小，那么键 x 真实的<br>预测位置可以通过如下计算得到：$pos=\sum<em>{t=1}^{i-1}\mid D_t\mid+y\text{ ,其中},\sum</em>{t=1}^{i-1}\mid D_t\mid $ 代表了前 i−1 个数据区域包含的数据量，该累计值再加上 y，得到键 x 真正的预测存储位置。通过这种方式，我们只需在聚类以及后续的索引更新过程中记录下每个数据区域的大小，即可方便地通过中间层得到查询的预测位置。可以看到：通过加了一层中间层，模型 f~i~(x) 由预测键 x 在整个数据集中的位置变为预测在 区域|D~i~|中 的相对位置。</p><p>在这种情况下，新插入的数据只会影响数据区域 |D~i~| 中的数据分布，其他模型依然可以通过预测出来的数据键的相对位置加上位于前面的所有数据区域的大小得到数据键的真正位置。模型之间互不影响，相互独立，为后续的数据插入过程提供了高效的解决方法。另外，这里提到的中间层只是一个虚拟上的概念，并没有真正改变数据的存储位置，因此不会影响数据的分布。与 ASLM[24]、AIDEL[23]不同，Dabble 模型最终输出的 pos 代表在整个数据集的真实位置。因此，Dabble 模型既适用于存储在连续内存中的数据集，也可应用于将数据区域分块存储的场景。</p><p>个人理解模型解耦：输入 key 不变，对应的标签 position 变为 相对位置【实际区域区间数组下标】。</p><p>模型最终的二分搜索区间：[pos-MaxError,pos+MaxError]。会越界相对数据区域，但实际数据还是连续存储。</p><hr><h5 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h5><p>通过模型解耦，模型 f~i~(x)，1≤i≤K 之间相互独立，当插入数据的时候，只需要重新训练对应的神经网络模型即可，而不需要在全部数据集上进行训练。但是，如果插入操作比较多，对模型频繁地重新训练将会带来非常大的代价，严重影响系统的响应速度。【<strong>为一个值的插入就重新训练模型肯定很亏，所以得积攒一点—-缓存积攒</strong>】</p><p>借鉴 LSM Tree 思想：首先，在内存中开辟一块缓存(buffer)，并将其分为K个部分，作为K 个模型的缓冲区。当有新数据插入时，首先通过模型选择器获得新数据应该存储的数据区域，然后直接将该条数据放入到对应的缓存块中。当某个缓存块达到阈值时，将其中的数据归并到真正的数据区域中，并对相应的模型  f~i~(x) 重新训练，使其能够拟合当前的数据分布。</p><p>在这种情况下，当某个数据区域由于数据分布过于复杂， 导致一个神经网络模型无法较好地学习时，对该数据区域进行分裂操作，此时，整个数据集合变为 K+1 个区域。【如何判定？损失过大，大于给定阈值？】</p><p>注意：如第2.1节提到的那样，把数据集划分为区域，只是逻辑上的行为，数据集依旧是作为一个整体存储。</p><p>引入数据更新机制后，对于数据查询请求，需要首先在第2.3 节中提到的系统缓存进行查找，如果失败，则在数据缓存块中进行查找：如果查找成功，则直接返回结果；否则，使用 Dabble 模型进行查找。为了提高在缓存中的查询速度，缓存中的数据可以按照B树方式进行组织。</p><hr><h4 id="实验结论"><a href="#实验结论" class="headerlink" title="实验结论"></a>实验结论</h4><p>K 值越大，模型收敛的速度越快。原因在于：K 值越大，每一个数据区域所包含的数据记<br>录越少，因此模型在小的数据规模上学习速度更快。</p><p>K 值决定了数据集划分的个数，显然，K 值越大，数据集划分的越细，从而单个神经网络模型在对应的数据区域上学习效果越好，预测越精准。虽然 K 值越大使神经网络学习效果越好，但是当 K 过大时，会由于模型数目过多，使得模型选择器在选择某个查询对应的模型时花费的时间增加【应该是线性判断的，所以个数多就慢了】。因此，对于某个特定数据集，存在某个 K 值使模型性能达到最优。另外，数据集的数据分布不同，数据规模大小不一样，最优性能对应的 K 值会不同。</p><p>创新想法：数据分布划分——使用Zorder空间填充曲线进行编码分区—-上下限不好抓取。</p><p>分完堆就可以采用  神经网络进行拟合了。。</p><p>此处的 缓存：可以使用 并发的 BlinkHash 维护—————-数据量有限，不太适合，再想想。</p><p>如果不分堆，现有的方法有：分段线性拟合。分段有的采用贪心算法实现数据集的划分。</p><p>优化点：数据集划分、模型架构、并发结构、多维数据、支持插入、支持更新删除。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 学习型索引 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习型索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-B树与B+树</title>
      <link href="posts/4082.html"/>
      <url>posts/4082.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据库中的-B-树-与-B-树"><a href="#数据库中的-B-树-与-B-树" class="headerlink" title="数据库中的 B 树 与 B^+^ 树"></a>数据库中的 B 树 与 B^+^ 树</h2><p>参考博客：<a href="https://yey.world/2021/01/02/LearnedIndex-03/">数据库中的 B 树与 B+ 树 - YEY 的博客 | YEY Blog</a>。</p><hr><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>B树和B^+^树是两种自平衡的树形数据结构，被广泛应用于数据库系统中，以提高数据检索效率。以下是一些使用B树或B+树作为索引结构的数据库实例：</p><ol><li><strong>MySQL</strong>: 一种被广泛使用的开源数据库管理系统，它使用B树作为其索引的基础数据结构。InnoDB存储引擎在MySQL中使用B^+^树作为索引的数据结构。</li><li><strong>Oracle</strong>: 在其索引结构中也使用了B树的变体，比如在聚簇索引中。</li><li><strong>SQL Server</strong>: 在其表和索引的设计中使用了B^+^树结构，特别是在聚集索引中。</li><li><strong>PostgreSQL</strong>: 是一个功能强大的开源对象-关系数据库系统，它也使用B树（特别是B^+^树）来建立索引。</li><li><strong>IBM DB2</strong>: 使用B^+^树来组织表和索引的数据，以优化查询性能。</li><li><strong>MongoDB</strong>: 一个面向文档的NoSQL数据库，其中的某些存储引擎如WiredTiger使用B树来构建索引。</li><li><strong>LevelDB</strong>: 由Google开发的快速键值存储库，它使用一种名为SSTable的结构化存储格式，通常基于B树或B^+^树实现。</li><li><strong>Redis</strong>: 虽然Redis是一个内存数据结构存储，但它的某些持久化方案，如RediSearch，可能会采用B树或B^+^树作为索引结构。</li><li><strong>Lucene</strong>: 一个高性能、可扩展的信息检索(IR)库，常用于搜索引擎中，它使用倒排索引，其中的术语词典部分可以基于B树或B^+^树构建。</li></ol><p>这些数据库利用B树和B^+^树的特性来提高数据的插入、删除和查找操作的效率。由于B^+^树将所有关键字信息都存储在叶子节点，并且叶子节点之间通过指针相连成链表，这种结构特别适合于范围查询和顺序访问。而B树则在每个节点中既存储关键字信息也存储指向子节点的指针，适用于需要频繁访问完整记录的场景。</p><hr><p>同时，<strong>B树与B^+^树的设计并非只基于磁盘，也可以应用于内存中的数据管理，但它们特别适合于磁盘存储的优化</strong>。</p><p>B树和B^+^树都是为减少I/O操作而设计的自平衡树形数据结构。这两种数据结构虽然可以用于内存中数据的组织，但它们的设计初衷主要是为了解决大规模数据存储在硬盘上时的高效检索问题。以下是详细阐述：</p><ul><li><strong>B树</strong>：B树是一种自平衡的多叉搜索树，它的设计目标是通过保持树的高度较低来减少对硬盘的访问次数，因为每次访问硬盘都需要相对较长的时间。尽管B树的所有节点都存储数据，但它的主要目的是降低层高，以优化读取性能。</li><li><strong>B^+^树</strong>：B^+^树是B树的一个变体，它通过将实际数据仅存储在叶子节点上，并且叶子节点之间通过指针连接成链表，进一步提高了磁盘读写的效率。这种结构特别有利于范围查询和顺序访问，因为所有值都在叶子节点上<strong>按序排列</strong>。</li></ul><p>此外，由于硬盘的最小访问单元是一个“块”，通常比内存的访问单元大得多，因此在硬盘等块设备上组织B树时需要考虑这个限制，使得B树和B^+^树在设计时要进行适当的调整。</p><hr><h3 id="设计根源"><a href="#设计根源" class="headerlink" title="设计根源"></a>设计根源</h3><p>B树一开始是基于磁盘设计的，那就需要先了解计算机是如何持久化存储与读取数据的。</p><h4 id="磁盘结构"><a href="#磁盘结构" class="headerlink" title="磁盘结构"></a>磁盘结构</h4><p><img src="/posts/4082.html" alt="磁盘结构" style="zoom: 50%;"></p><p> <strong>磁盘 (disk)</strong> 的结构：一个典型的磁盘驱动器由一个或多个 <strong>盘片 (platter)</strong> 组成，它们以一个固定的速度围绕一个共同的 <strong>主轴 (spindle)</strong> 旋转。每个盘片表面覆盖着一层可磁化的物质。驱动器通过 <strong>磁臂 (arm)</strong> 末尾的 <strong>磁头 (head)</strong> 来读/写盘片。</p><p>盘片在 <strong>逻辑上 (而非物理上)</strong> 被划分为一系列的同心环状区域，数据就存储在这样的同心圆环上面，这些同心圆环被称为 <strong>磁道 (track)</strong>。每个盘面可以划分多个磁道，最外圈的磁道是 0 号磁道，向圆心增长依次为 1 号磁道、2 号磁道……磁盘的数据存放就是从最外圈开始的。</p><p>根据硬盘的规格不同，磁道数可以从几百到成千上万不等。每个磁道可以存储几个 Kb 的数据，但是计算机不必要每次都读写这么多数据。因此，再把每个磁道划分为若干个弧段，每个弧段就是一个 <strong>扇区 (sector)</strong>。</p><p><img src="/posts/4082.html" alt="磁盘盘面详细图" style="zoom: 50%;"></p><p>一个盘片被划分为许多磁道和扇区，一个磁道和一个扇区相交的区域称为一个 <strong>块 (block)</strong>。因此，磁盘上的任意一个块都可以通过其对应的磁道编号和扇区编号来寻址，也就是说，磁盘上的块地址格式由磁道编号和扇区编号组成：<code>块地址 = (磁道编号，扇区编号)</code> 。</p><p>块是硬盘上存储的物理单位。出于稳定性考虑，通常一个块存储 512 字节的数据，但是实际上其容量可以是任意大小，具体取决于磁盘制造商和磁盘型号。</p><p>这里，我们假设每个块的容量为 512 字节。当我们从磁盘上读取或写入数据时，我们总是以块为单位进行读/写。如果现在我们读取一个 512 字节的块，假设其中第一个字节的地址为 0，最后一个字节的地址为 511，那么其中每个字节都有其各自的地址，我们称之为 <strong>偏移量 (offset)</strong>。</p><p><img src="/posts/4082.html" alt="块内地址偏移量" style="zoom:50%;"></p><p>假设磁盘上的每个块的第一个和最后一个字节的偏移量都分别为 0 和 511。因此，我们只需要知道 <strong>磁道编号</strong>、<strong>扇区编号</strong> 和 <strong>偏移量</strong> 这三个信息就可以定位到磁盘上的任意一个字节：首先，利用磁道编号和扇区编号定位到该字节所在的块；然后，在块内通过偏移量定位到该字节。</p><p>正常情况下，我们可以通过盘片的旋转来选择扇区，通过磁头的轴向移动来选择磁道，也就是说，我们可以通过旋转盘片和移动磁头来定位到某个块，而数据总是以块的形式存储在磁盘上的。</p><p>现在，让我们来看一下内存，或者说 RAM (注：RAM 是一种存储技术，其类型为主存)，我们所有的程序都运行在内存中。假设我们的程序需要访问磁盘上的数据，我们需要将这些数据从磁盘上读取到内存中，然后我们的程序才能对其进行访问，而一旦我们的程序得到了某些结果，我们再将这些结果写入到磁盘。所以，数据处理无法直接在磁盘上进行，数据需要被读入内存中然后才能被程序访问。</p><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2021-01-02-WX20210102-141040%402x.png" alt="内存与磁盘的关系图"></p><p>内存中的数据可以被程序直接访问，我们将其称为 <strong>数据结构 (data structure)</strong>。而在磁盘上高效组织数据使得其能够以一种简单方式被利用的系统被称为 <strong>数据库管理系统 (DBMS)</strong>。</p><hr><h4 id="持久化存储"><a href="#持久化存储" class="headerlink" title="持久化存储"></a>持久化存储</h4><p>DBMS 管理着磁盘上的数据，那磁盘上的数据是如何以数据库的形式被组织起来的呢？</p><p><strong>如下例子所示</strong>：</p><p>​        假设有一个数据库表，其中包含一些 <strong>行 (rows)</strong> 和 <strong>列 (columns)</strong> ，假设有 100 行数据。表的结构如下图左所示，一共有 5 列属性，总的大小为 128 字节，即表中的每一行大小为 128 字节。</p><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2021-01-02-WX20210102-140156%402x.png" alt="DBMS持久化数据示例"></p><p>若将该表持久化到磁盘上，每个块中可以存储的记录条数为：<code>512B / 128B = 4 条</code>；则存储 100 条记录需要的块数量为：<code>100 / 4 = 25 块</code>。所以，在磁盘上持久化该数据库表总共需要 25 个块。</p><p>如果该数据库表已经存储在了磁盘上的 25 个块中，当写一条查询语句来查询其中某条特定记录时，所需要的搜索次数是多少？因为所查询的记录可能在数据库表中的任意位置，所以可能需要搜索整个数据库表，总共需要访问磁盘上最多 25 个块。</p><hr><h4 id="数据库索引"><a href="#数据库索引" class="headerlink" title="数据库索引"></a>数据库索引</h4><p>为了缩减查询的时间开销，针对数据库表，我们为其构建 <code>索引（index）</code>。</p><p><img src="/posts/4082.html" alt="数据库表一级索引示例" style="zoom: 50%;"></p><p>在索引中，存储一个 <strong>键 (key)</strong>，即员工 id，以及一个指向相应记录的 <strong>指针 (pointer)</strong>。因此，对于磁盘上块中的每条记录，我们都有一个指向该记录的指针，我们称之为 <strong>记录指针 (record pointer)</strong>。每条记录在索引中都有一个对应的 <strong>条目 (entry)</strong>，我们将这种索引称为 <strong>密集索引 (tense index)</strong>。</p><p>不难发现，构建的索引表由<code>&lt;id,pointer&gt;</code> 字段构成。同样的，索引表也需要持久化在磁盘块中。</p><p>不妨假设每个 id 大小为 10 字节，每个指针大小为 6 字节，因此索引中的每个条目大小为 16 字节。所以，每个块可存储的索引条目数量为：<code>512 / 16 = 32</code>。则存储 100 条记录的<code>密集索引</code>所需要的 <code>块的数量</code> 为：<code>100 / 32 = 3.125</code>。所以，共需要<code>4</code>个块存储这<code>100</code>条记录的索引。</p><p>现在，当我们需要搜索任意一条记录时，我们可以直接在索引中搜索，因此查找该记录对应的索引条目最多需要访问 4 个块【调块进入内存再遍历，与不建索引时，开销是一样的】。当我们在索引中找到该记录的 key 后，我们就可以直接访问其记录所在的块。所以，现在查询任意一条记录最多需要访问 4 个索引块加上 1 个数据库表块，总共只需要访问 5 个块。这就是构建索引的好处。</p><hr><h4 id="多级索引"><a href="#多级索引" class="headerlink" title="多级索引"></a>多级索引</h4><p>现在，假设我们的记录不是 100 条，而是 1000 条，这意味着数据库表的存储需要 <code>1000 / 4  = 250</code> 个块，而相应地，索引存储需要 <code>1000 / 32 = 31.25</code> ，即 32 个块。可见索引内的搜索开销也大大增加了。</p><p>那么，我们可以在索引之上再构建一层索引吗？</p><p>答案是可以的。那如何构建二级索引的条目呢？要知道，一级索引中的记录指针指向记录实际存储的块位置；二级索引理应如此，而一个块可以存储 <code>32</code>个<code>一级索引条目</code>，所以我们可以每隔 32 条记录构建一个二级索引条目，我们将这种索引称为 <strong>稀疏索引 (sparse index)</strong>。</p><p><img src="/posts/4082.html" alt="二级稀疏索引" style="zoom: 50%;"></p><p>我们知道索引中的每个条目大小为 16 字节，每个块可存储的索引条目数量为 32。而二级索引一共的条目数量为：<code>1000 / 32 = 31.25</code>。所以，二级索引的条目数量为 32，存储所需的块数量为：1。</p><p>因此，整个数据库表存储需要 250 个块，一级索引存储需要 32 个块，二级索引存储仅需 1 个块。所以现在查询任意一条记录总共需要访问 1 个二级索引块，加上 1 个一级索引块，加上一个数据库表存储块，总共只需要访问 3 个块。所以，<strong>通过增加一级索引，我们大大减少了块访问的次数，这也是 B 树和 B^+^ 树的基本思想起源</strong>。</p><p>假设我们的数据量很大很大，我们需要构建多级索引以减少磁盘上的块访问次数：</p><p><img src="/posts/4082.html" alt="多级索引示例" style="zoom: 33%;"></p><p>我们可以将上面的结构旋转一下会发现其类似树形结构：</p><p><img src="/posts/4082.html" alt="树形多级索引" style="zoom:33%;"></p><p>针对数据库表之外的存储的 <code>额外索引结构</code> ，我们希望这些高层级的索引结构可以被自动地添加或者删除：当有大量数据插入使得数据库表越来越大时，我们希望索引级数可以自动增加；而当删除大量记录使得数据库表减小后，我们希望索引级数可以自动减少。简而言之，我们希望自动管理那些高层级索引，即我们希望能够实现自我管理功能的多级索引，这也为 B 树和 B^+^ 树提供了思路。</p><p>实际上，B 树和 B^+^ 树来源于多路查找树，故接下来先讨论多路查找树，然后再讨论 B 树和 B^+^ 树。</p><hr><h4 id="多路查找树"><a href="#多路查找树" class="headerlink" title="多路查找树"></a>多路查找树</h4><p>对于一个 M 路查找树，每个结点最多可以有 M 个子结点，并且每个结点包含 M−1 个 key。所以，M 路查找树是二叉查找树的一种扩展，或者说二叉查找树是 M 路查找树的一个特例。</p><p>对于一棵 M 路查找树，这里以 4 路查找树为例，每个结点可以包含 3 个 key 和最多 4 个子结点，其结构如下：</p><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2021-01-03-WX20210103-114106%402x.png" alt="多路查找树节点"></p><p>下面我们尝试利用 M 路查找树的结点结构来构建索引，回忆一下，索引结构如下：</p><p><img src="/posts/4082.html" alt="索引结构" style="zoom:50%;"></p><p>结合 M 路查找树的特点，我们可以构建以下结点结构：</p><p><img src="/posts/4082.html" alt="多路查找树节点结构" style="zoom:50%;"></p><p>对于多级索引结构，我们可以为其构建一棵 M 路查找树，其中结点结构如上图所示：每个 key 后面紧跟一个指向对应的数据库记录的指针。</p><p>但是，M 路查找树在构建时，可以以任意方式完成插入操作。这意味着，如果我们一共有 n 个待插入的 key，那么 M 路查找树的高度可能会达到 n，这会使得 M 路查找树退化为线性时间复杂度 O（n），这就是 M 路查找树存在的主要问题：<strong>树的创建过程不可控，可能会退化为效率低下的线性查找</strong>。</p><hr><h3 id="B树-与-B-树"><a href="#B树-与-B-树" class="headerlink" title="B树 与 B^+^树"></a>B树 与 B^+^树</h3><p>因为 M 路查找树创建过程不可控，导致其可能退化成线性查找，所以，需要引入一些机制来防止上述情况的发生。</p><h4 id="B-树"><a href="#B-树" class="headerlink" title="B 树"></a>B 树</h4><p>B 树就是附加了一些规则的 M 路查找树。</p><ol><li><strong>每个结点必须填满至少一半的 key。对于 M 路查找树，每个结点要至少包含 ⌈m/2⌉ 个 key</strong>。例如，对于 10 路查找树，每个结点至少需要包含 5 个 key，然后才能创建新的结点。这条规则意在控制树的高度。【每个节点内至多 M-1个key】</li><li><strong>根结点可以有至少 2 个子结点</strong>。<strong>所有的叶子结点必须在同一层</strong>。</li><li><strong>树的创建过程是由底向上的</strong>。</li></ol><hr><p>B 树非常适合用于实现多级索引结构，它可以根据 key 的数量自动构建高层级的索引。用如下 keys 插入过程，来观察 B 树是如何自动构建多级索引的。</p><p><code>Keys: 10,20,40,50,60,70,80,30,35,5,15；M = 4；</code> </p><p>在插入 50 时，根结点已经满了，没有剩余空间留给这个 key 了。此时需要分裂该结点，在新结点中插入 50，将 40 取出并上升一层，将其放入新的根结点中：</p><p><img src="/posts/4082.html" alt="B树构建过程1" style="zoom:50%;"></p><p>即当某个结点已经装满 key 时，如果此时有新的 key 需要插入，我们将创建一个新的结点并将新的 key 插入其中。同时对满 key 结点进行分裂，取出其中的一个 key 并将其放进新的根结点中。这就是在 B 树创建过程中的结点分裂过程，可以看到，这种方式将由底向上地构建 B 树。</p><p>插入<code>60、70</code>时，因为比<code>40</code>大，存储<code>50</code>的节点还没有满，故直接都存储到<code>50</code>的那个节点中。</p><p>继续插入 80，但右子结点已满，需要分裂右子结点，在新结点中插入 80，并将 70 取出并放入根结点中：</p><p><img src="/posts/4082.html" alt="B树构建过程2" style="zoom:50%;"></p><p>在插入 30 时，它会存到左子节点中；继续插入35，会导致左子节点分裂，在新结点中插入 35，并将 30 取出放入根结点中：</p><p><img src="/posts/4082.html" alt="B树构建过程3" style="zoom:50%;"></p><p>所以，每当有结点被填满时，我们将分裂该结点，并将其中一个 key 取出并放入其父结点中。</p><p>继续插入 5：</p><p><img src="/posts/4082.html" alt="B树构建过程4" style="zoom:50%;"></p><p>继续插入 15 时，由于左子结点已满，我们需要分裂左子结点，将 20 放入新结点中，并将 15 放入根结点中。然而，由于根结点也已经满了，所以我们继续分裂根结点，将 70 放入新结点中，并将 40 取出并提升一层，将其放入新的根结点中：</p><p><img src="/posts/4082.html" alt="B树构建过程5" style="zoom:50%;"></p><p>注意，这里我们在每次分裂结点时总是保证取出 key 的左侧结点拥有更多的 key，实际上，我们也可以让右侧的 key 更多，这取决于我们自己的习惯。可以看到，现在我们已经构建了一个具有三级索引的 B 树，这就是多级索引的构建过程。现在，树的生成过程是可控的，所有的叶子结点都在同一层级，这使得 B 树与多级索引在结构上更加相似。</p><p>在实际构建中，B 树中的结点包含 key、子结点指针和记录指针。如下图显示了 B树 在数据库中的实际使用：</p><p><img src="/posts/4082.html" alt="B树实际图示" style="zoom:50%;"></p><hr><h4 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B^+^ 树"></a>B^+^ 树</h4><p>详细可参考博客：<a href="https://zhuanlan.zhihu.com/p/149287061">B+树看这一篇就够了（B+树查找、插入、删除全上）</a>。</p><p>在 B^+^ 树中，除了叶子结点，其余非叶子结点中不再包含记录指针，非叶子结点中的所有 key 都将在叶子结点中保存一份拷贝，即 B^+^ 树中的所有 key 都可以在叶子结点中找到，并且叶子结点之间采用类似链表的方式连接：</p><p><img src="/posts/4082.html" alt="B+树图示" style="zoom: 50%;"></p><p>B^+^ 树的这种结构与我们之前讨论的多级索引结构完全一样。B^+^ 树与 B 树的主要区别在于：</p><ol><li>B^+^ 树中，叶子结点中保存了所有的 key，其中有些 key 在非叶子结点中也进行了冗余存储。</li><li>B^+^ 树中，非叶子结点不再包含记录指针，所有的记录指针都保存在叶子结点中。</li><li>B^+^ 树中，所有的叶子结点构成了一个链表。因此，叶子结点所在的层实际上构成了一层密集索引，而非叶子结点所在的层构成了稀疏索引。</li></ol><p>因此，与 B 树相比，B^+^ 树的结构更加符合多级索引。</p><hr><h4 id="B-树代码"><a href="#B-树代码" class="headerlink" title="B 树代码"></a>B 树代码</h4><p><a href="https://zhuanlan.zhihu.com/p/340721689">『数据结构与算法』B树图文详解（含完整代码） - 知乎 (zhihu.com)</a>。</p><hr><h4 id="B-树代码-1"><a href="#B-树代码-1" class="headerlink" title="B^+^ 树代码"></a>B^+^ 树代码</h4><hr>]]></content>
      
      
      <categories>
          
          <category> 学习型索引 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习型索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02-哈希与布隆过滤</title>
      <link href="posts/8043.html"/>
      <url>posts/8043.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据库中的机器学习：哈希表、B-树与学习索引"><a href="#数据库中的机器学习：哈希表、B-树与学习索引" class="headerlink" title="数据库中的机器学习：哈希表、B 树与学习索引"></a>数据库中的机器学习：哈希表、B 树与学习索引</h1><p><strong>参考资料</strong>：</p><ul><li><a href="https://www.youtube.com/watch?v=o1bN3gryKaw&amp;t=3087s">https://www.youtube.com/watch?v=o1bN3gryKaw&amp;t=3087s</a></li><li><a href="https://arxiv.org/abs/1712.01208">https://arxiv.org/abs/1712.01208</a></li></ul><h2 id="1-主要内容"><a href="#1-主要内容" class="headerlink" title="1. 主要内容"></a>1. 主要内容</h2><h3 id="1-1-数据库索引"><a href="#1-1-数据库索引" class="headerlink" title="1.1 数据库索引"></a>1.1 数据库索引</h3><p>索引存在的意义：</p><ul><li>我们有很多数据需要存储</li><li>我们需要快速查询一些特定条目</li><li>我们使用 <strong>索引 (Index)</strong> 完成这一任务</li></ul><p>假设我们存储了许多数据，并且希望 <strong>快速</strong> 查找其中某条或者某个特定范围的数据时，<strong>索引</strong> 可以帮助我们实现这一点。这很重要，不论是对于分析软件还是机器学习使用者，只要我们构建了一些数据 Pipeline，当我们需要快速抓取所需数据时，我们就是索引结构的 “消费者”。而 <strong>学习索引</strong> 这个新研究方向的出现使得机器学习人员也可以成为索引结构的 “生产者”。</p><h3 id="1-2-传统索引策略"><a href="#1-2-传统索引策略" class="headerlink" title="1.2 传统索引策略"></a>1.2 传统索引策略</h3><p>几种常见的传统数据库索引结构及其应用场景：</p><ul><li><strong>B 树</strong>：范围索引</li><li><strong>哈希表</strong>：点索引</li><li><strong>Bloom 过滤器</strong>：存在索引</li></ul><h3 id="1-3-新的研究方向：学习索引"><a href="#1-3-新的研究方向：学习索引" class="headerlink" title="1.3 新的研究方向：学习索引"></a>1.3 新的研究方向：学习索引</h3><p>新型 <strong>学习索引 (Learned Index)</strong> 方向：</p><ul><li>Google 和 MIT 合作研究</li><li><a href="https://arxiv.org/abs/1712.01208">https://arxiv.org/abs/1712.01208</a></li></ul><p>我们将介绍 Kraska 等人的这篇论文<a href="https://www.cl.cam.ac.uk/~ey204/teaching/ACS/R244_2018_2019/papers/Kraska_SIGMOD_2018.pdf">《The Case for Learned Index Structures》</a>，他们提出了使用 RMI 等神经网络结构代替 B 树等传统索引结构的思路，开启了数据库领域的一个新的研究方向。</p><h3 id="1-4-学习索引的优势在哪里"><a href="#1-4-学习索引的优势在哪里" class="headerlink" title="1.4 学习索引的优势在哪里"></a>1.4 学习索引的优势在哪里</h3><p>我们将探讨他们已经完成的初步研究工作：利用机器学习方法去解决之前传统索引结构解决过的一些问题，以及他们的对标实验和权衡比较：</p><ul><li>什么情况下，传统算法具有优势？</li><li>什么情况下，学习索引具有优势？</li><li>实践中如何在两者之间进行权衡？</li></ul><p>从长远看，学习索引可以更加充分利用硬件优势。随着指导预测 CPU 性能增长的摩尔定律日渐走向衰亡，目前来看，未来高性能计算将主要集中在 GPU 和并行数据指令集，机器学习方法可以很好地发挥这些优势，而传统索引结构很难做到这点。未来，随着 AI 工作负载在硬件方面的进一步深度优化，学习索引这类算法在未来将具有很大的发展潜力。</p><h2 id="2-什么是索引"><a href="#2-什么是索引" class="headerlink" title="2. 什么是索引"></a>2. 什么是索引</h2><p>我们先回顾一下索引：</p><ul><li>索引可以帮助我们在海量数据中快速定位到某些特定条目。</li><li>尤其是当数据并没有按照我们要查询的字段排序时会非常有用。</li></ul><p>假设我们存储了大量数据，当我们需要查询其中某些特定数据时，我们并不希望从头到尾扫描整个磁盘记录来寻找该数据，例如，当我们查询 “名字叫 Tim 的人有哪些” 或者 “某个特定日期范围内出生的人” 等，我们可以使用索引。</p><p>在数据库中，我们有很多行记录，每一行都存储在硬盘上，即下图中底部的块状条，其中每个格子代表一行记录：</p><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-08-22-WX20200822-151353%402x.png" alt="img"></p><p>假设现在我们想要查询名字为 Tim 的人对应的行记录所在的位置：</p><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-08-22-WX20200822-152124%402x.png" alt="img"></p><p>如果没有索引，整个查询过程将非常缓慢，因为我们需要依次扫描磁盘上的每一条记录。对于大公司而言，通常需要在数百万甚至数十亿条记录中搜索我们想要的结果，因此，这是一个计算成本和时间开销都非常高的过程：</p><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-08-22-WX20200822-152936%402x.png" alt="img"></p><p>为了解决这一问题，我们构建了一种辅助数据存储结构，称为索引。例如哈希表、B 树等等，我们将在后面对这些传统索引以及新型的学习索引进行讨论。假设我们构建了一个以用户名字为 Key 的索引结构，相比之前通过扫描整个表来查看数据库中的每条记录，现在我们可以直接询问索引 “嘿，名字为 Tim 的记录在哪里？”，然后索引将告诉我们名字为 Tim 的记录的内存地址的偏移量为 7。我们可以基于任何我们想要的 Key 来构建各种索引，例如用户 ID、名字、年龄等等，相比基础数据，这些索引都属于额外的辅助数据结构。</p><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-08-22-WX20200822-154853%402x.png" alt="img"></p><p>这里涉及到计算机科学研究中的一个典型的权衡问题：</p><ul><li>索引是一种在内存用量和计算速度两者之间的权衡。</li><li>索引会占用一些内存，但是可以让查询更快。</li></ul><p>我们使用一些内存来创建这样一种辅助数据存储，然后通过利用一些合适的算法和数据结构来加速进程，但是代价就是会占用部分内存。而这也是学习索引中最令人感兴趣的地方：传统的索引结构通常都非常大，并且其大小还会随着输入数据量的增加而增加；然而，对于机器学习模型，尤其是神经网络模型，我们能够以一种更小的格式来获得对数据更强的表征能力，因此，对于训练好的学习索引，通常会比传统索引更小，并且同样具备快速查找记录的能力，甚至更快。</p><h2 id="3-索引的性能"><a href="#3-索引的性能" class="headerlink" title="3. 索引的性能"></a>3. 索引的性能</h2><p>对于索引结构，我们一般会从以下几个方面考察其性能优劣：</p><ul><li>查询类型 (单值查询 VS. 范围查询)</li><li>查找速度</li><li>插入一条新记录的开销</li><li>删除一条记录的开销</li><li>更新一条记录的开销</li><li>索引大小和利用率</li></ul><p>我们将逐个介绍这几个方面，但是请注意，在我们要讨论的 Kraska 等人的这篇论文中，并没有显式地考虑插入、删除、更新记录的开销，该论文主要集中在只读数据集，因此并没有涉及到这些操作。所以实际上，这是目前学习索引存在局限性的一个方面，未来还需要对此进行更多研究。</p><p>当然，有些应用程序是专门针对只读索引的。例如 BigTable 使用只读索引并且在需要更新时会选择重构索引，以及像数据仓库这种，当涉及大量数据转储时，我们会选择在晚上访问流量较低时重构其索引。所以，目前学习索引的局限并非一种致命缺陷，但它仍然是一个有待进一步研究的问题。</p><h3 id="3-1-查询类型"><a href="#3-1-查询类型" class="headerlink" title="3.1 查询类型"></a>3.1 查询类型</h3><p>查询类型主要可以分为两种：<strong>点到点查询</strong> 和 <strong>范围查询</strong>。</p><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-08-22-WX20200822-163102%402x.png" alt="img"></p><p>我们可能希望利用索引查询某条或者某个范围内的特定数据，其中，对于单点查询，最常用的索引结构是哈希表；而对于范围查询，最常用的是 B 树索引。</p><p>此外，Karask 等人的论文中还提到了另一种常见的用于存在索引的 Bloom 过滤器以及相应的 AI 替代结构，但是这里我们不会对此进行展开，具体细节可以参考论文。</p><h3 id="3-2-查找速度"><a href="#3-2-查找速度" class="headerlink" title="3.2 查找速度"></a>3.2 查找速度</h3><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-08-22-WX20200822-170313%402x.png" alt="img"></p><p>查找速度也是一个非常重要的指标：当我们询问索引时，需要等待多久才能得到结果。通常，我们用大 � 记号来表示其时间复杂度。此外，有时我们也会采用一些经验测量，因为目前已经有很多相关研究，例如缓存优化以及其他一些针对计算机硬件的优化等，并且实践表明它们在改进索引性能方面都取得了一定的效果。</p><h3 id="3-3-插入和更新开销"><a href="#3-3-插入和更新开销" class="headerlink" title="3.3 插入和更新开销"></a>3.3 插入和更新开销</h3><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-08-22-WX20200822-191710%402x.png" alt="img"></p><p>如果我们要将一条新的记录插入数据库中，我们需要更新索引，这个过程中会引入一些无法忽视的开销。同理，对某条已存在的记录进行更新时，我们同样需要更新索引结构。</p><h3 id="3-4-删除开销"><a href="#3-4-删除开销" class="headerlink" title="3.4 删除开销"></a>3.4 删除开销</h3><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-08-22-WX20200822-192442%402x.png" alt="img"></p><p>从原数据库中删除某条记录同样需要更新索引结构。例如，当我们询问索引 “名字叫 Tim 的人记录在哪里” 时，索引会告诉我们在红色方格所在的内存地址；而当我们将该记录删除后，索引应当告诉我们不存在相关记录。</p><h3 id="3-5-索引大小和利用率"><a href="#3-5-索引大小和利用率" class="headerlink" title="3.5 索引大小和利用率"></a>3.5 索引大小和利用率</h3><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-08-22-WX20200822-204444%402x.png" alt="img"></p><p>索引会占用一些内存空间，具体大小取决于数据量，因为我们需要一种数据结构来支持我们查询索引中的每条记录或者每个 Key。利用率则是指索引中的信息密度，某些索引结构会占用远远超出其需求的大量空间，这意味着这些索引中存在许多待使用的空槽，我们将这些空槽占比称为利用率。例如，如果有一个索引结构，它实际占用的空间是其本身包含记录的两倍，那么该索引的利用率为 50%。通常，对于索引结构，尤其是哈希表，随着其利用率越来越高，其性能会逐渐下降。因此，在索引的利用率和性能之间也存在权衡问题。</p><h3 id="3-6-注意事项"><a href="#3-6-注意事项" class="headerlink" title="3.6 注意事项"></a>3.6 注意事项</h3><p>然而，在我们考虑时间开销等问题时，还有一些注意事项：</p><ul><li>索引是一种工具，主要用于 <strong>数据量很大</strong> 的情况</li><li>优化访问硬盘次数比优化总操作数更为普遍</li></ul><p>索引对于数据量很大的场景非常重要，尤其是数据多到需要使用硬盘存储时。很多索引结构实际上是在对新数据所需的硬盘访问次数进行优化，而不是在对总操作数进行优化。而这对机器学习而言是个好消息，因为我们可以将机器学习模型加载进内存，并且以一种高度并行的方式进行推断，然后告知用户应当去硬盘上的哪个地方查看指定记录，所以我们仍然可以在实现很多操作的同时最小化硬盘访问次数，甚至可能要比使用传统索引结构实现的操作数更多。并且，由于推断过程采用的是高度并行化的计算方式，学习索引还可以获得来自硬件方面的提升，例如使用 GPU 和 TPU 等，而传统索引结构则无法利用这些优势。</p><p><strong>上面提到的访问 (Access) 和操作 (Operation) 的区别是什么？</strong></p><p>当我们询问索引 “Tim 在哪里” 时，我们实际是在询问这个辅助数据存储，我们可能会在已经加载进 RAM 内存的索引中通过 10 个 CPU 周期来回答这个问题，这其中包含了一系列操作，例如计算哈希编码、内存查找指定记录的偏移量等。而在这里，关于 Tim 的记录所在的辅助数据存储区实际上是位于硬盘中的，对于 RAM 芯片和硬盘这两个单独的物理设备而言，从硬盘中访问某些内容要比从 RAM 中访问某些内容的时间开销更大，因此 RAM 的全部目的就是充当一种数据缓存区的功能 (或许在这里使用 “缓存” 这个词并不恰当，因为 CPU 上也有专门被称为内存高速缓存的区域)。与硬盘相比，RAM 距离 CPU 更近，访问速度也更快。因此，当谈到 <strong>访问</strong> 时，我们指的是硬盘访问；而当我们谈到 <strong>操作</strong> 时，我们指的是可以在 CPU 中完成的事情，例如单精度浮点算术运算之类的东西。</p><h2 id="4-哈希表"><a href="#4-哈希表" class="headerlink" title="4. 哈希表"></a>4. 哈希表</h2><p>我们已经介绍了关于索引的一些基本概念，现在我们来看一下哈希表，它也是我们前面提到的两种主要的索引结构中的第一种。</p><h3 id="4-1-哈希函数"><a href="#4-1-哈希函数" class="headerlink" title="4.1 哈希函数"></a>4.1 哈希函数</h3><p>哈希表中的基本组件之一就是 <strong>哈希函数</strong>。我们接受任意数据，将其输入哈希函数，然后得到某个整数值。存在许多不同种类的哈希函数，包括密码安全哈希函数、非密码哈希函数、完美哈希函数等等。哈希表最重要的一点在于哈希函数产生了一个来自 <strong>均匀分布</strong> 的整数，因此，<strong>哈希表中的任何整数与其他数字出现的可能性一样</strong>。这一点至关重要，我们既可以将其与 Kraska 等人的论文中讨论的机器学习哈希进行比较，也可以用于一般性地考虑哈希函数。</p><p>哈希函数将任意数据确定性地映射为一个整数：</p><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-08-22-WX20200822-212001%402x.png" alt="img"></p><h3 id="4-2-哈希表"><a href="#4-2-哈希表" class="headerlink" title="4.2 哈希表"></a>4.2 哈希表</h3><p>哈希表索引将这些整数映射到相应的数据库记录的内存地址：</p><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-08-22-WX20200822-225626%402x.png" alt="img"></p><p>这些由哈希函数生成的整数被称为 <strong>哈希编码</strong>，它被作为哈希表中的查找 Key，所以哈希表本质上就是 Key-Value 对，其中，Key 就是这些整数，而 Value 就是实际存储在硬盘上的数据库中对应记录的内存地址。</p><h3 id="4-3-数据查找过程"><a href="#4-3-数据查找过程" class="headerlink" title="4.3 数据查找过程"></a>4.3 数据查找过程</h3><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-08-22-WX20200823-012448%402x.png" alt="img"></p><p>当我们询问哈希表 “Tim” 所在记录的位置时，我们将字符串数据 “Tim” 输入哈希函数，然后得到了一个整数 15，该整数将受我们已经为哈希表分配的空间大小的限制，因此，哈希表的空间是预先分配好的。然后，我们查看哈希表中 Key 为 15 的位置 (即图中最右侧的绿色格子)，而该位置的 Value (这里为 2) 即为数据库中 “Tim” 所在记录的偏移量。</p><p>因此，相比直接对整个数据库进行表扫描并检查每条记录直到找到匹配 “Tim” 的记录的做法，哈希表的查找过程实际上分为两步：我们只进行了一次常数时间复杂度 �(1) 的函数计算来得到 15 这个 Key，然后我们在 RAM 中直接对该位置进行单次查找，而 RAM 中该位置的 Value 则直接告诉我们去硬盘中相应的地址获取所需数据，这就是哈希表索引。</p><h3 id="4-4-哈希表的性能"><a href="#4-4-哈希表的性能" class="headerlink" title="4.4 哈希表的性能"></a>4.4 哈希表的性能</h3><p>哈希表作为索引，在性能方面具有以下特点：</p><ul><li>非常适用于单值查找，但对于范围查找表现很差。</li><li>查询时间复杂度为 �(1)，首先访问一次索引，然后访问一次内存。</li><li>插入和删除的时间复杂度为 �(1)，访问一次索引。</li><li>索引大小和利用率取决于所选择的哈希函数以及冲突处理策略，通常，哈希表的利用率大约在 50% 左右。</li></ul><p>首先，哈希表非常适合单值查找的场景，但不适用于范围查找，这是由于哈希函数本身特性造成的。我们知道，哈希函数只是生成一些服从均匀分布的随机整数，如果我们的输入不变，那么输出总是确定的 (例如对于输入 “Tim”，输出总是 15)，所以这里的随机并不是说它们像随机数生成器那样，而是说这些整数来自某个均匀分布，我们并不能预先知道 “Tim” 对应的哈希编码，我们需要通过计算哈希函数才能得到结果。所以，对于单值查询，这个过程非常快，我们只需要计算一次哈希函数即可。但是，这种方法并不适用于范围查询，因为对于哈希函数而言，两个不同输入 (例如 “2020-01-01” 和 “2020-01-31”) 之间并不存在任何关联，它只会返回两个完全不同的不相关的数字。因此，哈希表不适用于范围查询，例如日期范围或者名字以某个字母开头的所有用户的记录块等。</p><p>然后，哈希表的查询时间复杂度为 �(1)，所以这是一个常数时间操作：计算一次哈希编码、单次索引查找、单次记录查找。</p><p>另外，插入和删除记录的时间复杂度也是 �(1)，但是这里有一些注意事项，如果我们插入/删除/更改某条记录，我们只需要在计算哈希编码时将其加入哈希表，然后查找该位置，将其加入索引，我们就完成了对该索引的更新。</p><p>最后，索引大小和利用率会根据我们所选择的哈希函数和冲突处理策略的不同具有较大差异。例如，我们有线性探测、分离链接法、布谷鸟哈希等等各种冲突处理策略，但是这里我们不会对其进行展开，因为机器学习版的哈希表只是简单地将哈希函数本身用机器学习模型代替，所以，和常规哈希函数一样，我们仍然可以将这些经典的冲突处理策略与学习型哈希函数一起使用。通常，哈希表的利用率为 50% 左右，但是也有一些高性能的哈希函数或者哈希表可以达到 90% 甚至 95% 的利用率。</p><h3 id="4-5-注意事项"><a href="#4-5-注意事项" class="headerlink" title="4.5 注意事项"></a>4.5 注意事项</h3><p>对于哈希表索引，有些可能存在的陷阱需要注意：</p><ul><li>冲突处理策略的不同可能会带来相当大的性能差异。(线性探测 VS. 分离链接法 VS. 布谷鸟哈希)</li><li>对于插入操作，如果存在冲突过多或者表空间用尽的情况，可能会要求重建整个索引结构，而这同样也会对利用率造成影响。</li><li>哈希函数的选择可能会影响到冲突发生率和计算速度，而这会对查询速度和利用率造成影响。</li></ul><p>冲突处理策略的不同会导致很大差异，但是对于机器学习模型而言问题不大，因为它们可以使用和传统哈希表相同的冲突处理策略。</p><p>在某些情况下，插入操作可能需要我们重建整个索引。因此，大多数情况下插入记录是常数时间操作，但某些情况下可能会变为线性时间操作。</p><p><strong>为什么我们不能使哈希表的利用率尽可能高？</strong></p><p>这是一个非常复杂的问题，这里仅提供一些大致的考虑。当索引利用率越高时，哈希表会越趋近饱和，此时，每个新插入的项与表中其他已存在项发生冲突的概率会越大。例如，在之前的例子中，我们的哈希表的大小为固定的 16 个单元，每次我们加入新的项时，我们需要将对应的哈希编码加入 0-15 之间的某个单元中。如果我们向该哈希表中一共插入了 17 个项，那么将产生冲突，因为我们无法同时将两个对象存储在同一块内存地址中。所以，随着利用率上升，冲突发生的可能性就越大，而当两个项需要放置在哈希表的同一个槽中时，我们要么重建整个哈希表，要么必须采用某种冲突处理策略，例如前面提到的线性探测、分离链接法、布谷鸟哈希等，但是这些操作的开销都非常高，因为我们不能简单地把这些项加入表中，我们需要管理这些冲突，而这将降低索引的性能。</p><h2 id="5-B-树"><a href="#5-B-树" class="headerlink" title="5. B 树"></a>5. B 树</h2><h3 id="5-1-B-树的结构"><a href="#5-1-B-树的结构" class="headerlink" title="5.1 B 树的结构"></a>5.1 B 树的结构</h3><p>哈希表通常用于单点查询，而对于范围查询，最常见的索引结构是 B 树，其结构和二叉树非常相似，区别在于 B 树具有分支因子。</p><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-08-22-WX20200823-012137%402x.png" alt="img"></p><p>分支因子的一个常见取值是 100，即每个结点有 100 个子结点，因此，如果我们有 100 个项，我们可以使用单层的 B 树来表示数据；如果有 10,000 个项，我们可以使用两层的 B 树来表示数据；如果有 1,000,000 项，可以使用三层的 B 树来表示数据，以此类推。另外，我们也可以采取类似于二叉搜索树的表示方式对数据进行排序，即最左边的叶子结点总是排序项中的第一项，而最右的叶子结点总是排序项中的最后一项。</p><h3 id="5-2-B-树的查找过程"><a href="#5-2-B-树的查找过程" class="headerlink" title="5.2 B 树的查找过程"></a>5.2 B 树的查找过程</h3><p><strong>B 树的划分策略</strong>：每个结点都是一个由划分点组成的列表。假如我们有一些小写文本数据，这里每个结点只有 9 个项。我们从根结点开始查找相对粗粒度的分区 (所有以 “a” 开头的成员，所有以 “b-d” 开头的成员等等)，结点中的每个成员的值都是一个指向下一个粒度更细的结点的指针，例如：根结点中第一项 “a” 的值是一个指向下一个包含以 “a” 开头前两个字母 (例如 “aa-ab”、“ac-ad” 等) 的内部结点的指针；第二项 “b-d” 的值是指向另一个内部结点的指针等等。</p><p>根节点和每个内部节点都是指向整体数据的已排序部分的指针列表：</p><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-08-27-WX20200827-142052%402x.png" alt="img"></p><p>如果现在我们需要查找以 “ae-ag” 开头的数据，我们将从根结点开始，沿着对应项 “a” 中的指针到达另一个粒度更细的内部结点，然后再根据对应项 “ae-ag” 中的指针到达相应的叶子结点，其中包含 4 个项：“aeon”、“afar”、“afraid”、“agriculture”。</p><p>而最终叶子结点中的每一项的值都是一个指向硬盘上的数据库表中对应数据条目的地址偏移量，我们可以通过这种方式取回所有以 “ae-ag” 开头的数据。</p><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-08-27-WX20200827-150023%402x.png" alt="img"></p><p>由于索引是针对硬盘访问进行优化的，每个结点的大小通常取决于硬盘上的存储块的大小，通常为 512K。</p><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-08-27-WX20200827-150821%402x.png" alt="img"></p><p>对于数据的读取过程，由于它最初是针对硬盘访问进行优化的，因此，与使用 B 树进行硬盘访问相比，我们将在内存中执行更多的操作，并且与哈希表相比，操作数要更多。因此，此过程是我们将数据块读入RAM，就像根节点一样。然后，我们对该数据块进行迭代搜索直到找到匹配项，并且实际上，通常此迭代过程是对排序后的数据进行二分查找。因此我们将找到下一个要访问的数据块或结点，只是通过简单的快速扫描，然后我们将读取下一个数据块并将其作为 B 树中的下一个结点。重复此过程，直到到达叶子结点并找到我们正在寻找的数据。</p><p><strong>如果数据库中不存在 “j-p” 的记录，那么 B 树中会存在相应的结点吗？</strong></p><p>这取决于具体的实现细节。由于叶子结点的存储方式是完全排序的，有时，这些存储页会被提前分配，即会存在一个用于存储 “j-p” 之间的数据的空间，只不过该空间内是空的 (即 Root 结点中 “j-p” 的单元格是空的)，因此，当我们搜索 “j-p” 时，我们会知道不存在相应记录，所以会立即停止搜索过程。但是考虑到利用率，这些数据也有可能已经分配好了，所以存储页可能已经存在，只不过包含的都是空记录，当我们搜索到这些空记录时会发现所要查找的记录并不存在。</p><p><strong>在大部分 B 树实现中，不同内部结点中区间大小或者不同叶子结点中项的数量是否通常是相等的？</strong></p><p>是的，我们对于每个结点大小的分配是基于一次从硬盘中获取的数据量的大小。所以，它是针对硬盘访问高度优化的，硬盘中有一些相对标准的数据块大小，而 B 树是以此为基础构建的。虽然，这并非构建 B 树数据结构时的强制要求，但是大部分 B 树都是这样构建的。</p><p><strong>在上面的例子中，如果我们希望查找以 “ae-af” 开头的记录，应该如何实现过滤？</strong></p><p>首先，我们先进入 “ae-ag” 所指向的内部结点。然后，我们对其指向的所有叶子结点进行扫描直到碰到第一个不符合查询条件的叶子结点。所以，我们会发现 “aeon”、“afar” 和 “afraid” 都符合查询条件，而 “agriculture” 不符合条件，然后我们停止搜索，并返回之前的三个符合条件的记录即可。</p><p><strong>表扫描的范围不能太大，否则时间成本将很高，对吗？</strong></p><p>是的，这些结点的大小都相对较小。另外，虽然不是必须的，但是通常对于叶子结点，我们会采用二分查找，所以并不只是简单的表扫描。</p><p><strong>如果我们的数据库是可扩展的，那么 B 树可以设置为在给定一个利用率后可动态扩展吗？</strong></p><p>可以，B 树不一定具有固定的利用率，它可以扩展、增长和变化。</p><p><strong>为什么一个叶子结点中的索引数量和一个硬盘中的存储块大小相关？</strong></p><p>在上面的例子中，“aeon”、“afar”、“afraid” 和 “agriculture” 这 4 个项都在同一个叶子结点中，而该叶子结点的大小是固定的，具体取决于硬盘的存储块大小。例如，如果满足条件以 “ae-ag” 开头的记录不足一个块大小 (512K)，那么该叶子结点中可能会存在空闲空间。但是，单个叶子结点中允许的最大实体数量是固定的。也就是说，对于单个叶子结点，我们会分配给其一个块大小 (512K) 的内存空间 (虽然其中某些槽可能是空的)，除了该结点外，其他对象无法使用该内存空间。</p><p><strong>所有这些结点都在磁盘上吗？</strong></p><p>是的，对于主流数据库，所有这些结点通常都在磁盘上。所以，访问根结点就是一次磁盘访问的过程，然后通过扫描该结点中的实体， 我们找到接下来应该访问磁盘中O�(log⁡�)，和查询一样。</p><ul><li>索引大小和利用率取决于每个结点的大小、树的整体平衡度以及每个结点的饱和程度。</li></ul><p>首先，与哈希表相比，B 树非常适合范围查询。例如，假如我们要查找所有 “au-az” 开头的记录，我们只需要访问所有 “au-av”、“aw-ax”、“ay-az” 这三个内部结点所对应的最终叶子结点即可，并且 B 树的结构可以使得整个过程非常高效。</p><p>然后，B 树的查询时间复杂度为 �(log⁡�) 次的磁盘访问，但需要注意的是，每当我们进行一次磁盘访问时 (即访问 B 树中的一个结点)，我们都会扫描一个磁盘存储块的大小。当我们到达最终的叶子结点时，我们应该已经找到了所需的记录，整个过程包含了 log⁡� 次查询。</p><p>另外，B 树中插入和删除的的时间复杂度也是 �(log⁡�)，同样需要注意的是，和哈希表类似，某些情况下插入和删除记录可能会导致需要重建整个或者部分索引结构，或者重新平衡 B 树，这些可能会导致更高的计算时间开销。</p><p>最后，索引大小和利用率根据数据量的大小变化会非常大。例如，假设我们有 9K 条记录，我们可以用三层的 B 树表示这些数据。但是一旦我们有了 10K 加 1 条记录，并且每个结点包含 100 条记录，那么我们需要为最后多出来的一条记录在 B 树中构建整个下一层的结点并分配相应的空间。</p><h3 id="5-4-注意事项"><a href="#5-4-注意事项" class="headerlink" title="5.4 注意事项"></a>5.4 注意事项</h3><p>对于 B 树索引，有些可能存在的陷阱需要注意：</p><ul><li>B 树必须是相对平衡的，否则其性能无法达到 �(log⁡�)。</li><li>对一个已经饱和的结点进行插入操作将导致该结点 “分裂” 为两个新结点，这会导致额外的计算开销，并且两个新结点的利用率将都比较低 (大约 50%)。</li><li>删除一个结点可能会导致高计算开销的重新平衡操作。</li></ul><p>如果我们没有很好地构建 B 树 (当然，如今由于已经有很多良好的开源实现，很少会发生这种情况)，我们可能会得到一个近似链表结构的 B 树，这种极端不平衡的情况下，我们将无法达到预期的 �(log⁡�) 时间复杂度。</p><p>另外，插入、删除、更新等操作有可能导致重新平衡 B 树或者重新分裂结点，甚至重构整个索引结构，这些都会带来额外的计算开销。</p><h2 id="6-学习索引"><a href="#6-学习索引" class="headerlink" title="6. 学习索引"></a>6. 学习索引</h2><p>2018 年，一项由 Google 和 MIT 合作的研究探索了将机器学习应用于索引结构的想法。</p><p>论文地址：<a href="https://arxiv.org/abs/1712.01208">https://arxiv.org/abs/1712.01208</a></p><h3 id="6-1-哈希表和-B-树只是模型"><a href="#6-1-哈希表和-B-树只是模型" class="headerlink" title="6.1 哈希表和 B 树只是模型"></a>6.1 哈希表和 B 树只是模型</h3><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-08-27-WX20200827-233052%402x.png" alt="img"></p><p>这篇论文的关键见解是：哈希表和 B 树都只是模型。这些模型可以将我们所感兴趣的条目的 Key 映射到某个相应的内存地址，而这本质上只是一个数据的 CDF (累积分布函数) 上的回归问题。</p><h3 id="6-2-范围索引只是-CDF"><a href="#6-2-范围索引只是-CDF" class="headerlink" title="6.2 范围索引只是 CDF"></a>6.2 范围索引只是 CDF</h3><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-08-27-WX20200828-000726%402x.png" alt="img"></p><p>我们可以只是模拟一个函数，它接受 Key 作为输入，然后我们将该函数的输出 (0 到 1 之间的某个值，代表 CDF) 乘以索引中的元素总数，我们将得到估计的位置。</p><p>基于这种思路，作者首先构建了一种非常朴素的索引结构，但是效果较差，但是最终在经过一些实验后，作者提出了一些让这些机器学习模型更好地工作的方式。</p><h3 id="6-3-机器学习模型存在的问题"><a href="#6-3-机器学习模型存在的问题" class="headerlink" title="6.3 机器学习模型存在的问题"></a>6.3 机器学习模型存在的问题</h3><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-08-27-WX20200828-002642%402x.png" alt="img"></p><p>作者的第一个发现的问题是：机器学习模型不能很好地提供精确的答案。虽然，目前机器学习模型的性能正在变得越来越好，并且能够为我们的问题提供一个近似答案。但是，对于索引系统而言，近似答案还不够好，我们需要确切地知道所查找的记录在内存中的位置，否则我们将无法检索出正确记录。如果我们只是接受一个大概的位置，那么每次当我们请求 Tim 的记录时，我们可能会得到 Ted 或者 Tin 的记录 (或者其他一些不相关的记录)，而这样的结果实际上并没有什么用。因此，对于要充分用作索引结构的机器学习模型，我们必须解决这个近似问题。</p><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-08-27-WX20200828-004613%402x.png" alt="img"></p><p>作者是通过这种方式解决这一问题的：<strong>同时存储所使用的每个机器学习模型在训练数据上的最小误差和最大误差</strong>。</p><p>请注意，这种情况并非常见的机器学习研究场景：<strong>在这种特定情况下，训练数据同时也是测试数据</strong>。因为对于索引结构而言，它只需要处理我们已经加入索引中的数据，因此，当我们构建预测模型时，我们就已经拥有了它必须处理的所有数据。</p><p>对于机器学习人员而言，从某些方面来看这是一个好消息，因为现在我们不必担心过拟合问题，并且 <strong>实际上我们的目标正是过拟合</strong>：我们要使模型完全拟合所拥有的数据，而并非去考虑一些可能会出现的假设数据。</p><p>虽然，对于这类 <strong>只读内存数据库 (Read-only In-memory Databases)</strong> 而言，以上观点是正确的。但实际上，对于具有大量写工作负载或者只要涉及到写操作的数据库而言，这是一个巨大的问题。因为每当有新数据输入时，我们都有可能需要重新训练整个模型，而这显然是有问题的。因此，这是一个有待进一步研究的方向，作者在论文中并未尝试解决这方面的问题。</p><p>重点是，我们必须为每条记录，或者说训练机器学习模型所用到的整个数据集，存储最小误差和最大误差。然后，我们将得到一个 <strong>有界问题 (Bounded Problem)</strong>。因此，我们首先得到所要查找的记录在内存中的大概位置，然后只需要在基础数据库中使用二分查找或者其他搜索算法来查找我们感兴趣的记录即可，作者在论文中还提到了一些其他的搜索策略，但是通常而言，二分查找是最强大的。</p><p><strong>过拟合和仅建立一个完整索引有什么区别，这对于不在完整索引中的新数据有帮助吗？</strong></p><p>论文中对于第二个问题的答案尚不清楚，因为作者并没有尝试过考虑哪些数据可能会加入索引。因此，如果我们有一个完全过拟合的机器学习模型，即模型已经完全记住了训练数据，那么它将是一个完美且完整的索引。作者在论文中进行了一些相关尝试，目前来看，与经典索引结构相比，学习索引至少在时间框架上具有一定的竞争力。</p><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-08-27-WX20200828-022149%402x.png" alt="img"></p><p>作者有时甚至针对学习问题的某些部分使用非常简单的线性回归模型，但这并不是内存中位置不够精确导致的唯一问题。 因此，内存中位置不够精确导致的第二个问题是：机器学习模型并非超级精确，我们可能需要一个非常复杂的模型来训练一亿条记录并获得精确的答案，以便从这一亿条记录中找到该数据对应的 CDF 的位置。</p><h3 id="6-4-递归模型索引-Recursive-Model-Index-RMI"><a href="#6-4-递归模型索引-Recursive-Model-Index-RMI" class="headerlink" title="6.4 递归模型索引 (Recursive Model Index, RMI)"></a>6.4 递归模型索引 (Recursive Model Index, RMI)</h3><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-08-28-WX20200828-182355%402x.png" alt="img"></p><p>作者并没有选择构建一个大型的复杂模型，而是构建了一个层次框架，并采用了一种类似于网格搜索的方法来为框架中的每个模型构建单独的参数。图中每一个方框都代表一个不同的单独训练的机器学习模型，该模型通常很小。作者在框架顶层使用了一个包含 2 个隐藏层的神经网络，当需要查询一条记录时，位于根结点的机器学习模型将预测在下一层中应该使用哪个机器学习模型来回答 “该记录在内存中的什么位置” 这一问题。作者尝试了不同层数的框架和模型，发现仅仅采用 2 层系统就能够获得最佳效果 (至少该设置在论文中是最成功的)。因此，在该框架下，一个机器学习模型会选择下一个单独的机器学习模型来完成 “最后一英里” 的工作，并预测记录在内存中的实际位置。</p><p>该层次模型的重点在于，我们可以训练一个简单的非常快速的推理模型，从而使我们逐步到达目标记录的位置。 因此，顶层模型将空间一分为二，作者在第二层中使用了大于 10,000 个简单模型，并且实验效果相当不错。因此，作者提出的是一个框架，其中包含了网格搜索和混合模型方法，其中所有这些模型可以是不同类型的模型，其中某些可能是神经网络，某些可能是线性回归，在某些情况下，甚至可以使某些机器学习模型实际上只是标准的 B 树实现。因此，当某种数据分布对于简单机器学习模型而言具有挑战性时，我们可以使用 B 树来解决此问题。</p><p><strong>是否可以使用随机森林模型代替神经网络？</strong></p><p>在论文中，作者并没有使用随机森林模型，而是采用了小型的简单神经网络进行了实验，该网络具有两个隐藏层，总共多达 32 个节点，并且作者尝试了一些不同的组合，例如：1 个隐藏层 8 个节点、1 个隐藏层 16 个节点、1 个隐藏层 32 个节点、2 个隐藏层每个 8 个节点等等，并且使用网格搜索策略确定合适的参数尺寸。但是，作者并没有尝试使用随机森林，当然，这将是一个有趣的研究领域，我们可以进行这种尝试以找出还有哪些其他类型的机器学习模型可能适用，尤其是在此层次模型结构的每一层。</p><p><strong>这种多层简单模型是如何构建的？不同层上的模型应该如何排列？</strong></p><p>基本上，作者采用的是网格搜索策略。作者提出的训练过程几乎像是对各种可能性进行网格搜索一样，因此他们构建了许多不同样式的模型，并且尝试了许多组合，直到找到一个在数据集上表现良好的组合，然后再将最优组合和基准进行对比测试。</p><h3 id="6-5-学习哈希函数-Learned-Hash-Function"><a href="#6-5-学习哈希函数-Learned-Hash-Function" class="headerlink" title="6.5 学习哈希函数 (Learned Hash Function)"></a>6.5 学习哈希函数 (Learned Hash Function)</h3><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-08-28-WX20200828-203726%402x.png" alt="img"></p><p>对于非范围查询，作者尝试替换点对点查询中的哈希函数，而不是尝试替换哈希表的全部相关内容 (例如冲突处理策略等等)。如上图所示，使用下方的机器学习模型 (由多个机器学习模型组成的层次系统) 替换哈希函数本身，然后我们得到的这个 <strong>学习哈希函数 (Learned Hash Function)</strong> 将能够考虑数据分布，并且 (但愿) 最终减少基础哈希表中的冲突，而标准的经典哈希函数就其本质而言不可能做到这点。</p><h3 id="6-6-实验结果"><a href="#6-6-实验结果" class="headerlink" title="6.6 实验结果"></a>6.6 实验结果</h3><p>论文作者主要关注简单模型，这篇论文是一个概念上的证明：</p><ul><li>作者主要关注小型全连接神经网络</li><li>主要关注一次创建、只读、内存数据结构</li><li>对于具有大量写工作负载的场景，这些模型存在很大问题，而论文作者并没有尝试解决这些问题。</li></ul><p>这里，我们将总结论文中的一些结果，如果希望知道更多相关细节 (例如：RMI 模型的损失函数如何选择、训练过程如何实现等)，请参阅论文原文。</p><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-08-28-WX20200828-220833%402x.png" alt="img"></p><p>作者首先比较了 B 树和学习索引在三个不同类型的数据集上的性能差异。对于这两种索引结构，作者对具有不同页面大小的 B 树和具有不同阶段二模型大小的学习索引 (两层模型，根结点用于预测第二层的 10K 到 200K 个简单模型) 进行了对比。</p><p>第一个数据集是地图数据，其中的 Key 是经度值，该数据可能来自 Google 地图 (因为该论文是与 Google 合作的，所以作者应该能够得到相关的地图数据)。论文中给出了更多相关细节，但总的来说，它们只是以经度作为 Key 的来自真实世界的数据。</p><p>第二个数据集是 Web 数据，它是由时间戳作为 Key 的 Web 日志记录 (来自 MIT 网站)。因此，对于经典索引结构而言，这确实是非常棘手的数据，因为这类数据的分布通常非常复杂：像班级时间表、假期等等所有这些奇怪的难以预测的东西都会被添加到这些时间戳中，非节假日或者期末考试期间，网站访问记录会比平时更多，所以它们对应的时间戳会包含更多的记录。</p><p>最后，作者还创建了一个人工数据集，通过对数正态分布生成了一个包含数百万条记录的数据集。</p><p>如上图结果所示，值得注意的是，和 B 树相比，学习索引的大小 (以 MB 为单位）减小了多少。可以看到，最小的 B 树与最大的学习索引模型一样大。因此，这是一个非常有趣的发现：我们可以用更少的内存来换取相对可观的性能。注意到 Jeff Dean 也是这篇论文的署名作者之一，上述结果项的比较应该是比较合理的，未来可以在此基础上进行进一步研究。可以看到，和 B 树相比，学习索引的内存占用量明显减少，并且在查询速度方面，在地图数据集上的速度提高了 2 到 3 倍左右；Web 数据集上的提升略小 (因为该数据分布很复杂)，只有 1.1 到 2 倍；类似地，在对数正态分布的人工数据上提升了大约 1.5 倍。该层次模型的所有不同参数组合上的性能改进都相对一致，值得进一步研究，并且我们对于这些模型能够达到多小很感兴趣。</p><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-08-28-WX20200829-003608%402x.png" alt="img"></p><p>对于论文中哈希表的相关工作，作者并没有对哈希表进行实质上的比较。因为，正如我们之前提到过的，我们可以使用相同的哈希表基础结构，因此作者在这里仅比较了冲突发生率。而且我们注意到，对于第一个地图数据集，冲突发生率仅为 7.9%，这意味着机器学习模型能够很好地学习到该基础经度数据的分布，从而显着减少了发生冲突的次数。对此，作者在论文中并没有提供相关图表，但的确指出了这点。</p><p>需要注意的是，与标准哈希函数相比，学习模型需要更长的时间用于计算，因此在此基础上还有更多工作要做。与非常高效的标准哈希函数相比 (类似 2 次乘法和 1 次移位运算)，学习模型在推理上的计算开销较高。因此，如果没有采用专门的加速硬件 (例如 GPU)，冲突减小了 77.5％ 这个数据看上去还是不错的。因此，在某些情况下，尤其是对于冲突非常昂贵的场景，这种学习哈希索引策略可能会很有用。</p><h3 id="6-7-总结"><a href="#6-7-总结" class="headerlink" title="6.7 总结"></a>6.7 总结</h3><p>最后，我们再总结几点：</p><ul><li><p>事实证明，将数据分布考虑进去可以使模型变得更好：</p><ul><li>B 树和哈希表没有考虑数据的分布，这会对索引利用率产生负面影响。</li><li>机器学习模型从本质上考虑了数据的分布，这可以帮助提高索引利用率。</li></ul></li></ul><ul><li><p>从某种程度上看，在学习索引中，过拟合是我们的目标：</p><ul><li>索引结构永远不需要预测那些尚未建立索引的数据的位置。</li><li>对索引中的数据进行准确的预测要比泛化到保留数据集上更重要。</li></ul></li></ul><ul><li><p>误差边界要比平均误差更重要：</p><p><img src="http://andy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-08-28-WX20200829-010343%402x.png" alt="img"></p><p>表扫描将在最小误差边界和最大误差边界之间进行，因此，从对查询性能方面的影响考虑，相比如何使得猜测的位置更加准确，实际上我们更加关心的是如何缩小这个误差范围。所以这是另一种有趣的权衡，在一般的机器学习研究中我们通常不必考虑这点，至少并不总是需要将其作为目标，有时我们的目标只是为了使猜测尽可能准确，尤其是对于一般的分类问题而言。</p></li></ul><ul><li><p>关于扩展的有趣特性：</p><ul><li>标准索引结构的大小会随着输入数据的增长而增长。</li><li>机器学习模型的大小不必随数据增长而增长，它只需要足够的复杂度即可生成 N 个值作为输出。</li></ul></li></ul><ul><li><p>利用新硬件的优势：</p><ul><li>摩尔定律正在日渐衰亡，传统索引结构并不能很好地适应并行化。</li><li>机器学习工作负载是当前硬件发展的主要驱动力，这意味着学习索引可以更好地利用新硬件的优势。</li></ul></li></ul><ul><li><p>多维索引：</p><ul><li>传统索引结构仅考虑某些数据的单个特征。</li><li>学习型索引结构可以跨多个维度建立索引，允许立即应用各种查询和过滤器。</li><li>这得益于机器学习在识别高维关系方面的能力。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习型索引 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习型索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LearnedIndex-Lab</title>
      <link href="posts/30bd.html"/>
      <url>posts/30bd.html</url>
      
        <content type="html"><![CDATA[<h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>传统的索引，如 哈希的点查询、B 树的范围查询还是位图的存在性查询，其本质都是给定一个 key，返回该 key 对应的数据位置position，这本质就是一个 model。所以，我们可以尝试使用 ML 中的经典回归模型，如：线性回归、支持向量机、决策树、神经网络等来拟合单变量 key 与 position 之间的函数关系。同样的，我们也可以将模型推广到多维（多变量）甚至高维以构建多维数据甚至高维数据索引。</p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>B树啥的都有多层，所以ML也训练多层，即分层训练（目前就两层），先训练最顶层，然后进行数据分发，再训练底层。具体地，上层将 key 预测到具体的下层，该下层就拥有这条训练数据。随着层数的加深，以及每一层模型数量的提升，每个越底层模型拥有的训练数据就越少。这样的优点是底层模型可以非常容易的拟合这一部分数据的分布；缺点是较少的数据量带来了模型的选择限制，复杂模型没法收敛。实践中，越简单的模型越好。</p><p>上层预测的 key 可由：预测值 * 下一层模型总数 / 最大的position 下取整获得其该分发给下层哪个模型。</p><h1 id="生成数据集训练模型"><a href="#生成数据集训练模型" class="headerlink" title="生成数据集训练模型"></a>生成数据集训练模型</h1><h2 id="生成数据集"><a href="#生成数据集" class="headerlink" title="生成数据集"></a>生成数据集</h2><pre class=" language-lang-python"><code class="language-lang-python">import randomimport numpy as npimport pandas as pdnum_data = 10000    # 数据量paras = [0, 30000.0]  # 均匀分布上下限random.seed()  # 定义随机种子datasets = []  # 定义数据集low_range, max_range = paras[0], paras[1]  # 均匀分布上下限length = max_range - low_range# 生成满足均匀分布的 num_data 个数的数据集for i in range(num_data):    datasets.append(int(low_range + random.random() * length))# 从小到大进行排序: learned index 要求 key 有序datasets = sorted(datasets)position = [i for i in range(len(datasets))]  # 模拟生成 key 对应的 local_local_local_local_local_local_local_local_positiondatasets = np.column_stack((np.array(datasets), np.array(position)))df = pd.DataFrame(data=datasets, columns=["key", "position"])df.to_csv("output.csv")# 值得注意的是:均匀分布随机生成的key可能有重复，实际中，数据可能跨页存储，所以key对应的position也可能有多个（个人理解）</code></pre><h2 id="索引实现"><a href="#索引实现" class="headerlink" title="索引实现"></a>索引实现</h2><pre class=" language-lang-xml"><code class="language-lang-xml">首先，通过一个两层的循环遍历所有的训练阶段和模型。在每个阶段中，为每个模型添加一个空列表。如果不是最后一个阶段，则需要为下一个阶段初始化数据集。创建一个空的next_key列表和next_pos列表，长度为下一个阶段的模型数量。在当前阶段的每个模型中，进行模型的初始化操作。根据给定的隐藏层数量和每层神经元数量，创建一个神经网络模型。定义代价函数和优化器，分别使用均方误差作为代价函数，并使用Adam算法进行优化。通过torch_data.DataLoader从数据集ds中按照批次大小为64加载当前阶段当前模型对应的样本数量。在最多迭代1000次的循环内，进行模型的训练。从数据加载器中依次提取keys和pos。进行模型的前向传播，得到输出结果。计算损失值（均方误差）并进行反向传播和参数更新。在每次迭代后，计算当前获取的数据集的总损失值。通过设置torch.set_grad_enabled(False)将梯度计算禁用，以提高计算效率。判断是否满足早停条件，即当前迭代的损失值大于上一次迭代的损失值，或者两次迭代的损失值之差与上一次迭代的损失值之比小于0.001。绘制各阶段各模型的损失函数图，展示训练过程中损失值的变化情况。将训练好的模型添加到模型树中。如果不是最后一个阶段，则开始上层模型向下层模型分发数据集。遍历数据加载器中的每个样本，计算下一阶段应该分配给哪个模型。使用当前模型对当前样本的输出值进行处理，根据输出值、下一阶段模型的数量和最大位置来计算模型的选择。将当前样本添加到对应的数据集中。为下一个阶段创建对应的数据集，将next_key和next_pos加载进去。重复以上步骤，直到完成所有的训练阶段和模型的训练。</code></pre><h3 id="导入相关依赖"><a href="#导入相关依赖" class="headerlink" title="导入相关依赖"></a>导入相关依赖</h3><pre class=" language-lang-python"><code class="language-lang-python">import torchimport torch.nn as nn  # 方便使用 全连接层import torch.utils.data as torch_data  # 方便数据处理import warningsfrom matplotlib import pyplot as pltwarnings.filterwarnings("ignore")  # 忽略警告信息plt.rcParams["font.sans-serif"] = ["SimHei"]  # 显示中文plt.rcParams["axes.unicode_minus"] = False  # 显示负数</code></pre><h3 id="定义相关类"><a href="#定义相关类" class="headerlink" title="定义相关类"></a>定义相关类</h3><pre class=" language-lang-python"><code class="language-lang-python"># 定义数据集类方便处理数据class Dataset(torch_data.Dataset):    def __init__(self, keys_list, pos_list):        self.keys = keys_list   # 定义键集合        self.pos = pos_list     # 定义 position集合    def __len__(self):        return len(self.keys)  # 获取keys长度    def __getitem__(self, index):        return self.keys[index], self.pos[index]  # 获取指定 index 的 item(key, value)# 继承 nn.Module 方便自定义 BP 模型class Network(nn.Module):    def __init__(self, hidden_num, hidden_size):  # 隐藏层数量, 每个隐藏层神经元数量        super(Network, self).__init__()        self.hidden_num = hidden_num        self.fc = []  # 存储全连接层        self.relu = []  # ReLU 激活函数        input_size = 1  # 前一层大小(亦为当前层大小)        for fc_idx in range(hidden_num):            self.fc.append(nn.Linear(input_size, hidden_size[fc_idx]))  # 添加全连接层            self.relu.append(nn.ReLU())  # 添加 ReLU 激活函数            input_size = hidden_size[fc_idx]  # 当前层的输出是下一层的输入        # 创建输出层，其输入维度为最后一个隐藏层的输出维度，输出维度为1        self.last = nn.Linear(input_size, 1)    # 定义前向传播函数    def forward(self, x):        out = x        for fc_idx in range(self.hidden_num):            # 通过循环将输入x依次传递给全连接层和ReLU激活函数            out = self.fc[fc_idx](out)            out = self.relu[fc_idx](out)        out = self.last(out)  # 将输出传递给输出层        return out</code></pre><h3 id="定义相关变量"><a href="#定义相关变量" class="headerlink" title="定义相关变量"></a>定义相关变量</h3><pre class=" language-lang-python"><code class="language-lang-python"># 加载数据集datasets = pd.read_csv("output.csv", header=0, names=["key", "position"])# 将 Serious 数据转换成 PyTorch tensor 张量keys = [torch.Tensor([x]) for x in datasets["key"].values]pos = [torch.Tensor([x]) for x in datasets["position"].values]# 第一个阶段加载所有数据ds = [[Dataset(keys, pos)]]  # ds 2 维: 行表示阶段,行内表示每阶段模型所需数据集---动态扩容torch.set_num_threads(8)  # 设置运行计算 线程数 16device = torch.device("cpu")  # 运行在 CPU 上(有服务器的可运行在 GPU 上)models = []  # 2-dim: 定义不同阶段采用的模型model_nums = (1, 8)  # 定义不同阶段的模型数量(此处只有两个阶段: 第一个阶段1个模型,第二个阶段8个模型)model_params = ((2, [4, 8]), (2, [4, 8]))  # 定义不同阶段模型参数: hidden_num, hidden_sizemax_pos = len(keys)  # 索引(位置) 的最大值, 方便确定下一阶段采用哪个模型stage_nums = len(model_nums)  # 阶段数量，论文图示为3个阶段，修改 model_nums、model_params 即可</code></pre><h3 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h3><pre class=" language-lang-python"><code class="language-lang-python"># 创建一个2x9的子图布局# fig, axs = plt.subplots(2, 8)for stage_index in range(stage_nums):  # 遍历所有训练阶段---目前就两个阶段    models.append([])  # 为每个阶段添加训练模型    if stage_index != stage_nums - 1:  # 判断是否是最后一个阶段        # 不是最后一个阶段时,需要为下一个阶段初始化数据集        next_key = [[] for i in range(model_nums[stage_index + 1])]        # 此处下一个阶段有8个模型，每个模型都需要key、pos,故需要初始化8个空的key、pos:2-dim,每个模型对应的数据集        next_pos = [[] for i in range(model_nums[stage_index + 1])]    for model_index in range(model_nums[stage_index]):  # 当前阶段模型训练数量        error_mean = {}    # 记录每阶段每个模型的loss信息以便绘图        # 初始化模型, 两个参数: 对应隐藏层数量, 每个隐藏层神经元数量        model = Network(model_params[stage_index][0], model_params[stage_index][1]).to(device)        criterion = nn.MSELoss()  # 代价函数使用均方误差MSE        optimizer = torch.optim.Adam(model.parameters(), lr=0.001)  # 优化器使用 adam 算法, 学习率0.001        # 从ds中按照批次大小为64加载当前阶段当前模型对应的样本数量，有序故不能打乱        data_gen = torch_data.DataLoader(ds[stage_index][model_index], batch_size=64, shuffle=False)        last_loss = float("inf")  # 早停: loss 停止下降, 模型就停止训练        # 打印i阶段j模型训练的数据量信息        print("Stage={}, Model={}, 训练集: {} 个样本".format(stage_index, model_index, len(ds[stage_index][model_index])))        # 迭代最多 1000 次        for epoch in range(1000):            print("Epoch", epoch)  # 打印当前迭代次数（epoch）            # 模型训练            for local_keys, local_pos in data_gen:  # 从数据加载器中依次提取keys、pos                # 将 key 和 pos 移动到指定的设备上                local_keys, local_pos = local_keys.to(device), local_pos.to(device)                # 使用模型对输入数据进行前向传播，得到输出结果（outputs）                outputs = model(local_keys)                # print(outputs)                # 计算损失值---MSE                loss = criterion(outputs, local_pos)                # print("损失值为: ", "===", loss)                optimizer.zero_grad()  # 清空优化器的梯度缓存,                loss.backward()  # 然后进行反向传播                optimizer.step()  # 计算梯度并更新模型参数            # 计算当前迭代下当前获取的数据集的总损失值            with torch.set_grad_enabled(False):  # 设置梯度计算为禁用状态                loss_sum = 0.0  # 总损失值                for local_keys, local_pos in data_gen:                    local_keys, local_pos = local_keys.to(device), local_pos.to(device)                    outputs = model(local_keys)                    loss = criterion(outputs, local_pos)                    loss_sum += loss.item()                print("Loss:", loss_sum / len(ds[stage_index][model_index]))  # 打印总平均损失值                error_mean[epoch] = loss_sum / len(ds[stage_index][model_index])                if ((loss_sum - last_loss) > 0) or (abs(last_loss - loss_sum) / last_loss < 0.001): # 如果后一次比前一次大或者两次迭代比率小于lr均停止迭代                    break                else:                    last_loss = loss_sum   # 更新loss        # 绘制各阶段各模型的损失函数图        # axs[stage_index, model_index].plot(error_mean.keys(), error_mean.values())        # axs[stage_index, model_index].set_title("Loss of S{},M{}".format(stage_index, model_index))        plt.plot(error_mean.keys(), error_mean.values())        plt.title("Loss of Stage_{},Model_{}".format(stage_index, model_index))        plt.show()        models[stage_index].append(model)  # 将训练好的模型添加到模型树中        # 开始上层 Model 向下层 Model 分发数据集        if stage_index != stage_nums - 1:  # 若还不是最后一个阶段            # 根据当前阶段和模型的索引，从数据集中加载样本            data_gen = torch_data.DataLoader(ds[stage_index][model_index], batch_size=1, shuffle=False)            for local_keys, local_pos in data_gen:  # 遍历数据加载器中的每个样本                local_keys, local_pos = local_keys.to(device), local_pos.to(device)                # 计算下一阶段应该分配给哪个模型: 使用当前模型对当前样本的输出值进行处理，                # 根据输出值、下一阶段模型的数量和最大位置来计算模型的选择                output = model(local_keys)                # 预测的pos*下一个阶段模型总数/最大的pos--->下取整                model_select = int(output.item() * model_nums[stage_index + 1] / max_pos)                if model_select >= model_nums[stage_index + 1]:  # 超过上限取上限                    model_select = model_nums[stage_index + 1] - 1                elif model_select <= 0:  # 小于下限取下限                    model_select = 0                # 根据模型的选择，将当前样本添加到对应的数据集中                next_key[model_select].append(local_keys)                next_pos[model_select].append(local_pos)    # 为下一个阶段创建对应数据集    if stage_index != stage_nums - 1:        ds.append([])  # 扩容---增加一行        for next_model_index in range(model_nums[stage_index + 1]):            ds[stage_index + 1].append(Dataset(next_key[next_model_index], next_pos[next_model_index]))  # 将对应数据集加载进去</code></pre><h3 id="训练结果"><a href="#训练结果" class="headerlink" title="训练结果"></a>训练结果</h3><pre class=" language-lang-xml"><code class="language-lang-xml">Stage=1, Model=0, 训练集: 1256 个样本Epoch 0Loss: 27719.089567731142......Epoch 96Loss: 1.5727592304254034Epoch 97Loss: 1.5714545656161703</code></pre><img src="/posts/30bd/image01.png" class title="img1"><pre class=" language-lang-xml"><code class="language-lang-xml">Stage=1, Model=1, 训练集: 1263 个样本Epoch 0Loss: 42152.201207442595......Epoch 134Loss: 4.268974411421509Epoch 135Loss: 4.265463400906452</code></pre><img src="/posts/30bd/image02.png" class title="img2"><pre class=" language-lang-xml"><code class="language-lang-xml">Stage=1, Model=2, 训练集: 1243 个样本Epoch 0Loss: 236817.26387771522......Epoch 125Loss: 0.8422801908905815Epoch 126Loss: 0.8416047759911559</code></pre><img src="/posts/30bd/image03.png" class title="img3"><pre class=" language-lang-xml"><code class="language-lang-xml">Stage=1, Model=3, 训练集: 1310 个样本Epoch 0Loss: 775904.1709923664......Epoch 57Loss: 3.1448414471313244Epoch 58Loss: 3.1428348242781543</code></pre><img src="/posts/30bd/image04.png" class title="img4"><pre class=" language-lang-xml"><code class="language-lang-xml">Stage=1, Model=4, 训练集: 1203 个样本Epoch 0Loss: 782197.6059850374......Epoch 104Loss: 12.20371767013943Epoch 105Loss: 12.193250914563365</code></pre><img src="/posts/30bd/image05.png" class title="img5"><pre class=" language-lang-xml"><code class="language-lang-xml">Stage=1, Model=5, 训练集: 1237 个样本Epoch 0Loss: 912518.8100242523......Epoch 252Loss: 2.42460509896182Epoch 253Loss: 2.422264087171254</code></pre><img src="/posts/30bd/image06.png" class title="img6"><pre class=" language-lang-xml"><code class="language-lang-xml">Stage=1, Model=6, 训练集: 1277 个样本Epoch 0Loss: 1886042.2803445575......Epoch 81Loss: 1.573664175315863Epoch 82Loss: 1.572465995185153</code></pre><img src="/posts/30bd/image07.png" class title="img7"><pre class=" language-lang-xml"><code class="language-lang-xml">Stage=1, Model=7, 训练集: 1211 个样本Epoch 0Loss: 1195227.937241949......Epoch 297Loss: 2.0064403804051394Epoch 298Loss: 2.0046200957010836</code></pre><img src="/posts/30bd/image08.png" class title="img8"><hr><h3 id="模型测试"><a href="#模型测试" class="headerlink" title="模型测试"></a>模型测试</h3><pre class=" language-lang-python"><code class="language-lang-python">test_ds = Dataset(keys, pos)  # 创建数据集 test_ds# 创建数据加载器 test_gen，每次只加载一个样本test_gen = torch_data.DataLoader(test_ds, batch_size=1, shuffle=False)err_sum = 0  # 模型树总的 errorfor local_keys, local_pos in test_gen:  # 遍历 数据加载器    local_keys, local_pos = local_keys.to(device), local_pos.to(device)    model_select = 0  # 默认选择模型0    for stage_index in range(stage_nums):        model = models[stage_index][model_select]  # 当前阶段下的模型        output = model(local_keys)  # 计算当前模型的输出        if stage_index != stage_nums - 1:  # 如果不是最后一个阶段            # 根据输出值、下一阶段模型的数量和最大位置来计算模型的选择            model_select = int(output.item() * model_nums[stage_index + 1] / max_pos)            if model_select >= model_nums[stage_index + 1]:  # 超过上限取上限                model_select = model_nums[stage_index + 1] - 1            elif model_select <= 0:  # 小于下限取下限                model_select = 0        else:            # 分别获取 output 和 pos 张量中的标量值,然后转换为整数类型计算它们的差值            err_sum += abs(int(output.item()) - int(local_pos.item()))  # 最后一个阶段,累加预测值-真实值print("Final Loss:", float(err_sum) / len(test_ds))  # 输出总的误差均值</code></pre><pre><code>Final Loss: 11.5413</code></pre><h2 id="改进策略"><a href="#改进策略" class="headerlink" title="改进策略"></a>改进策略</h2><p>这里运用了全连接层的BP进行简单地回归预测，亦可以根据具体实例采用适当的回归算法进行拟合，以提高精度；或者再增加一层，适当扩大每层的模型数，但这样会增加训练时间，需要折中感觉。这里仅仅是索引的训练，即构建索引，至于增，删等操作对索引带来的影响导致索引如何变更需要进一步研读论文掌握其思想加以认真思考得出。对于多维索引的构建可以结合Z-order，即目前我所研究的那篇Blinkhash就是在分布式环境下整合突破了hash索引与B+树索引的深度融合，解决时序数据最右节点热争抢问题，但其构建的索引也是递增有序的，多维数据可以用z-order降为一维，此处应该亦可以和ML相关算法结合来构建索引已解决多维索引问题。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03-学习型索引-RMI</title>
      <link href="posts/36c1.html"/>
      <url>posts/36c1.html</url>
      
        <content type="html"><![CDATA[<h2 id="The-Case-for-Learned-Index-Structures"><a href="#The-Case-for-Learned-Index-Structures" class="headerlink" title="The Case for Learned Index Structures"></a>The Case for Learned Index Structures</h2><p>注：作者认为索引即模型，故研究了如何通过 ML 模型 替换 传统数据库索引结构——B树、哈希、布隆过滤器。</p><h3 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h3><p>思想的来源：传统数据库</p><p>然而，所有这些索引仍然是通用数据结构；他们对数据分布没有任何假设，也没有利用现实世界数据中更常见的模式。例如，如果目标是构建一个高度调整的系统来存储和查询一组连续整数键（例如键 1 到 100M）上的固定长度记录范围，则不会使用传统的 B 树对键进行索引，因为键本身可以用作偏移量，这使其成为查找任何键或一系列键的开头的 O(1) 而不是 O(logn) 操作。同样，索引内存大小将从 O(n) 减少到 O(1)。也许令人惊讶的是，其他数据模式也可以进行类似的优化。换句话说，了解确切的数据分布可以高度优化几乎任何索引结构。</p><p>当然，在大多数现实用例中，数据并不完全遵循已知模式，并且为每个用例构建专门解决方案的工程工作量通常过高。然而，我们认为机器学习（ML）提供了学习反映数据模式的模型的机会，从而能够以较低的工程成本自动合成专门的索引结构（称为学习索引）。</p><p>在本文中，我们探讨了学习模型（包括神经网络）可在多大程度上用于增强甚至取代从 B 树到布隆过滤器的传统索引结构。这似乎有悖常理，因为机器学习无法提供我们传统上与这些索引相关联的语义保证，而且传统上认为最强大的机器学习模型、神经网络的计算成本非常高。然而，我们认为这些明显的障碍并不像它们看起来那样有问题。相反，我们使用学习模型的建议有可能带来显着的好处，特别是在下一代硬件上。</p><p>就语义保证而言，索引在很大程度上已经是学习模型，因此用其他类型的 ML 模型替换它们变得非常简单。例如，B 树可以被视为一种模型，它以键作为输入并预测数据记录在排序集中的位置（必须对数据进行排序以实现有效的范围请求）。布隆过滤器是一种二元分类器，它基于键来预测某个键是否存在于集合中。显然，存在微妙但重要的差异。例如，布隆过滤器可以有误报，但不能有误报。【For example, a Bloom filter can have false positives but not false negatives.】然而，正如我们将在本文中展示的那样，可以通过新颖的学习技术和/或简单的辅助数据结构来解决这些差异。</p><p>在性能方面，我们观察到每个CPU都已经具备强大的SIMD功能，并且我们推测许多笔记本电脑和手机很快就会拥有图形处理单元（GPU）或张量处理单元（TPU）。推测 CPU-SIMD/GPU/TPU 将变得越来越强大也是合理的，因为与通用指令集相比，扩展神经网络使用的有限（并行）数学运算集要容易得多。因此，执行神经网络或其他机器学习模型的高成本在未来实际上可能可以忽略不计。例如，Nvidia 和 Google 的 TPU 已经能够在单个周期内执行数千甚至数万个神经网络操作 [3]。</p><p>此外，据称到 2025 年 GPU 的性能将提高 1000 倍，而 CPU 的摩尔定律基本上已经失效 [5]。通过用神经网络取代分支密集的索引结构，数据库和其他系统可以从这些硬件趋势中受益。虽然我们看到了 TPU 等专用硬件上学习索引结构的未来，但本文完全关注 CPU，并且令人惊讶地表明，即使在这种情况下，我们也可以实现显着的优势。</p><p>值得注意的是，我们并不主张用学习索引完全取代传统索引结构。相反，本文的主要贡献是概述和评估一种建立索引的新方法的潜力，该方法补充了现有的工作，并且可以说为这个已有数十年历史的领域开辟了一个全新的研究方向。这是基于以下关键观察：许多数据结构可以分解为学习模型和辅助结构，以提供相同的语义保证。这种方法的潜在力量来自于这样一个事实：描述数据分布的连续函数可用于构建更高效的数据结构或算法。在针对只读分析工作负载的合成数据集和真实世界数据集评估我们的方法时，我们根据经验得到了非常有希望的结果。然而，许多开放的挑战仍然存在，例如如何处理写入繁重的工作负载，我们概述了未来工作的许多可能的方向。此外，我们相信我们可以使用相同的原理来替换（数据库）系统中常用的其他组件和操作。如果成功，将学习模型深度嵌入算法和数据结构的核心思想可能会导致系统开发方式的彻底背离。</p><p>本文的其余部分概述如下：在接下来的两节中，我们以 B 树为例介绍学习索引的一般思想。在第 4 节中，我们将这个想法扩展到哈希映射，并在第 5 节中扩展到布隆过滤器。所有部分都包含单独的评估。最后，在第 6 节中，我们讨论相关工作并在第 7 节中得出结论。</p><hr><h3 id="2-B树—-范围查询"><a href="#2-B树—-范围查询" class="headerlink" title="2. B树—-范围查询"></a>2. B树—-范围查询</h3><p>范围索引结构（如 B 树）已经是模型：给定一个键，它们“预测”键排序集中的值的位置。要看到这一点，请考虑分析内存数据库中已排序的主键列上的 B 树索引（即只读），如图 1(a) 所示。在这种情况下，B 树提供从查找键到已排序记录数组内的位置的映射，并保证该位置处的记录的键是等于或高于查找的第一个键钥匙。必须对数据进行排序以允许有效的范围请求。这个相同的一般概念也适用于二级索引，其中数据将是 <key,record_pointer> 对的列表，其中键是索引值，指针是对记录的引用。</key,record_pointer></p><img src="/posts/36c1/%E5%AD%A6%E4%B9%A0%E5%9E%8B%E7%B4%A2%E5%BC%95%E6%A8%A1%E5%9E%8B%E5%9B%BE%E5%AF%B9%E6%AF%94%E7%A4%BA%E4%BE%8B.png" class title="学习型索引模型图对比示例"><p>出于效率原因，通常不会对已排序记录的每个键进行索引，而是仅对每个第 n 条记录的键（即页面的第一个键）进行索引。这里我们只假设固定长度记录和连续内存区域（即单个数组）上的逻辑分页，而不是位于不同内存区域的物理页（物理页和可变长度记录在附录 D.2 中讨论）。仅对每个页面的第一个键建立索引有助于显着减少索引必须存储的键数，而不会造成任何显着的性能损失。因此，B 树是一个模型，或者用 ML 术语来说，是一棵回归树：它将键映射到具有最小和最大误差的位置（最小误差为 0，最大误差为页面误差 page-size），并保证可以在该区域中找到该密钥（如果存在）。因此，我们可以用其他类型的 ML 模型（包括神经网络）替换该索引，只要它们也能够对最小和最大误差提供类似的强有力保证。</p><p>乍一看，似乎很难为其他类型的ML模型提供相同的保证，但实际上它非常简单。首先，B-Tree只对存储的键提供最小和最大错误保证，而不是对所有可能的键提供最大和最小错误保证。对于新数据，b树需要重新平衡，或者在机器学习术语中重新训练，以仍然能够提供相同的错误保证。也就是说，对于单调模型，我们唯一需要做的就是对每个键执行模型，并记住位置的最坏预测，以计算最小和最大误差；其次，更重要的是，甚至不需要强错误界限。</p><p>无论如何，数据必须排序以支持范围请求，因此任何错误都可以通过围绕预测的局部搜索(例如，使用指数搜索)轻松纠正，因此，甚至允许非单调模型。因此，我们可以用任何其他类型的回归模型代替b树，包括线性回归或神经网络(见图1(b))。</p><p>现在，在用学习索引取代 B 树之前，我们还需要解决其他技术挑战。例如，B 树的插入和查找成本有限，并且特别擅长利用缓存。此外，B 树可以将键映射到未连续映射到内存或磁盘的页面。所有这些都是有趣的挑战/研究问题，并在本节和附录中更详细地解释，以及潜在的解决方案。</p><p>同时，使用其他类型的模型作为索引可以提供巨大的好处。最重要的是，它有可能将 B 树查找的 logn 成本转换为常量操作。例如，假设一个数据集具有 1M 个唯一键，其值介于 1M 和 2M 之间（因此值 1,000,009 存储在位置 10）。在这种情况下，由单个乘法和加法组成的简单线性模型可以完美预测点查找或范围扫描的任何键的位置，而 B 树则需要 logn 操作。机器学习（尤其是神经网络）的美妙之处在于它们能够学习各种数据分布、混合以及其他数据特性和模式。挑战在于平衡模型的复杂性和准确性。</p><p>对于本文的大部分讨论，我们保留本节的简化假设：我们仅索引按键排序的内存中密集数组。这似乎是有限制的，但是许多现代硬件优化的 B 树，例如 FAST [44]，做出了完全相同的假设，并且这些索引对于内存数据库系统来说非常常见，因为它们在扫描方面具有卓越的性能 [44, 48]或二分查找。</p><p>然而，虽然我们的一些技术可以很好地适应某些场景（例如，具有非常大块的磁盘驻留数据，例如 Bigtable [23] 中使用的），但对于其他场景（细粒度分页、插入繁重的工作负载等） .）需要更多的研究。在附录 D.2 中，我们更详细地讨论了其中一些挑战和潜在的解决方案。</p><hr><h4 id="2-1-什么样的模型复杂度是可以接受的？"><a href="#2-1-什么样的模型复杂度是可以接受的？" class="headerlink" title="2.1 什么样的模型复杂度是可以接受的？"></a>2.1 什么样的模型复杂度是可以接受的？</h4><p>为了更好地理解模型的复杂性，重要的是要知道在遍历 B 树所需的相同时间内可以执行多少个操作，以及模型需要达到什么精度才能比 B 树更高效。</p><p>考虑一个索引 100M 记录、页大小为 100 的 B 树。我们可以将每个 B 树节点视为一种划分空间的方式，减少“错误”并缩小查找数据的区域。因此，我们说页面大小为 100 的 B 树每个节点的精度增益为 1/100，并且我们总共需要遍历 log100N 个节点。因此，第一个节点将空间从 100M 划分为 100M/100 = 1M，第二个节点从 1M 划分为 1M/100 = 10k，依此类推，直到找到记录。</p><p>现在，使用二分搜索遍历单个 B 树页面大约需要 50 个周期，并且众所周知很难并行化3。相比之下，现代 CPU 每个周期可以执行 8-16 个 SIMD 操作。</p><p>因此，只要每 50 * 8 = 400 次算术运算的精度增益高于 1/100，模型就会更快。请注意，此计算仍然假设所有 B-Tree 页面都在缓存中。一次缓存未命中会花费 50-100 个额外周期，因此可以支持更复杂的模型。</p><p>此外，机器学习加速器正在彻底改变游戏规则。它们允许在相同的时间内运行更复杂的模型，并减轻 CPU 的计算负担。例如，NVIDIA最新的Tesla V100 GPU能够实现120 TeraFlops的低精度深度学习算术运算（约每周期60, 000次运算）。</p><p>假设整个学习索引适合 GPU 的内存（我们在第 3.7 节中表明这是一个非常合理的假设），在短短 30 个周期内，我们可以执行 100 万个神经网络操作。当然，传输输入和从 GPU 检索结果的延迟仍然明显较高，但考虑到批处理和/或最近更紧密地集成 CPU/GPU/TPU 的趋势，这个问题并非无法克服 [4]。最后，可以预期的是，GPU/TPU 的能力和每秒浮点/整数运算的数量将继续增加，而提高 CPU 执行 if 语句性能的进展基本上已经停滞 [5]。尽管我们认为 GPU/TPU 是在实践中采用学习索引的主要原因之一，但在本文中，我们将重点放在更有限的 CPU 上，以更好地研究通过机器学习替换和增强索引的影响，而不会影响硬件变化。</p><hr><h4 id="2-2-范围索引模型是CDF模型"><a href="#2-2-范围索引模型是CDF模型" class="headerlink" title="2.2 范围索引模型是CDF模型"></a>2.2 范围索引模型是CDF模型</h4><p>正如本节开头所述，索引是一种以键作为输入并预测记录位置的模型。对于点查询，记录的顺序并不重要，而对于范围查询，必须根据查找键对数据进行排序，以便可以有效地检索范围内（例如，时间范围内）的所有数据项。这导致了一个有趣的观察：预测排序数组中给定键的位置的模型有效地近似了累积分布函数（CDF）。我们可以对数据的 CDF 进行建模来预测位置：        p = F (Key) ∗ N        (1)。</p><p>其中 p 是位置估计，F (Key) 是数据的估计累积分布函数，用于估计观察到小于或等于查找键 P(X ≤ Key) 的键的可能性，N 是键总数（另请参见图 2）。</p><img src="/posts/36c1/CDFS.png" class title="CDFS"><p>这一观察开辟了一组全新的有趣方向：首先，它意味着索引实际上需要学习数据分布。 B 树通过构建回归树来“学习”数据分布。线性回归模型将通过最小化线性函数的（平方）误差来学习数据分布。其次，估计数据集的分布是一个众所周知的问题，学习的索引可以从数十年的研究中受益。第三，学习 CDF 在优化其他类型的索引结构和潜在算法方面也发挥着关键作用，我们将在本文后面概述研究 。第四，关于理论 CDF 与经验 CDF 的接近程度的研究由来已久，这为从理论上理解这种方法的好处提供了立足点 [28]。我们在附录 A 中对我们的方法的扩展程度进行了高级理论分析。</p><hr><h4 id="2-3-第一个学习型索引"><a href="#2-3-第一个学习型索引" class="headerlink" title="2.3 第一个学习型索引"></a>2.3 第一个学习型索引</h4><p>为了更好地理解通过学习模型替换 B 树的要求，我们使用了 200M 的 Web 服务器日志记录，目的是使用 Tensorflow [9] 在时间戳上构建二级索引。我们使用 ReLU 激活函数训练了一个每层 32 个神经元的两层全连接神经网络；时间戳是输入特征，排序数组中的位置是标签。之后，我们使用 Tensorflow 和 Python 作为前端，测量了随机选择的键的查找时间（在几次运行中平均，不考虑第一个数字）。</p><p>在此设置中，我们每秒实现了约 1250 次预测，即使用 Tensorflow 执行模型需要约 80, 000 纳秒 (ns)，而无需搜索时间（从预测位置找到实际记录的时间）。作为比较点，对相同数据进行 B 树遍历大约需要 300 纳秒，而对整个数据进行二分搜索大约需要 900 纳秒。仔细观察，我们发现我们的简单方法在几个关键方面受到限制：（1）Tensorflow 被设计为有效地运行更大的模型，而不是小模型，因此，具有显着的调用开销，特别是使用 Python 作为前端 -结尾。 (2) B 树，或者一般的决策树，非常擅长通过一些操作来过度拟合数据，因为它们使用简单的 if 语句递归地划分空间。相比之下，其他模型可以更有效地近似 CDF 的一般形状，但在单个数据实例级别上存在准确性问题。要了解这一点，请再次考虑图 2。该图表明，从顶层视图来看，CDF 函数显得非常平滑和规则。然而，如果放大到单条记录，就会发现越来越多的违规行为；众所周知的统计效应。因此，神经网络、多项式回归等模型可能会更高效地使用 CPU 和空间，将整个数据集中某个项目的位置缩小到数千个区域，但单个神经网络为了“最后一英里”，通常需要更多的空间和 CPU 时间将错误从数千进一步减少到数百。 (3) B 树的缓存和操作效率极高，因为它们始终将顶部节点保留在缓存中，并在需要时访问其他页面。相比之下，标准神经网络需要所有权重来计算预测，这在乘法次数方面具有很高的成本。</p><h3 id="3-RM-INDEX"><a href="#3-RM-INDEX" class="headerlink" title="3. RM-INDEX"></a>3. RM-INDEX</h3><p>为了克服挑战并探索模型作为索引替代或优化的潜力，我们开发了<strong>学习索引框架 (LIF)、递归模型索引 (RMI) 和基于标准误差的搜索策略</strong>。我们主要关注简单、完全连接的神经网络，因为它们简单且灵活，但我们相信其他类型的模型可能会提供额外的好处。</p><h4 id="3-1-学习索引框架（LIF）"><a href="#3-1-学习索引框架（LIF）" class="headerlink" title="3.1 学习索引框架（LIF）"></a>3.1 学习索引框架（LIF）</h4><p>LIF 可以看作是一个指标综合系统；给定索引规范，LIF 会生成不同的索引配置、优化它们并自动测试它们。虽然 LIF 可以即时学习简单模型（例如线性回归模型），但它依赖于 Tensorflow 来学习更复杂的模型（例如神经网络）。然而，它在推理时从不使用 Tensorflow。</p><p>相反，给定一个经过训练的 Tensorflow 模型，LIF 会自动从模型中提取所有权重，并根据模型规范在 C++ 中生成有效的索引结构。我们的代码生成是专门为小型模型设计的，消除了 Tensorflow 管理大型模型所需的所有不必要的开销和仪器。在这里，我们利用[25]中的想法，它已经展示了如何避免 Spark 运行时不必要的开销。因此，我们能够在 30 纳秒的时间内执行简单的模型。</p><p>然而，应该指出的是，LIF 仍然是一个实验性框架，用于快速评估不同的索引配置（例如，ML 模型、页面大小、搜索策略等），这会以额外计数器的形式引入额外的开销，虚拟函数调用等。除了编译器完成的矢量化之外，我们不使用特殊的 SIMD 内在函数。虽然这些低效率在我们的评估中并不重要，因为我们通过始终使用我们的框架来确保公平比较，但在生产环境中或在将报告的性能数据与其他实现进行比较时，应考虑/避免这些低效率</p><h4 id="3-2-递归模型索引"><a href="#3-2-递归模型索引" class="headerlink" title="3.2 递归模型索引"></a>3.2 递归模型索引</h4><p>正如第 2.3 节所述，构建替代学习模型来替代 B 树的主要挑战之一是最后一英里搜索的准确性。例如，使用单个模型将 100M 记录的预测误差降低到数百个量级通常很困难。同时，即使使用简单的模型，将误差从 100M 降低到 10k，例如通过模型替换 B-Tree 的前 2 层，精度增益为 100 * 100 = 10000，也更容易实现。同样，将误差从 10k 减少到 100 是一个更简单的问题，因为模型可以只关注数据的子集。</p><p>基于这一观察并受到专家工作的启发 [62]，我们提出了递归回归模型（见图 3）。也就是说，我们构建模型的层次结构，在每个阶段模型将密钥作为输入，并基于它选择另一个模型，直到最后阶段预测位置。</p><img src="/posts/36c1/RMI.png" class title="RMI"><p>更正式地说，对于我们的模型 f (x)，其中 x 是键，y ∈ [0, N) 位置，我们假设在阶段 l 有 M~l~ 个模型。我们在阶段 0 训练模型，f0(x) ≈ y。因此，阶段 中的模型 k（表示为 f (k) ）经过损失训练：</p><img src="/posts/36c1/%E5%AD%A6%E4%B9%A0%E5%9E%8B%E7%B4%A2%E5%BC%95%E6%A8%A1%E5%9E%8B%E6%8E%A8%E5%AF%BC.png" class title="学习型索引模型推导"><p>考虑不同模型的一种方法是，每个模型都会对密钥的位置做出具有一定误差的预测，并且该预测用于选择下一个模型，该模型负责密钥空间的特定区域以做出更好的预测和更低的误差。但是，递归模型索引不一定是树。如图3所示，一个阶段的不同模型有可能在下一个阶段选择相同的模型。此外，每个模型不一定像 B 树那样覆盖相同数量的记录（即页面大小为 100 的 B 树覆盖 100 条或更少的记录）。最后，根据所使用的模型，不同的阶段不一定被解释为位置估计，而应被视为选择对某些键有更好了解的专家（另见[62]）。</p><p>这种模型架构有几个好处：（1）它将模型大小和复杂性与执行成本分开。 (2)它利用了易于学习数据分布的整体形状的事实。 (3)它有效地将空间划分为更小的子范围，就像B树一样，可以更轻松地以更少的操作实现所需的“最后一英里”精度。 (4) 阶段之间不需要搜索过程。例如，模型1.1的输出直接用于下一阶段的模型选取。这不仅减少了管理结构的指令数量，还允许将整个索引表示为 TPU/GPU 的稀疏矩阵乘法。</p><h4 id="3-3-混合索引"><a href="#3-3-混合索引" class="headerlink" title="3.3 混合索引"></a>3.3 混合索引</h4><p>递归模型索引的另一个优点是，我们能够构建模型的混合。例如，虽然在顶层，小型 ReLU 神经网络可能是最佳选择，因为它们通常能够学习各种复杂的数据分布，但模型层次结构底部的模型可能是数千个简单的线性回归模型，因为它们在空间和执行时间上都很便宜。此外，如果数据特别难学习，我们甚至可以在底层使用传统的 B 树。</p><p>在本文中，我们重点关注两种类型的模型：具有零到两个全连接隐藏层和 ReLU 激活函数的简单神经网络以及最多 32 个神经元的层宽度和 B 树（又名决策树）。请注意，零隐藏层神经网络相当于线性回归。给定索引配置（将阶段数和每个阶段的模型数指定为大小数组），混合索引的端到端训练如算法 1 所示完成：</p><img src="/posts/36c1/RMI%E7%AE%97%E6%B3%95%E4%BC%AA%E4%BB%A3%E7%A0%81.png" class title="RMI算法伪代码"><p>从整个数据集（第 3 行）开始，它首先训练顶部节点模型。根据此顶部节点模型的预测，它会从下一阶段（第 9 行和第 10 行）中选择模型，并添加属于该模型的所有键（第 10 行）。最后，在混合索引的情况下，如果绝对最小/最大误差高于预定义阈值（第 11-14 行），则通过用 B 树替换 NN 模型来优化索引。</p><p>请注意，我们在最后阶段存储每个模型的标准误差和最小误差和最大误差。这样做的好处是，我们可以根据每个键所使用的模型单独限制搜索空间。目前，我们通过简单的网格搜索来调整模型的各种参数（即阶段数、每个模型的隐藏层等）。然而，存在许多潜在的优化来加速从 ML 自动调整到采样的训练过程。</p><p>请注意，混合索引允许我们将学习索引的最坏情况性能与 B 树的性能结合起来。也就是说，在极难学习数据分布的情况下，所有模型都会自动替换为 B-Tree，使其几乎成为一整棵 B-Tree。</p><h4 id="3-4-搜索策略和单调性"><a href="#3-4-搜索策略和单调性" class="headerlink" title="3.4 搜索策略和单调性"></a>3.4 搜索策略和单调性</h4><p>范围索引通常实现 upper_bound(key) [lower_bound(key)] 接口来查找排序数组中第一个等于或高于[低于]查找键的键的位置，以有效地支持范围请求。因此，对于学习的范围索引，我们必须根据预测从查找键中找到第一个较高[较低]的键。尽管付出了很多努力，但人们一再报道[8]，二分搜索或扫描具有小有效负载的记录通常是在排序数组中查找键的最快策略，因为替代技术的额外复杂性很少得到回报。然而，学习索引在这里可能有一个优势：模型实际上预测键的位置，而不仅仅是键的区域（即页面）。在这里，我们讨论两种利用此信息的简单搜索策略：</p><p>模型偏向搜索：我们的默认搜索策略，与传统的二分搜索的唯一不同之处在于第一个中间点设置为模型预测的值。</p><p>偏向四元搜索：四元搜索采用三个点而不是一个分割点，希望硬件一次预取所有三个数据点，以便在数据不在缓存中时获得更好的性能。在我们的实现中，我们将四元搜索的初始三个中间点定义为 pos − σ,pos,pos + σ。也就是说，我们猜测我们的大多数预测都是准确的，并将我们的注意力首先集中在位置估计上，然后我们继续传统的四元搜索。</p><p>对于我们所有的实验，我们使用最小和最大误差作为所有技术的搜索区域。也就是说，我们对每个键执行 RMI 模型，并存储每个最后阶段模型最差的过度预测和不足预测。虽然此技术保证找到所有现有键，但对于不存在的键，如果 RMI 模型不是单调的，则可能会返回错误的上限或下限。为了克服这个问题，一种选择是强制我们的 RMI 模型是单调的，正如机器学习中所研究的那样 [41, 71]。</p><p>或者，对于非单调模型，我们可以自动调整搜索区域。也就是说，如果找到的上（下）界键位于由最小和最大误差定义的搜索区域的边界上，我们将逐步调整搜索区域。</p><p>然而，另一种可能性是使用指数搜索技术。假设误差呈正态分布，这些技术平均应该与替代搜索策略一样好，同时不需要存储任何最小和最大误差。</p><h4 id="3-5-索引字符串"><a href="#3-5-索引字符串" class="headerlink" title="3.5 索引字符串"></a>3.5 索引字符串</h4><p>我们主要关注于索引真实值键，但许多数据库依赖于索引字符串，幸运的是，重要的机器学习研究集中在建模字符串上。和以前一样，我们需要设计一个高效且富有表现力的字符串模型。对于字符串来说，做好这件事会带来许多独特的挑战。</p><p>第一个设计考虑因素是如何将字符串转换为模型的特征，通常称为标记化。为了简单和高效，我们将 n 长度的字符串视为特征向量 x ∈ Rn，其中 xi 是 ASCII 十进制值（或 Unicode 十进制值，具体取决于字符串）。此外，如果所有输入的大小相同，大多数机器学习模型的运行效率会更高。因此，我们将设置最大输入长度 N。因为数据是按字典顺序排序的，所以我们在标记化之前将键截断为长度 N。对于长度为 n &lt; N 的字符串，当 i &gt; n 时，我们设置 xi = 0。</p><p>为了提高效率，我们通常遵循与真实值输入类似的建模方法。我们学习相对较小的前馈神经网络的层次结构。唯一的区别是输入不是单个实值 x 而是向量 x。线性模型 w · x + b 随输入长度 N 线性缩放乘法和加法次数。即使具有宽度为 h 的单个隐藏层的前馈神经网络也将缩放 O(hN) 乘法和加法。</p><p>最终，我们相信未来有大量研究可以优化字符串键的学习索引。例如，我们可以轻松想象其他标记化算法。在自然语言处理方面，有大量关于字符串标记化的研究，旨在将字符串分解为对 ML 模型更有用的片段，例如翻译中的单词片段 [70]。此外，将后缀树的想法与学习索引相结合以及探索更复杂的模型架构（例如循环神经网络和卷积神经网络）可能会很有趣。</p><h4 id="3-6-训练"><a href="#3-6-训练" class="headerlink" title="3.6 训练"></a>3.6 训练</h4><p>虽然训练（即加载）时间不是本文的重点，但应该指出的是，我们所有的模型，浅层神经网络甚至简单的线性/多元回归模型，训练速度都相对较快。虽然简单的神经网络可以使用随机梯度下降进行有效训练，并且可以在随机数据上通过不到一到几次的时间收敛，但线性多变量模型（例如，0 层神经网络）存在封闭形式的解决方案，并且它们可以对排序后的数据进行一次训练。因此，对于200M的记录训练一个简单的RMI索引不会比几秒钟长多少时间（当然，这取决于执行多少自动调整）；神经网络可以对每个模型进行几分钟的训练，具体取决于复杂性。另请注意，通常不需要在整个数据上训练顶层模型，因为即使在对整个随机数据进行单次扫描之前，这些模型也经常会收敛。这部分是因为我们使用简单的模型，不太关心精度的最后几个数字点，因为它对索引性能影响很小。</p><p>最后，机器学习社区 [27, 72] 关于改善学习时间的研究适用于我们的背景，我们预计未来会有很多这方面的研究。</p><hr><h3 id="4-哈希—-点查询"><a href="#4-哈希—-点查询" class="headerlink" title="4. 哈希—-点查询"></a>4. 哈希—-点查询</h3><p>除了范围索引之外，用于点查找的哈希映射在 DBMS 中也发挥着同样重要的作用。从概念上讲，哈希映射使用哈希函数确定性地将键映射到数组内的位置（参见图 7(a)）。任何有效的哈希映射实现的关键挑战是防止太多不同的键被映射到哈希映射内的相同位置，下文称为冲突。例如，假设有 100M 条记录，哈希映射大小为 100M。对于统一随机化密钥的哈希函数，可以与生日悖论类似地导出预期冲突的数量，并且预期约为 33% 或 33M 个槽。对于每一个冲突，Hash-map架构都需要处理这个冲突。例如，单独的链接哈希映射将创建一个链接列表来处理冲突（参见图 7(a)）。然而，存在许多替代方案，包括二次探测、使用具有多个槽的桶，直至同时使用多个哈希函数（例如，如 Cuckoo Hashing [57] 所做的那样）。</p><img src="/posts/36c1/Hash-Map.png" class title="Hash-Map"><p>然而，无论哈希映射架构如何，冲突都会对性能和/或存储要求产生重大影响，并且机器学习模型可能提供减少冲突数量的替代方案。虽然将学习模型作为哈希函数的想法并不新鲜，但现有技术并未利用底层数据分布。例如，各种完美哈希技术[26]也试图避免冲突，但用作哈希函数一部分的数据结构随着数据大小而增长；学习模型可能没有的属性（回想一下，对 1 到 100M 之间的所有键进行索引的示例）。据我们所知，尚未探索是否可以学习产生更有效点索引的模型。</p><h4 id="4-1-哈希模型索引"><a href="#4-1-哈希模型索引" class="headerlink" title="4.1 哈希模型索引"></a>4.1 哈希模型索引</h4><p>令人惊讶的是，学习密钥分布的 CDF 是学习更好的哈希函数的一种潜在方法。然而，与范围索引相比，我们的目的并不是紧凑地或严格排序地存储记录。相反，我们可以通过哈希映射的目标大小 M 来缩放 CDF，并使用 h(K) = F (K)*M，其中密钥 K 作为我们的哈希函数。如果模型 F 完美地学习了按键的经验 CDF，则不会存在冲突。此外，散列函数与实际的散列映射架构正交，并且可以与单独的链接或任何其他散列映射类型组合。</p><p>对于模型，我们可以再次利用上一节中的递归模型架构。显然，和以前一样，索引的大小和性能之间存在权衡，这受到模型和数据集的影响。</p><p>请注意，如何处理插入、查找和冲突取决于哈希映射架构。因此，学习的哈希函数相对于传统哈希函数（将键映射到均匀分布的空间）的优势取决于两个关键因素：（1）模型表示观察到的 CDF 的准确程度。例如，如果数据是由均匀分布生成的，简单的线性模型将能够学习一般的数据分布，但所得的哈希函数不会比任何充分随机的哈希函数更好。 (2) 哈希映射架构：取决于架构、实现细节、有效负载（即值）、冲突解决策略以及将或可以分配多少内存（即槽），都会显着影响性能。例如，对于小键和小值或没有值，采用 Cuckoo 散列的传统散列函数可能会很好地工作，而较大的有效负载或分布式散列映射可能会从避免冲突中获益更多，从而从学习的散列函数中获益更多。</p><hr><h3 id="5-布隆过滤器—-存在性查询"><a href="#5-布隆过滤器—-存在性查询" class="headerlink" title="5. 布隆过滤器—-存在性查询"></a>5. 布隆过滤器—-存在性查询</h3><p>DBMS 最后一种常见的索引类型是存在索引，最重要的是布隆过滤器，这是一种节省空间的概率数据结构，用于测试元素是否是集合的成员。</p><p>它们通常用于确定冷存储中是否存在密钥。例如，Bigtable 使用它们来确定 SSTable 中是否包含某个键 [23]。</p><p>在内部，布隆过滤器使用大小为 m 的位数组和 k 个哈希函数，每个函数将一个键映射到 m 个数组位置之一（参见图 9(a)）。为了将一个元素添加到集合中，将一个键输入到 k 个哈希函数中，并将返回位置的位设置为 1。为了测试某个键是否是该集合的成员，将该键再次输入到 k 个哈希函数中。用于接收 k 个数组位置的哈希函数。如果这 k 个位置上的任何一位为 0，则该密钥不是集合的成员。</p><p>换句话说，布隆过滤器确实保证不存在误报，但存在潜在的误报。 </p><p>In other words, a Bloom filter does guarantee that there exists no false negatives, but has potential<br>false positives.</p><p>虽然布隆过滤器具有很高的空间效率，但它们仍然会占用大量内存。例如，对于 10 亿条记录，大约需要 ≈ 1.76 GB。对于 0.01% 的 FPR，我们需要 ≈ 2.23 GB。人们曾多次尝试提高布隆过滤器的效率[52]，但一般观察结果仍然存在。</p><img src="/posts/36c1/%E5%AD%A6%E4%B9%A0%E5%9E%8B%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8.png" class title="学习型布隆过滤器"><p>然而，如果存在某种可以学习的结构来确定集合内部和外部的内容，那么就有可能构建更有效的表示。有趣的是，对于数据库系统的存在索引，延迟和空间要求通常与我们之前看到的有很大不同。考虑到访问冷存储（例如磁盘甚至带）的高延迟，我们可以负担更复杂的模型，而主要目标是最小化索引空间和误报数量。我们概述了使用学习模型构建存在索引的两种潜在方法。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 学习型索引 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习型索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07-学习型索引-Alex</title>
      <link href="posts/53ff.html"/>
      <url>posts/53ff.html</url>
      
        <content type="html"><![CDATA[<h1 id="ALEX-An-Updatable-Adaptive-Learned-Index"><a href="#ALEX-An-Updatable-Adaptive-Learned-Index" class="headerlink" title="ALEX: An Updatable Adaptive Learned Index"></a>ALEX: An Updatable Adaptive Learned Index</h1><hr><h2 id="整体数据结构设计"><a href="#整体数据结构设计" class="headerlink" title="整体数据结构设计"></a>整体数据结构设计</h2><p>ALEX旨在实现以下目标：</p><ol><li>插入时间应与 B+Tree 相当;</li><li>查找时间应比 B+Tree 和 Learned Index 快;</li><li>索引存储空间应小于 B+Tree 和 Learned Index;</li><li>数据存储空间(叶级)应与 动态B+Tree 相当。</li></ol><img src="/posts/53ff/image-20240412211819896.png" class title="Alex-Model"><hr><h3 id="设计概览"><a href="#设计概览" class="headerlink" title="设计概览"></a>设计概览</h3><p>ALEX：内存中的可更新的学习型索引。但与学习索引亦有许多不同之处：</p><p>区别一：叶节点的数据结构。像B+Tree一样，ALEX在每个叶子上使用一个节点。这允许更灵活地扩展和分割单个节点，并且还限制了插入期间所需的移位次数。在典型的B+树中，每个叶节点存储一个键和有效负载数组，并且在数组末尾有“空闲空间”来吸收插入。ALEX使用了类似的设计，但更仔细地选择了如何使用空闲空间。通过在数组元素之间策略性地引入间隙，可以实现更快的插入和查找时间。如图2所示，ALEX对每个数据节点使用间隙数组(GA)布局。</p><p>区别二：ALEX使用指数搜索来搜索叶级键，以纠正RMI的错误预测，如图2所示。我们通过实验验证了无边界的指数搜索比有边界的二叉搜索更快。这是因为如果模型是好的，它们的预测就足够接近正确的位置。指数搜索还消除了在RMI模型中存储错误边界的需要。</p><p>区别三：ALEX在模型预测键应该在的位置将键插入数据节点。我们称之为基于模型的插入。相反，学习索引在不改变数组中记录位置的情况下对记录数组生成RMI。基于模型的插入具有更好的搜索性能，因为它减少了模型误预测误差。</p><p>区别四：ALEX根据工作量动态调整RMI的形状和高度。</p><p>区别五：ALEX没有需要为每个数据集或工作负载重新调整的参数，不像学习索引，其中必须调整模型的数量。ALEX通过使用 cost模型 自动批量加载和调整 RMI 结构以实现高性能。</p><hr><h3 id="节点布局"><a href="#节点布局" class="headerlink" title="节点布局"></a>节点布局</h3><h4 id="数据节点"><a href="#数据节点" class="headerlink" title="数据节点"></a>数据节点</h4><p>与B+树一样，ALEX的叶节点存储数据记录，因此被称为数据节点，如图2中的圆圈所示。</p><p>数据节点<strong>存储一个线性回归模型</strong>(斜率和截距的两个双值)，它将一个键映射到一个位置，<strong>以及两个gap数组</strong>，<strong>一个用于键，一个用于有效载荷</strong>。我们在图2中只显示了keys数组。默认情况下，键和有效负载都是固定大小的。(注意，有效负载可以是记录或指向可变大小记录的指针，存储在内存中单独分配的空间中)。出于实际原因，我们还强制设置了最大节点大小。</p><p>ALEX使用间隙数组布局，它使用基于模型的插入来分配数组元素之间的额外空间，从而实现更快的插入和查找。相反，B+Tree将所有的空格放在数组的末尾。</p><p><strong>间隙数组用间隙右边最近的键来填充间隙，这有助于保持指数搜索性能</strong>。</p><p><strong>为了在扫描时有效地跳过间隙，每个数据节点维护一个位图，该位图跟踪节点中的每个位置是否被键占用或是否为间隙。与间隙数组相比，位图查询速度快，空间开销低</strong>。</p><hr><h4 id="内部节点"><a href="#内部节点" class="headerlink" title="内部节点"></a>内部节点</h4><p>我们将作为RMI结构部分的所有节点称为内部节点，如图2中矩形所示。内部节点存储一个线性回归模型和一个包含指向子节点指针的数组。像B+树一样，内部节点直接遍历树，<strong>但与B+树不同的是，ALEX中的内部节点使用模型来“计算”指针数组中下一个子指针的位置</strong>。与数据节点类似，我们施加了一个最大节点大小。</p><p>ALEX 的内部节点在概念上与学习索引的目的不同。 LearnedIndex的内部节点有适合数据的模型；<strong>具有完美模型的内部节点将键平均分配给其子节点，并且具有完美内部节点的 RMI 会导致每个数据节点中的键数量相同</strong>。然而，<strong>RMI结构的目标不是产生相同大小的数据节点，而是产生键分布大致线性的数据节点，以便线性模型可以精确地拟合其键</strong>。</p><p>因此，ALEX中内部节点的作用就是提供一种灵活的方式来划分键空间。假设图3中的内部节点A覆盖了键空间[0,1)并且有四个子指针。 LearnedIndex 将为每个指针分配一个节点，可以是所有内部节点，也可以是所有数据节点。然而，ALEX 更灵活地划分空间。内部节点A将键空间[0,1/4)和[1/2,1)分配给数据节点（因为这些空间中的CDF是线性的），并将[1/4,1/2)分配给另一个内部节点（因为 CDF 是非线性的，并且 RMI 需要对该key空间进行更精细的划分）。<strong>如图所示，多个指针可以指向同一个子节点</strong>。</p><p>将每个内部节点中的指针数量始终限制为 2 的幂。这允许节点在不重新训练其子树的情况下进行分裂。</p><img src="/posts/53ff/image-20240412211959414.png" class title="img"><hr><h2 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h2><h3 id="查找和范围查找"><a href="#查找和范围查找" class="headerlink" title="查找和范围查找"></a>查找和范围查找</h3><p>为了查找键，从 RMI 的根节点开始，迭代地使用模型来“计算”指针数组中的位置，然后沿着指针指向下一级的子节点，直到到达数据节点。通过构建，内部节点模型具有完美的精度，因此内部节点不涉及搜索。我们使用数据节点中的模型来预测键中搜索键的位置阵列，如果需要，进行指数搜索找到 key 的实际位置。如果找到键，我们从有效负载数组中读取同一位置的相应值并返回记录。否则，返回一个空记录。图2中直观地显示了（使用红色箭头）查找。范围查询首先执行查找以查找值不小于范围起始值的第一个键的位置和数据节点，然后向后扫描直到到达范围的结束值，<strong>使用节点的位图跳过间隙</strong>，并在必要时使用存储在节点中的指针跳转到下一个数据节点。【基于模型的查找O(1)+指数搜索】</p><img src="/posts/53ff/image-20240412212047079.png" class title="img"><hr><h3 id="插入未满的数据节点"><a href="#插入未满的数据节点" class="headerlink" title="插入未满的数据节点"></a>插入未满的数据节点</h3><p>对于插入算法，到达正确数据节点（即TraverseToLeaf）的逻辑与上述查找算法相同。在未满数据节点中，为了找到新元素的插入位置，可使用数据节点中的模型来预测插入位置。如果预测位置不正确（插入到那里将无法保持排序顺序），则会进行指数搜索来找到正确的插入位置。</p><p>如果插入位置是一个间隙，则直接将元素插入到间隙中。<strong>否则，便通过将元素在最近间隙的方向上移动一个位置以在插入位置处形成一个间隙</strong>。然后将元素插入到新创建的间隙中。间隙数组以高概率实现 O(logn) 插入时间。</p><hr><h3 id="插入已满的数据节点"><a href="#插入已满的数据节点" class="headerlink" title="插入已满的数据节点"></a>插入已满的数据节点</h3><p>当数据节点已满时，ALEX 使用两种机制来创建更多空间：扩展和拆分。 ALEX 依靠简单的 cost 模型在不同的机制之间进行选择。</p><h4 id="节点饱满度的标准"><a href="#节点饱满度的标准" class="headerlink" title="节点饱满度的标准"></a>节点饱满度的标准</h4><p>ALEX 不会等待数据节点达到 100% 满，因为间隙数组上的插入性能会随着间隙数量的减少而恶化。我们引入间隙数组的密度下限和上限：d~l~,d~u~ ∈ (0,1]，约束条件是 d~l~&lt;d~u~。</p><p>密度定义为被元素填充的位置的分数。如果下一次插入导致超过 d~u~ ，则节点已满。默认情况下，我们设置 d~l~=0.6 和 d~u~=0.8，以实现平均数据存储利用率 0.7，类似于 B+Tree [14]，根据我们的实验，这总是会产生良好的结果，并且不需要调整。相反，B+Tree 节点通常具有 d~l~=0.5 和 d~u~=1。</p><h4 id="节点扩展机制"><a href="#节点扩展机制" class="headerlink" title="节点扩展机制"></a>节点扩展机制</h4><p>为了扩展包含 n 个键的数据节点，我们分配一个具有 n/d~l~ 个槽的新的更大的间隙数组。然后，我们缩放或重新训练线性回归模型，然后使用缩放或重新训练的模型对这个新的较大节点中的所有元素进行基于模型的插入。创建后，新数据节点处于密度下限 d~l~ 。</p><h4 id="节点分裂机制"><a href="#节点分裂机制" class="headerlink" title="节点分裂机制"></a>节点分裂机制</h4><p>为了将数据节点一分为二，即将 key 分配给两个新的数据节点，使得每个新节点负责原始节点的 key 空间的一半。 ALEX支持两种分割节点的方式：</p><ol><li><p><strong>横向拆分</strong>在概念上类似于 B+Tree 使用拆分的方式。有两种情况：</p><p>a）如果分裂数据节点的父内部节点尚未达到最大节点大小，则将父节点指向分裂数据节点的指针替换为指向两个新数据节点的指针。父内部节点的指针数组可能有指向拆分数据节点的冗余指针。如果是这样，我们将一半的冗余指针分配给两个新节点中的每一个。否则，我们通过将父节点指针数组的大小加倍并为每个指针制作冗余副本来创建指向拆分数据节点的第二个指针，然后将冗余指针之一赋予两个新节点中的每一个。图 5a 显示了不需要扩展父内部节点的横向拆分的示例。 </p><p>b) 如果父内部节点已达到最大节点大小，则可以选择拆分父内部节点，如图 5b 所示。请注意，通过将所有内部节点大小限制为 2 的幂，便始终以“边界保留”方式分割节点，因此不需要重新训练分割内部节点下方的任何模型。请注意，分裂可以一直传播到根节点，就像在 B+ 树中一样。</p></li></ol><img src="/posts/53ff/image-20240412212101573.png" class title="img"><p>2) 纵向拆分将数据节点转换为具有两个子数据节点的内部节点，如图 5c 所示。<strong>两个子数据节点中的模型根据各自的键进行训练</strong>。 B+Tree 没有类似的分裂机制。</p><img src="/posts/53ff/image-20240412212111535.png" class title="image-20240412212111535"><hr><h4 id="cost-模型"><a href="#cost-模型" class="headerlink" title="cost 模型"></a>cost 模型</h4><p>为了决定应用哪种机制，ALEX 依赖于简单的线性 cost 模型，该模型根据在每个数据节点跟踪出来的两个简单统计数据 来预测平均查找时间和插入时间：（a）指数搜索迭代的平均数; （b) 插入的平均移位次数。查找性能与（a）直接相关，而插入性能与（a）和（b）直接相关（因为插入首先需要进行查找以找到正确的插入位置）。</p><p><strong>这两个统计数据在创建数据节点时是未知的。为了找到新数据节点的预期 cost ，我们在假设对现有键统一进行查找并根据现有键分布进行插入的情况下计算这些统计数据的预期值</strong>。</p><p>具体来说：</p><p>(a) 被计算为所有键的模型预测误差的平均以 2 为底的对数； </p><p>(b) 计算所有现有键到间隙数组中最近间隙的平均距离。</p><p>这些期望值可以在不创建数据节点的情况下计算。如果数据节点是使用现有数据节点的键子集创建的，我们可以使用查找与插入的经验比率来衡量两个统计数据的相对重要性以进行计算预期 cost 。</p><p>除了节点内 cost 模型之外，ALEX 还使用 TraverseToLeaf cost 模型来预测从根节点遍历到数据节点的时间。 TraverseToLeaf cost 模型使用两个统计数据：</p><p>1) 遍历到的数据节点的深度；<br>2) 所有内部节点和数据节点元数据（除了key和有效负载之外的所有内容）的总大小（以B为单位）。</p><p>这些统计数据捕获了遍历的 cost ：较深的数据节点需要更多的指针追踪来查找，较大的大小会降低 CPU 缓存局部性，从而减慢对数据节点的遍历。我们提供有关 cost 模型的更多详细信息并在 [10] 的附录 D 中显示了它们的低使用开销。【<strong>计算叶节点深度，以及遍历到叶节点所需公共元数据大小</strong>】</p><hr><h4 id="插入算法"><a href="#插入算法" class="headerlink" title="插入算法"></a>插入算法</h4><p>当查找和插入在数据节点上完成时，就计算指数搜索迭代和每次插入的移位 次数。<strong>根据这些统计数据，我们使用节点内 cost 模型计算数据节点的经验 cost </strong>。<strong>一旦数据节点已满，就将预期 cost （在节点创建时计算）与经验 cost 进行比较。如果它们没有显著偏离，那么就断定模型仍然准确，就执行节点扩展（如果扩展后的大小小于最大节点大小），缩放模型而不是重新训练</strong>。 RMI 内部节点中的模型不会重新训练或重新缩放。</p><p><strong>显著 cost 偏差定义为：经验 cost 比预期 cost 高出 50% 以上</strong>。根据我们的实验，50% 的 cost 偏差阈值始终会产生良好的结果，无需进行调整。</p><p>否则，<strong>如果经验 cost 偏离了预期 cost ，就必须（i）扩展数据节点并重新训练模型，（ii）横向分割数据节点，或（iii）纵向分割数据节点。根据节点内 cost 模型，选择导致最低预期 cost 的操作</strong>。</p><p><strong>为简单起见，ALEX 始终将数据节点一分为二。数据节点在概念上可以拆分为 2 的任意幂，但确定最佳扇出可能非常耗时，我们通过实验验证，在大多数情况下，根据 cost 模型，2 的扇出是最佳的</strong>。</p><hr><h4 id="为什么经验-cost-会偏离预期-cost-？"><a href="#为什么经验-cost-会偏离预期-cost-？" class="headerlink" title="为什么经验 cost 会偏离预期 cost ？"></a>为什么经验 cost 会偏离预期 cost ？</h4><p>当 插入键 的分布不遵循现有键的分布时，通常会发生这种情况，从而导致模型变得不准确。不准确的模型可能会导致没有任何间隙的长连续区域。插入这些完全填充的区域需要移动其中最多一半的元素以创建间隙，在最坏的情况下这需要 O(n) 时间。随着节点变大，或由于查找的访问模式发生变化，性能也可能仅仅由于随机噪声而降低。</p><hr><h3 id="删除、更新"><a href="#删除、更新" class="headerlink" title="删除、更新"></a>删除、更新</h3><p>要删除key，则进行查找以找到key的位置，然后删除它及其有效负载。删除不会移动任何现有键，因此删除是比插入更简单的操作，并且不会导致模型准确性降低。如果数据节点由于删除而达到密度下限 d~l~，则 <strong>收缩</strong> 该数据节点以避免空间利用率低。此外，使用节点内 cost 模型来确定两个数据节点应该合并在一起并可能向上增长，从而局部将 RMI 深度减少 1。但是，为了简单起见，我们不实现这些合并操作。</p><p>【<strong>如何收缩？简单起见，不合并，要合并怎么办？效果会好吗</strong>？】</p><p>更新：修改键是通过组合插入和删除来实现的。仅修改有效负载的更新将查找 key 并将新值写入有效负载。</p><hr><h3 id="处理越界插入"><a href="#处理越界插入" class="headerlink" title="处理越界插入"></a>处理越界插入</h3><p>低于或高于现有键空间的键将分别插入到最左边或最右边的数据节点中。一系列越界插入（如仅追加插入工作负载）将导致性能不佳，因为该数据节点没有分裂越界键空间的机制。因此，ALEX有两种方式可以顺利处理越界插入。</p><p>首先，当检测到现有键空间之外的插入时，ALEX 将扩展根节点，从而扩展键空间，如图 6 所示。可将子指针数组的大小向右扩展。指向现有子项的现有指针不会被修改。为扩展的指针数组中的每个新槽创建一个新的数据节点。若此扩展导致根节点超过最大节点大小，ALEX 将创建一个新的根节点。新根节点的第一个子指针将指向旧根节点，并为新根节点的其他每个指针槽创建一个新数据节点。最后，越界键将落入新创建的数据节点之一。</p><img src="/posts/53ff/image-20240412212122272.png" class title="img"><p>其次，ALEX 最右边的数据节点通过 维护节点中最大键的值 并 保留插入超过最大值的计数器 来检测追加插入行为。如果大多数【<strong>是根据计数器大小判断</strong>？】插入超过最大值，则意味着仅追加行为，因此数据节点向右扩展，而不进行基于模型的重新插入；扩展的空间最初保持为空，以期待更多类似附加的插入。</p><hr><h3 id="批量加载"><a href="#批量加载" class="headerlink" title="批量加载"></a>批量加载</h3><p>ALEX 支持批量加载操作，该操作在实践中用于在初始化时索引大量数据或重建索引。我们的目标是找到一个 cost 最小的 RMI 结构，cost 定义为在此 RMI 上执行操作（即查找或插入）的预期平均时间。任何 ALEX 操作都是由到数据节点的 TraverseToLeaf 和节点内操作组成，因此 RMI cost 是通过结合 TraverseToLeaf 和节点内 cost 模型来建模的。</p><h4 id="批量加载算法"><a href="#批量加载算法" class="headerlink" title="批量加载算法"></a>批量加载算法</h4><p>使用 cost 模型，从根节点开始贪婪地向下增长 RMI。在每个节点，独立地决定该节点应该是数据节点还是内部节点，以及在后一种情况下，扇出应该是什么。<strong>扇出必须是2的幂，子节点将平分当前节点的key空间</strong>。</p><p>在每个节点本地就可做出此决策，因为使用线性 cost 模型，决策将对 RMI 的总体 cost 产生纯粹的累加效应。如果该节点是内部节点，则将在其每个子节点上递归。这将持续下去，直到所有数据都加载到 ALEX 中。</p><img src="/posts/53ff/image-20240412212129080.png" class title="img"><h4 id="扇出树"><a href="#扇出树" class="headerlink" title="扇出树"></a>扇出树</h4><p>随着 RMI 的发展，主要挑战是确定每个节点的最佳扇出。</p><p>引入扇出树（FT）概念，它是一棵完全二叉树。 FT 将帮助决定单个 RMI 节点的扇出；在批量加载算法中，每次决定 RMI 节点的最佳扇出时，都构造一个 FT 树。<strong>扇出为 1 意味着 RMI 节点应该是数据节点</strong>。</p><p>图 7 显示了 FT 示例。每个 FT 节点代表 RMI 节点的一个可能的子节点。如果 RMI 节点的 key 空间为[0,1)，则在某个具有 n 个节点的层级上，第 i 个 FT 节点表示 key 空间为 [i/n,(i+1)/n) 的 子RMI节点。每个 FT 节点都与在其 key 空间上构建数据节点的预期 cost 相关联，如节点内 cost 模型所预测的那样。目标是以最小的总体 cost 找到一组覆盖 RMI 节点整个 key 空间的 FT 节点。</p><p>覆盖集的总体 cost 是其 FT 节点 cost 以及由于模型大小而导致的 TraverseToLeaf cost 之和（如在 FT 中深入一层意味着 RMI 节点必须具有两倍的指针）。该覆盖集决定了 RMI 节点的最佳扇出（即子指针的数量）以及分配子指针的最佳方式。</p><p>使用以下方法来找到低 cost 的覆盖集：</p><ol><li>从FT根开始，一次增长FT的整个级别，并计算使用每个级别作为覆盖集的 cost 。继续这样做，直到每个连续级别的 cost 开始增加。在图 7 中，级别 2 的综合 cost 最低，则不再继续增长级别 3 之后的。从概念上讲，更深的级别可能具有较低的 cost ，但计算每个 FT 节点的 cost 是昂贵的。 </li></ol><p>2) 从组合 cost 最低的 FT 级别开始，开始本地合并或分裂 FT 节点。如果两个相邻 FT 节点的 cost 高于其父节点的 cost ，则合并（例如， cost 为 20 和 25 的节点合并为 cost 为 40 的节点）；当两个节点的键很少或它们的分布相似时，可能会发生这种情况。另一方面，如果 FT 节点的 cost 高于其两个子节点的 cost ，则分割 FT 节点（例如， cost 为 10 的节点被分割为两个 cost 为 1 的节点）；当 key 空间的两半具有不同的分布时，可能会发生这种情况。继续在本地合并和分裂相邻节点的过程，直到不再可能为止。</p><p>最后，返回生成的 FT 节点覆盖集。</p><p>【<strong>大大的问题：经验 cost 和预期 cost 是怎么计算的，FT树的每个层级中的 cost 是怎么计算的？怎么和RMI对应的？该问题中，层级2 cost 最小，完事怎么又合并分裂了</strong>？】</p><hr><h2 id="ALEX分析"><a href="#ALEX分析" class="headerlink" title="ALEX分析"></a>ALEX分析</h2><h3 id="RMI-深度的限制"><a href="#RMI-深度的限制" class="headerlink" title="RMI 深度的限制"></a>RMI 深度的限制</h3><p>让 m 为最大节点大小，以槽数定义（在内部节点的指针数组中，在数据节点的间隙数组中）。将节点大小限制为 2 的幂： m = 2^k^ 。内部节点最多可以有 m 多个子指针，数据节点包含的键不得超过 md~u~ 个。让所有要索引的键都落在键空间 s 内。令 p 为分区的最小数量，使得当 key 空间 s 被划分为 p 个宽度相等的分区时，每个分区包含的 key 不超过 md~u~ 个。定义根节点深度为0。</p><p>定理5.1：可以构造一个满足最大节点大小和密度上限约束的 RMI，其深度不大于 ⌈log~m~p⌉——称之为最大深度。此外，可以保持插入下的最大深度。（请注意，p 在插入下可能会发生变化）</p><p>换句话说，RMI 的深度受到 <strong>s 最密集子区域的密度的限制</strong>。相比之下，B+树将深度限制为键数量的函数。定理 5.1 也可以应用于 s 内的子空间，它对应于 RMI 内的某个子树。</p><p>证明。构建具有最大深度的 RMI 非常简单。跨越大小为 |s|/p 的键空间的<strong>最密集子区域</strong>【<strong>如何甄别</strong>？】被分配给数据节点。从根到这个最密集区域的遍历路径由内部节点组成，每个内部节点有 m 个子指针。它需要 ⌈log~m~p⌉ 内部节点来缩小 |s| 的 key 空间大小至 |s|/p。为了最小化 RMI 的其他子树的深度，我们将这种构造机制递归地应用于空间 s 的其余部分。</p><p>从满足最大深度的 RMI 开始，我们使用 4.3 节中的机制根据以下策略维持最大深度： (1) 数据节点扩展直到达到最大节点大小。 (2) 当数据节点由于最大节点大小而必须分裂时，它会横向分裂以维持当前深度（可能将分裂传播到某个祖先内部节点）。(3) 当不再可能横向分裂时（所有祖先节点都处于最大节点大小），向下分裂。</p><p><strong>通过遵循此策略，RMI 仅当 p 增长 m 倍时才向下分裂，从而保持最大深度</strong>。</p><h3 id="复杂性分析"><a href="#复杂性分析" class="headerlink" title="复杂性分析"></a>复杂性分析</h3><p>查找和插入都在 ⌈log~m~ p⌉ 时间内完成 TraverseToLeaf。在数据节点内，查找的指数搜索在最坏情况下受 O(logm) 限制。在最好的情况下，数据节点模型完美地预测了 key 的位置，并且查找需要 O(1) 时间。</p><p>未满节点的插入由查找组成，后面可能会进行移位以引入新键的间隙。在最坏的情况下，这受到 O(m) 的限制，但由于间隙数组以高概率实现每次插入 O(logm) 次移位，因此预计大多数情况下的复杂性为 O(logm)。在最好的情况下，预测的插入位置是正确的并且是一个间隙，则将 key 准确地放置在模型预测的位置，插入复杂度为 O(1) ；此外，稍后基于模型的查找将导致直接命中 O(1)。</p><p>cost 由必须复制的元素数量来定义： (1)数据节点的扩展，其 cost 以O(m)为界。 (2)向下分裂成两个节点，其 cost 为O(m)。 (3) 横向分裂成两个节点，并在路径中向上传播到某个祖先节点，其 cost 受 O(m⌈log~m~p⌉) 限制，因为该路径上的每个内部节点也必须分裂。因此，插入全节点的最坏情况性能为 O(m⌈log~m~p⌉)。</p><hr><h2 id="实验评估"><a href="#实验评估" class="headerlink" title="实验评估"></a>实验评估</h2><p>使用各种数据集和工作负载将 ALEX 与学习索引、B+树、模型增强的 B+树 和 自适应基数树 (ART) 进行比较。此次评估表明：</p><ul><li>在只读工作负载上，ALEX 的吞吐量比 B+Tree、学习索引、模型B+树和ART 高出 4.1 倍、2.2 倍、2.9 倍、3.0 倍；索引大小小 800 倍、15 倍、160 倍、8000 倍。</li><li>在读写工作负载上，ALEX 的吞吐量分别比 B+Tree、模型 B+Tree 和 ART 高 4.0×、2.7×、2.7×，索引大小分别小 2000×、475×、36000×。</li><li><p>ALEX 具有竞争力的批量加载时间，并且在扩展到更大的数据集以及由于数据倾斜而导致分布变化时，保持优于其他索引的优势。</p></li><li><p>Gapped Array 和自适应 RMI 结构使 ALEX 能够适应不同的数据集和工作负载。</p></li></ul><hr><h4 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h4><p>使用来自某些数据集的 8 字节密钥和随机生成的固定大小的有效负载来运行所有实验。我们在 4 个数据集上评估 ALEX，其特征和 CDF 如表 1 和图 8 所示。经度数据集由 Open Street Maps [2] 中世界各地位置的经度组成。 longlat 数据集由复合键组成，这些复合键通过对每对经度和纬度应用变换 k =180·floor(经度)+纬度来组合来自开放街道地图的经度和纬度。由此产生的 keys k 分布是高度非线性的。对数正态数据集的值根据对数正态分布生成，其中 µ =0 且 σ =2，乘以 10^9^ 并向下舍入到最接近的整数。 YCSB 数据集具有表示根据 YCSB 基准 [8] 生成的用户 ID 的值，这些值均匀分布在整个 64 位域中，并使用 80 字节的有效负载。这些数据集不包含重复值。除非另有说明，否则这些数据集会随机打乱以模拟随时间变化的均匀数据集分布.</p><h4 id="工作负载"><a href="#工作负载" class="headerlink" title="工作负载"></a>工作负载</h4><p>我们评估 ALEX 的主要指标是平均吞吐量。我们评估五种工作负载的吞吐量：(1) 只读工作负载，(2) 包含 95% 读取和 5% 插入的读密集型工作负载，(3) 包含 50% 读取和 50% 插入的写密集型工作负载， (4) 具有 95% 读取和 5% 插入的短程查询工作负载，以及 (5) 只写工作负载，以完成读写范围。对于前三个工作负载，读取由单个键的查找组成。对于短程工作负载，读取由键查找和后续键扫描组成。要扫描的键的数量是从最大扫描长度为 100 的均匀分布中随机选择的。对于所有工作负载，要查找的键是根据 Zipfian 分布从索引中现有键的集合中随机选择的。前四个工作负载大致分别对应于 YCSB 基准 [8] 中的工作负载 C、B、A 和 E。对于给定的数据集，我们用 1 亿个键初始化一个索引。然后，我们运行工作负载 60 秒，插入剩余的密钥。我们报告当时完成的操作的吞吐量，其中操作要么是插入，要么是读取。对于读写工作负载，我们交错操作：对于读密集型工作负载和短范围工作负载，我们执行 19 次读取/扫描，然后执行 1 次插入，然后重复该循环；<strong>对于写入密集型工作负载，我们执行 1 次读取，然后执行 1 次插入，然后重复该循环</strong>。</p><hr><h3 id="Drilldown-into-ALEX-Design-Trade-offs"><a href="#Drilldown-into-ALEX-Design-Trade-offs" class="headerlink" title="Drilldown into ALEX Design Trade-offs"></a>Drilldown into ALEX Design Trade-offs</h3><p>在本节中，我们将深入探讨节点布局和自适应 RMI 如何帮助 ALEX 实现其设计目标。</p><p>ALEX 相对于学习索引的部分优势来自于在数据节点中使用基于模型的插入和间隙数组，但 ALEX 对于动态工作负载的大部分优势来自于<strong>自适应 RMI</strong>。</p><p>为了演示每个贡献的效果，图 13 显示，采用 2 层学习索引并用每个叶的间隙数组（LI w/Gapped Array）替换单个密集值数组，对于只读工作负载，已经比学习索引实现了显着的加速。然而，带有间隙数组的学习索引在读写工作负载上的性能较差，因为存在完全填充的区域，需要为每次插入移动许多键。 ALEX 使 RMI 结构适应数据的能力对于良好的插入性能是必要的。</p><p>在查找过程中，大部分时间都花在围绕预测位置进行本地搜索。较小的预测误差直接有助于减少查找时间。为了分析 Learned Index 和 ALEX 的预测误差，我们用经度数据集中的 1 亿个键初始化一个索引，使用该索引来预测这 1 亿个键中每个键的位置，并跟踪预测位置与实际位置之间的距离。图 14a 显示学习索引在模式大约 8-32 个位置处存在预测误差，并且右侧有长尾。另一方面，ALEX 通过使用基于模型的插入实现了低得多的预测误差。</p><p>图14b显示，初始化后，ALEX通常没有预测误差，发生的误差通常很小，并且误差的长尾已经消失。图 14c 显示，即使在 2000 万次插入之后，ALEX 仍保持较低的预测误差。</p><p>一旦数据节点变满，就会发生以下四种操作之一：如果不存在 cost 偏差，则 (1) 扩展节点并缩放模型。否则，节点要么 (2) 扩展并重新训练其模型，(3) 横向分割，或 (4) 向下分割。表 3 显示，在绝大多数情况下，数据节点只是扩展，模型也进行了缩放，这意味着即使在插入之后模型通常仍然保持准确（假设没有发生根本的分布变化）。数据节点变满的次数与数据节点的数量相关（表2）。在YCSB上，通过模型再训练进行扩展更为常见，因为数据节点很大，因此 cost 偏差通常只是由随机性引起的。</p><p>如果需要，用户可以调整最大节点大小以实现目标尾部延迟。在图 15 中，我们在经度数据集上运行写入密集型工作负载，测量每个操作的延迟。随着我们增加最大节点大小，ALEX 的中值甚至 p99 延迟都会减少，因为 ALEX 具有更大的灵活性来构建性能更好的 RMI（例如，具有更高的内部节点扇出的能力）。然而，最大延迟会增加，因为触发大节点扩展或分裂的插入速度很慢。如果用户对延迟有严格要求，则可以相应减小最大节点大小。将最大节点大小增加到超过 64MB 后，延迟不会改变，因为 ALEX 从未决定使用大于 64MB 的节点。</p><hr><h4 id="搜索方法比较"><a href="#搜索方法比较" class="headerlink" title="搜索方法比较"></a>搜索方法比较</h4><p>为了展示指数搜索和其他搜索方法之间的权衡，我们对合成数据进行了微基准测试。我们创建一个包含 1 亿个完全均匀分布的双精度数的数据集。然后，我们从该数据集中搜索 1000 万个随机选择的值。我们使用三种搜索方法：二分搜索和有偏四元搜索（在[20]中提出，以利用准确的预测），每种方法都使用两种不同的误差范围大小进行评估，以及指数搜索。对于每次查找，搜索方法都会得到一个预测位置，该位置与实际位置值的距离存在一定的综合误差量。图 16 显示，指数搜索的搜索时间与错误大小的对数成比例增加，而二分搜索方法花费恒定的时间，而与错误大小无关。这是因为二分查找必须始终在其误差范围内开始搜索，并且无法利用误差较小的情况。因此，如果 ALEX 中 RMI 模型的预测误差较小，指数搜索应该优于二分搜索。正如我们在第 6.3 节中所示，ALEX 通过基于模型的插入保持较低的预测误差。</p><p>因此，ALEX 非常适合利用指数搜索。当误差低于 σ 时（我们在本实验中设置 σ = 8；详细信息请参阅[20]），有向四元搜索与指数搜索具有竞争力，因为搜索可以限制在较小的范围内，但当误差超过 σ 时，其性能与二分搜索类似因为必须搜索完整的错误界限。与有偏差的四元搜索相比，我们更喜欢指数搜索，因为它的性能下降更平滑且实现简单（例如，无需调整 σ）。</p><p>参考博文：<a href="https://zhuanlan.zhihu.com/p/435878936">指数搜索 - 知乎 (zhihu.com)</a> </p><hr><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>我们在学习索引令人兴奋的基础上提出了 ALEX，这是一种新的可更新学习索引，它有效地将学习索引的核心见解与经过验证的存储和索引技术结合起来。具体来说，我们提出了一种间隙数组节点布局，它使用基于模型的插入和指数搜索，结合简单 cost 模型驱动的自适应 RMI 结构，以在动态工作负载上实现高性能和低内存占用。我们深入的实验结果表明，ALEX 不仅在读写工作负载范围内始终优于 B+Tree，甚至在所有数据集上，对于只读工作负载，其性能比现有的学习索引高出 2.2 倍。</p><p>我们相信这篇论文为我们的社区提供了重要的经验教训，并为该领域的未来研究开辟了道路。</p><p>我们打算研究有关 ALEX 性能的开放理论问题，<strong>支持大于内存数据集的二级存储，以及针对 ALEX 设计量身定制的新并发控制技术</strong>。</p><p>【<strong>方向：二级学习型索引，并发控制的学习型索引</strong>】</p><hr><h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><h3 id="类及属性"><a href="#类及属性" class="headerlink" title="类及属性"></a>类及属性</h3><h4 id="alex-base-h"><a href="#alex-base-h" class="headerlink" title="alex_base.h"></a>alex_base.h</h4><h5 id="线性回归模型"><a href="#线性回归模型" class="headerlink" title="线性回归模型"></a>线性回归模型</h5><pre class=" language-lang-c++"><code class="language-lang-c++">template<class T>class LinearModel {public:    double a_ = 0;  // 斜率    double b_ = 0;  // 截距    LinearModel() = default;    LinearModel(double a, double b) : a_(a), b_(b) {}    // 拷贝构造函数    explicit LinearModel(const LinearModel &other) : a_(other.a_), b_(other.b_) {}    // 根据给定的扩展因子（expansion_factor）来扩展线性模型的斜率和截距    void expand(double expansion_factor) {        a_ *= expansion_factor;        b_ *= expansion_factor;    }    // 预测 key 的 position_int    inline int predict(T key) const {        return static_cast<int>(a_ * static_cast<double>(key) + b_);    }    // 预测 key 的 position_double    inline double predict_double(T key) const {        return a_ * static_cast<double>(key) + b_;    }};</code></pre><h5 id="构造线性回归"><a href="#构造线性回归" class="headerlink" title="构造线性回归"></a>构造线性回归</h5><pre class=" language-lang-c++"><code class="language-lang-c++">template<class T>class LinearModelBuilder {public:    // 指向LinearModel<T>对象的指针，用于存储构建的线性模型    LinearModel <T> *model_;    explicit LinearModelBuilder<T>(LinearModel <T> *model) : model_(model) {}    // 该函数会更新相关的统计信息，包括计数、x和y的总和、x的平方总和、x和y的乘积总和以及x和y的最小值和最大值    inline void add(T x, int y) {        count_++;        x_sum_ += static_cast<long double>(x);y_sum_ += static_cast<long double>(y);        xx_sum_ += static_cast<long double>(x) * x;xy_sum_ += static_cast<long double>(x) * y;        x_min_ = std::min<T>(x, x_min_);x_max_ = std::max<T>(x, x_max_);        y_min_ = std::min<double>(y, y_min_);y_max_ = std::max<double>(y, y_max_);    }private:    // 整型变量，表示已添加的数据点的数量    int count_ = 0;    // 长双精度浮点型变量，表示所有数据点的x值的总和    long double x_sum_ = 0;    // 长双精度浮点型变量，表示所有数据点的y值的总和    long double y_sum_ = 0;    // 长双精度浮点型变量，表示所有数据点的x值的平方总和    long double xx_sum_ = 0;    // 长双精度浮点型变量，表示所有数据点的x值和y值的乘积总和    long double xy_sum_ = 0;    T x_min_ = std::numeric_limits<T>::max();    T x_max_ = std::numeric_limits<T>::lowest();    double y_min_ = std::numeric_limits<double>::max();    double y_max_ = std::numeric_limits<double>::lowest();};</code></pre><p><strong>build 方法构建模型</strong>：</p><pre class=" language-lang-c++"><code class="language-lang-c++">void build() {    if (count_ <= 1) {        model_->a_ = 0;        model_->b_ = static_cast<double>(y_sum_);        return;    }    if (static_cast<long double>(count_) * xx_sum_ - x_sum_ * x_sum_ == 0) {        // all values in a bucket have the same key.        model_->a_ = 0;        model_->b_ = static_cast<double>(y_sum_) / count_;        return;    }    auto slope = static_cast<double>(        (static_cast<long double>(count_) * xy_sum_ - x_sum_ * y_sum_) /        (static_cast<long double>(count_) * xx_sum_ - x_sum_ * x_sum_));    auto intercept = static_cast<double>(        (y_sum_ - static_cast<long double>(slope) * x_sum_) / count_);    model_->a_ = slope;    model_->b_ = intercept;    // If floating point precision errors, fit spline    if (model_->a_ <= 0) {        if (x_max_ - x_min_ == 0) {            model_->a_ = 0;            model_->b_ = static_cast<double>(y_sum_) / count_;        } else {            model_->a_ = (y_max_ - y_min_) / (x_max_ - x_min_);            model_->b_ = -static_cast<double>(x_min_) * model_->a_;        }    }}</code></pre><hr><h5 id="工具方法"><a href="#工具方法" class="headerlink" title="工具方法"></a>工具方法</h5><pre class=" language-lang-c++"><code class="language-lang-c++">/*** Helper methods for bitmap ***/// Extract the rightmost 1 in the binary representation.// e.g. extract_rightmost_one(010100100) = 000000100inline uint64_t extract_rightmost_one(uint64_t value) {    return value & -static_cast<int64_t>(value);}// Remove the rightmost 1 in the binary representation.// e.g. remove_rightmost_one(010100100) = 010100000inline uint64_t remove_rightmost_one(uint64_t value) {    return value & (value - 1);}// Count the number of 1s in the binary representation.// e.g. count_ones(010100100) = 3inline int count_ones(uint64_t value) {    return static_cast<int>(_mm_popcnt_u64(value));}// Get the offset of a bit in a bitmap.// word_id is the word id of the bit in a bitmap// bit is the word that contains the bitinline int get_offset(int word_id, uint64_t bit) {    // 返回该位在位图中的偏移量    return (word_id << 6) + count_ones(bit - 1);}// https://stackoverflow.com/questions/364985/algorithm-for-finding-the-smallest-power-of-two-thats-greater-or-equal-to-a-giv// 返回大于或等于x的最小2的幂次方数inline int pow_2_round_up(int x) {    --x;    x |= x >> 1;    x |= x >> 2;    x |= x >> 4;    x |= x >> 8;    x |= x >> 16;    return x + 1;}// https://stackoverflow.com/questions/994593/how-to-do-an-integer-log2-in-c// 返回小于或等于x的最大2的幂次方数的指数inline int log_2_round_down(int x) {    int res = 0;    while (x >>= 1) ++res;    return res;}</code></pre><h5 id="统计方法"><a href="#统计方法" class="headerlink" title="统计方法"></a>统计方法</h5><pre class=" language-lang-c++"><code class="language-lang-c++">/*** Cost model weights ***/// Intra-node cost weightsconstexpr double kExpSearchIterationsWeight = 20;constexpr double kShiftsWeight = 0.5;// TraverseToLeaf cost weightsconstexpr double kNodeLookupsWeight = 20;constexpr double kModelSizeWeight = 5e-7;/*** Stat Accumulators ***/// 统计数据节点的搜索迭代次数和位移数量struct DataNodeStats {    double num_search_iterations = 0;    double num_shifts = 0;};// Used when stats are computed using a sample// 用于在计算统计数据时使用样本struct SampleDataNodeStats {    // 样本大小的对数    double log2_sample_size = 0;    // 搜索迭代次数    double num_search_iterations = 0;    // 位移数量的对数    double log2_num_shifts = 0;};// Accumulates stats that are used in the cost model, based on the actual vs// predicted position of a keyclass StatAccumulator {    public:    virtual ~StatAccumulator() = default;    // 用于根据实际位置和预测位置来累积统计信息    virtual void accumulate(int actual_position, int predicted_position) = 0;    // 用于获取当前的统计信息    virtual double get_stat() = 0;    // 重置统计信息    virtual void reset() = 0;};</code></pre><p><strong>计算预期的指数搜索迭代次数</strong>：</p><pre class=" language-lang-c++"><code class="language-lang-c++">// Mean log error represents the expected number of exponential search iterations when doing a lookupclass ExpectedSearchIterationsAccumulator : public StatAccumulator {    public:    // 计算预期的指数搜索迭代次数    void accumulate(int actual_position, int predicted_position) override {        // 计算实际位置和预测位置之间的差的绝对值加1的对数        cumulative_log_error_ +=            std::log2(std::abs(predicted_position - actual_position) + 1);        count_++;    }    double get_stat() override {        if (count_ == 0) return 0;        // 返回当前的平均对数误差        return cumulative_log_error_ / count_;    }    void reset() override {        cumulative_log_error_ = 0;        count_ = 0;    }    public:    double cumulative_log_error_ = 0;    int count_ = 0;};</code></pre><p><strong>计算预期的插入操作中的移位次数</strong>：</p><pre class=" language-lang-c++"><code class="language-lang-c++">// Mean shifts represents the expected number of shifts when doing an insertclass ExpectedShiftsAccumulator : public StatAccumulator {public:    explicit ExpectedShiftsAccumulator(int data_capacity)        : data_capacity_(data_capacity) {}    // A dense region of n keys will contribute a total number of expected shifts    // of approximately    // ((n-1)/2)((n-1)/2 + 1) = n^2/4 - 1/4    // This is exact for odd n and off by 0.25 for even n.    // Therefore, we track n^2/4.    void accumulate(int actual_position, int) override {        if (actual_position > last_position_ + 1) {            long long dense_region_length = last_position_ - dense_region_start_idx_ + 1;            num_expected_shifts_ += (dense_region_length * dense_region_length) / 4;            dense_region_start_idx_ = actual_position;        }        last_position_ = actual_position;        count_++;    }    double get_stat() override {        if (count_ == 0) return 0;        // first need to accumulate statistics for current packed region        long long dense_region_length = last_position_ - dense_region_start_idx_ + 1;        long long cur_num_expected_shifts =            num_expected_shifts_ + (dense_region_length * dense_region_length) / 4;        return cur_num_expected_shifts / static_cast<double>(count_);    }    void reset() override {        last_position_ = -1;        dense_region_start_idx_ = 0;        num_expected_shifts_ = 0;        count_ = 0;    }public:    int last_position_ = -1;            // 最后一个位置    int dense_region_start_idx_ = 0;    // 密集区域的起始索引    long long num_expected_shifts_ = 0; // 预期的移位次数    int count_ = 0;    int data_capacity_ = -1;            // 节点的容量};</code></pre><hr><h4 id="alex-node-h"><a href="#alex-node-h" class="headerlink" title="alex_node.h"></a>alex_node.h</h4><p><strong>宏定义，控制编译条件</strong>：</p><pre class=" language-lang-c++"><code class="language-lang-c++">// Whether we store key and payload arrays separately in data nodes// By default, we store them separately#define ALEX_DATA_NODE_SEP_ARRAYS 1#if ALEX_DATA_NODE_SEP_ARRAYS#define ALEX_DATA_NODE_KEY_AT(i) key_slots_[i]#define ALEX_DATA_NODE_PAYLOAD_AT(i) payload_slots_[i]#else#define ALEX_DATA_NODE_KEY_AT(i) data_slots_[i].first#define ALEX_DATA_NODE_PAYLOAD_AT(i) data_slots_[i].second#endif// Whether we use lzcnt and tzcnt when manipulating a bitmap (e.g., when finding the closest gap).// If your hardware does not support lzcnt/tzcnt (e.g., your Intel CPU is pre-Haswell), set this to 0.#define ALEX_USE_LZCNT 1</code></pre><h5 id="AlexNode"><a href="#AlexNode" class="headerlink" title="AlexNode"></a>AlexNode</h5><pre class=" language-lang-c++"><code class="language-lang-c++">// A parent class for both types of ALEX nodestemplate<class T, class P>class AlexNode {public:    // Whether this node is a leaf (data) node    bool is_leaf_ = false;    // Power of 2 to which the pointer to this node is duplicated in its parent model node    // For example, if duplication_factor_ is 3, then there are 8 redundant    // pointers to this node in its parent    // 指向这个节点的指针在其父模型节点中被复制的次数。    // 例如，如果duplication_factor_为3，那么在其父节点中有8个指向这个节点的冗余指针    uint8_t duplication_factor_ = 0;    // Node's level in the RMI. Root node is level 0    short level_ = 0;    // Both model nodes and data nodes nodes use models    LinearModel<T> model_;    // Could be either the expected or empirical cost, depending on how this field is used    double cost_ = 0.0;    AlexNode() = default;    explicit AlexNode(short level) : level_(level) {}    AlexNode(short level, bool is_leaf) : is_leaf_(is_leaf), level_(level) {}    virtual ~AlexNode() = default;    // The size in bytes of all member variables in this class    virtual long long node_size() const = 0;};</code></pre><h5 id="AlexModelNode"><a href="#AlexModelNode" class="headerlink" title="AlexModelNode"></a>AlexModelNode</h5><pre class=" language-lang-c++"><code class="language-lang-c++">template<class T, class P, class Alloc = std::allocator<std::pair<T, P>>>class AlexModelNode : public AlexNode<T, P> {public:    // 类型别名: 当前类的类型    typedef AlexModelNode<T, P, Alloc> self_type;    // 定义一个类型别名 alloc_type,它是 Alloc 分配器类针对 self_type 类型的特化版本的类型    typedef typename Alloc::template rebind<self_type>::other alloc_type;    typedef typename Alloc::template rebind<AlexNode<T, P> *>::other pointer_alloc_type;    const Alloc &allocator_;    // Number of logical children. Must be a power of 2    int num_children_ = 0;    // Array of pointers to children    AlexNode<T, P> **children_ = nullptr;    // 指向子节点的指针数组    // 构造函数1：使用默认分配器初始化对象    explicit AlexModelNode(const Alloc &alloc = Alloc())            : AlexNode<T, P>(0, false), allocator_(alloc) {}    // 构造函数2：使用指定的层级和默认分配器初始化对象    explicit AlexModelNode(short level, const Alloc &alloc = Alloc())            : AlexNode<T, P>(level, false), allocator_(alloc) {}    ~AlexModelNode() {        if (children_ == nullptr) {            return;        }        // 调用 pointer_allocator() 函数获取分配器对象,        // 并使用其 deallocate 方法释放 children_ 指向的内存空间. num_children_ 参数指定要释放的多少        pointer_allocator().deallocate(children_, num_children_);    }    AlexModelNode(const self_type &other) : AlexNode<T, P>(other), allocator_(other.allocator_),                                            num_children_(other.num_children_) {        // 使用分配器对象pointer_allocator()分配一块内存空间,大小为other.num_children_个指针的大小,        // 并将返回的指针赋值给children_        children_ = new(pointer_allocator().allocate(other.num_children_))                AlexNode<T, P> *[other.num_children_];        // 将other对象的子节点指针数组复制到当前对象的子节点指针数组中        std::copy(other.children_, other.children_ + other.num_children_, children_);    }    // Given a key, traverses to the child node responsible for that key    // 根据给定的键（key）获取对应的子节点指针    inline AlexNode<T, P> *get_child_node(const T &key) {        int bucketID = this->model_.predict(key);        bucketID = std::min<int>(std::max<int>(bucketID, 0), num_children_ - 1);        return children_[bucketID];    }    pointer_alloc_type pointer_allocator() {        return pointer_alloc_type(allocator_);    }    // 计算节点的大小,包括当前对象的大小以及子节点指针数组的大小    long long node_size() const override {        long long size = sizeof(self_type);        size += num_children_ * sizeof(AlexNode<T, P> *);  // pointers to children        return size;    }};</code></pre><p><strong>内部节点扩展</strong>：</p><pre class=" language-lang-c++"><code class="language-lang-c++">// Expand by a power of 2 by creating duplicates of all existing child pointers.// Input is the base 2 log of the expansion factor, in order to guarantee expanding by a power of 2.// Returns the expansion factor.// 通过创建现有子指针的副本来将数据结构扩展到2的幂次方大小int expand(int log2_expansion_factor) {    assert(log2_expansion_factor >= 0);    // 实际的扩展因子    int expansion_factor = 1 << log2_expansion_factor;    // 新的子节点数量    int num_new_children = num_children_ * expansion_factor;    auto new_children = new(pointer_allocator().allocate(num_new_children))        AlexNode<T, P> *[num_new_children];    int cur = 0;    // 遍历现有的子节点，并将每个子节点复制到新数组中相应的位置    while (cur < num_children_) {        AlexNode<T, P> *cur_child = children_[cur];        // 复制的数量由当前子节点的duplication_factor_属性决定。        int cur_child_repeats = 1 << cur_child->duplication_factor_;        for (int i = expansion_factor * cur; i < expansion_factor * (cur + cur_child_repeats); i++) {            new_children[i] = cur_child;        }        // 更新当前子节点的duplication_factor_属性，以便记录其被复制的次数。        cur_child->duplication_factor_ += log2_expansion_factor;        cur += cur_child_repeats;    }    pointer_allocator().deallocate(children_, num_children_);    children_ = new_children;    num_children_ = num_new_children;    this->model_.expand(expansion_factor);    return expansion_factor;}</code></pre><h5 id="AlexDataNode"><a href="#AlexDataNode" class="headerlink" title="AlexDataNode"></a>AlexDataNode</h5><p><strong>封装类型别名</strong>：</p><pre class=" language-lang-c++"><code class="language-lang-c++">template<class T, class P, class Compare = AlexCompare, class Alloc = std::allocator<std::pair<T, P>>, bool allow_duplicates = true>class AlexDataNode : public AlexNode<T, P> {    public:        // 类型别名V, 表示键值对的类型        typedef std::pair<T, P> V;        // 类型别名self_type, 表示当前类的类型        typedef AlexDataNode<T, P, Compare, Alloc, allow_duplicates> self_type;        // 类型别名alloc_type, 表示用于分配self_type对象的分配器类型        typedef typename Alloc::template rebind<self_type>::other alloc_type;        // 类型别名key_alloc_type, 表示用于分配键类型的分配器类型        typedef typename Alloc::template rebind<T>::other key_alloc_type;        // 类型别名payload_alloc_type, 表示用于分配值类型的分配器类型        typedef typename Alloc::template rebind<P>::other payload_alloc_type;        // 类型别名value_alloc_type, 表示用于分配键值对类型的分配器类型        typedef typename Alloc::template rebind<V>::other value_alloc_type;        // 类型别名bitmap_alloc_type, 表示用于分配位图类型的分配器类型        typedef typename Alloc::template rebind<uint64_t>::other bitmap_alloc_type;        // 常量引用key_less_, 表示用于比较键大小的比较函数对象        const Compare &key_less_;        // 常量引用allocator_, 表示用于分配内存的分配器对象        const Alloc &allocator_;        // Forward declaration        template<typename node_type = self_type, typename payload_return_type = P, typename value_return_type = V>        class Iterator;    // 迭代容器中的元素        // 类型别名iterator_type, 表示非const迭代器类型        typedef Iterator<> iterator_type;        // 类型别名const_iterator_type, 表示const迭代器类型        typedef Iterator<const self_type, const P, const V> const_iterator_type;        // 一个指向下一个叶子节点的指针next_leaf_, 初始值为nullptr        self_type *next_leaf_ = nullptr;        // 一个指向上一个叶子节点的指针prev_leaf_, 初始值为nullptr        self_type *prev_leaf_ = nullptr;};</code></pre><p>数据节点属性：</p><pre class=" language-lang-c++"><code class="language-lang-c++">#if ALEX_DATA_NODE_SEP_ARRAYS    T *key_slots_ = nullptr;        // holds keys    P *payload_slots_ = nullptr;    // holds payloads, must be same size as key_slots#else    V* data_slots_ = nullptr;  // holds key-payload pairs#endif// 键/数据槽数组的大小int data_capacity_ = 0;  // size of key/data_slots array// 已填充的键/数据槽的数量（与间隙相对）int num_keys_ = 0;  // number of filled key/data slots (as opposed to gaps)// Bitmap: each uint64_t represents 64 positions in reverse order// (i.e., each uint64_t is "read" from the right-most bit to the left-most bit)// bitmap_是一个位图，每个uint64_t代表64个位置，从右到左读取uint64_t *bitmap_ = nullptr;// 位图中的int64_t数量int bitmap_size_ = 0;  // number of int64_t in bitmap// Variables related to resizing (expansions and contractions)static constexpr double kMaxDensity_ = 0.8;  // density after contracting,// also determines the expansion // thresholdstatic constexpr double kInitDensity_ = 0.7;  // density of data nodes after bulk loadingstatic constexpr double kMinDensity_ = 0.6;  // density after expanding, also// determines the contraction // thresholddouble expansion_threshold_ = 1;  // expand after m_num_keys is >= this numberdouble contraction_threshold_ = 0;  // contract after m_num_keys is < this numberstatic constexpr int kDefaultMaxDataNodeBytes_ = 1 << 24;  // by default, maximum data node size is 16MB// 最大键/数据槽的数量，不能超过这个数量进行扩展int max_slots_ = kDefaultMaxDataNodeBytes_ / sizeof(V);  // cannot expand beyond this number of key/data slots// Counters used in cost modelslong long num_shifts_ = 0;                 // does not reset after resizinglong long num_exp_search_iterations_ = 0;  // does not reset after resizingint num_lookups_ = 0;                      // does not reset after resizingint num_inserts_ = 0;                      // does not reset after resizingint num_resizes_ = 0;  // technically not required, but nice to have// Variables for determining append-mostly behaviorT max_key_ = std::numeric_limits<T>::lowest();  // max key in node, updates after inserts but not erasesT min_key_ = std::numeric_limits<T>::max();  // min key in node, updates after// inserts but not erasesint num_right_out_of_bounds_inserts_ = 0;  // number of inserts that are larger than the max keyint num_left_out_of_bounds_inserts_ = 0;  // number of inserts that are smaller than the min key// Node is considered append-mostly if the fraction of inserts that are out of// bounds is above this threshold// Append-mostly nodes will expand in a manner that anticipates further// appendsstatic constexpr double kAppendMostlyThreshold = 0.9;// Purely for benchmark debugging purposesdouble expected_avg_exp_search_iterations_ = 0;double expected_avg_shifts_ = 0;// Placed at the end of the key/data slots if there are gaps after the max key// 一个哨兵值，放置在键/数据槽的末尾，用于标记最大键之后的任何间隙static constexpr T kEndSentinel_ = std::numeric_limits<T>::max();</code></pre><p><strong>构造函数</strong>：</p><pre class=" language-lang-c++"><code class="language-lang-c++">```**迭代器**：```c++</code></pre><p><strong>插入</strong>：</p><pre class=" language-lang-c++"><code class="language-lang-c++"></code></pre><p><strong>查询</strong>：</p><p><code>c++</code></p>]]></content>
      
      
      <categories>
          
          <category> 学习型索引 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习型索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08-学习型索引-FINEdex</title>
      <link href="posts/323e.html"/>
      <url>posts/323e.html</url>
      
        <content type="html"><![CDATA[<h2 id="研究现状"><a href="#研究现状" class="headerlink" title="研究现状"></a>研究现状</h2><p>随着现有数据量的快速增长，人们考虑使用学习索引来替换传统的索引结构。但是传统的学习索引无法解决高并发需求，作者首先总结了现有的学习索引存在的短板：</p><ul><li>有限的可扩展性。针对插入更新操作，现有的学习索引很难拥有很好的性能。目前提出的一些学习索引结构只能单独的解决高并发的读，写，重训练。FITing-tree,ALEX,PGM-index都没有考虑数据一致性问题。XIndex通过把数据保存在不同的数据结构中来解决并发的数据一致性问题，这样会导致范围查询操作的性能低下。</li><li>高开销问题。XIndex和FITing-tree都是通过建立一个delta buffer来解决插入操作，该缓冲区是B+树或者Mass树。并且XIndex显示，当缓冲区过大时，会产生很大程度的性能下降。ALEX和PGM-index是通过在索引结构中保留了空槽来解决插入时产生的高开销问题。一旦发生多线程访问时，会发生多个线程的冲突访问情况，这会导致并发操作的性能下降。</li></ul><p>作者提出了FINEdex做出了如下贡献：</p><ol><li>高可伸缩性。提出了一种用于并发内存系统的非粒度学习索引方案，即FINEdex，它有效地满足了可伸缩性的要求。主要的贡献是通过充实的数据结构来减少数据依赖性，并同时在两个粒度中对模型进行重新训练。</li><li>低开销的索引操作和无阻塞的重训练操作。</li><li>系统应用以及评测。</li></ol><p><img src="https://yux20000304.github.io/2022/10/12/FINEdex%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/1.png" alt="img"></p><p>上图给出了目前现有的学习索引的功能。</p><h2 id="设计部分介绍"><a href="#设计部分介绍" class="headerlink" title="设计部分介绍"></a>设计部分介绍</h2><p>首先给出了数据结构设计部分。</p><p><img src="https://yux20000304.github.io/2022/10/12/FINEdex%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/2.png" alt="img"></p><p>作者通过对XIndex的设计结构进行修改，实现了一个高效的并发性数据索引结构。实现了一个两级的有序数组结构。该结构能够很好的避免数据依赖性并且能够保持数据的有序性。并且在插入的过程中，旧数据的访问不会受到影响。只有当缓冲区满了的时候，才会发生数据合并以及模型重训练操作。作者把整个设计分成了两个部分：</p><ol><li>模型部分：这些独立的模型可以通过并发的再训练来适应新的数据分布。</li><li>数据部分：通过层级结构，建立了两层有序数组，提供能快速重训练的方案。</li></ol><ul><li>模型部分，首先作者设计了一个方案来提高模型的准确率。学习探针算法LPA。通过在f(x)函数周围建立一个平行四边形囊括所有的训练数据，之后再使用线性回归模型进行拟合。传统的RMI模型，由于无法针对不同分布的数据来决定模型的个数，RMI模型的准确率一直是一个潜在的问题。LPA算法通过设置一个错误率阈值，来判断某一组数据是否为线性分布的。如果大于这个阈值，那么移除该数据集靠后的一部分数据，如果小于阈值，那么添加新的数据进入原来的数据集中再重新训练。这个过程一共需要提供如下几个参数：</li></ul><ol><li>threshold：错误率阈值。</li><li>learning_step：学习步长，用来决定学习速度的参数之一。</li><li>learning_rate：学习率，用来决定学习速度的参数之一。<br>整个过程是一个贪心算法。最终得到的输出是一串错误率为threshold的线性模型链。</li></ol><p>除了以上的几个参数设置，作者还提出了优化模型输出的方案。上面提到了LPA算法得到的是一串线性模型链，在执行查找等操作时，需要顺序遍历整个模型链。最终作者选择使用优化后的b树来存储这些模型<key，model>，key代表了一个模型的最大元素。</key，model></p><ul><li>数据部分，主要解决了并发性问题。每一个模型都有一个小型的缓冲区来解决修改和插入等操作。整个小型缓冲区被设计成了两层的b树结构，在训练好的模型中，每个数组中的元素都有一个bin指针，用来指向level bin缓冲区，该缓冲区分为root层和child层，首先插入的数据会被放到root层，随着root层满了，会创建child节点来存储新插入的节点，之后插入的节点会优先插入到靠前的child节点来节约空间使用。<strong>缺陷：在插入的过程中需要不断地调整树形结构，这可能会造成很大的性能开销</strong></li></ul><ul><li><p>紧接着，作者提出了在并发情况下的模型重训练设计思路。作者把重训练分成了两个部分：level-bin重训练和模型重训练。</p><ul><li>level-bin重训练<br>作者提出每当一个level-bin层满了之后，只需要对一个该层进行重训练，不需要影响其余的level-bin节点，产生的时间开销仅有27us</li><li>模型重训练<br>作者通过使用RCU技术保证了新模型的训练过程中，旧模型的访问操作不被影响。由于level-bins是通过指针指向的，我们只需要在复制的过程中使用新的指针指向level-bin即可。模型重训练会在模型需要重新训练一个更小的模型时被触发。</li></ul></li><li><p>并发：作者通过提出一系列方案来解决并发冲突</p><ul><li>写写冲突：当不同线程需要对同样的数据或者是bin进行修改会产生写写冲突。作者提出使用细粒度的锁分别对记录和bin进行上锁。对记录上锁的操作比较简单，对于bin上锁，需要根据情况进行上锁，有的时候可能只需要对child bin进行上锁，有的情况需要对root bin也进行上锁。</li><li>读写冲突：通过使用版本控制实现数据一致性。每次完成训练后，都会给模型和数据分配一个版本号。在一次访问过程中，首先会获取版本号，如果在读取完成后版本号没有发生改变，那么说明读取操作的数据是有效的，如果无效那么重新发起读请求。</li></ul></li></ul><h2 id="测试部分介绍"><a href="#测试部分介绍" class="headerlink" title="测试部分介绍"></a>测试部分介绍</h2><p>在redis中进行测试。只修改了基础的排序数据结构。一共提供了六个常见的api（train，get，put，update，remove，scan）。一共分配了4个线程来执行模型的重训练，访问过程一共分为三步：在模型中进行查找，计算区间，操作level-bin。使用24线程进行测试。使用了Masstree，Xindex，LI+Δ三个索引设计方案进行对比。没有采用redis原生的跳表结构进行对比，因为其与树形结构的性能比较类似。使用LI+Δ方案时，为了让其支持并发操作，使用了XIndex的delta buffer方案，使用masstree管理该缓冲区。FIT树由于不支持并发没有进行比较。</p><ul><li>配置部分：学习索引结构都使用了两层RMI模型，第二层最多容纳250k的模型数量（XIndex中得出的结论）。FINEdex的threshold我们设置成32，level-bin层的root设置成8，child bin大小设置为16。</li><li>使用的测试工具：<ol><li>YCSB测试工具：一共提供了六种不同的测试负载。</li><li>网络博客负载</li><li>文档id负载</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习型索引 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习型索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LearnedIndex-Papers</title>
      <link href="posts/5da4.html"/>
      <url>posts/5da4.html</url>
      
        <content type="html"><![CDATA[<h2 id="学习型索引"><a href="#学习型索引" class="headerlink" title="学习型索引"></a>学习型索引</h2><h3 id="1-论文"><a href="#1-论文" class="headerlink" title="1. 论文"></a>1. 论文</h3><h4 id="1-1-年份"><a href="#1-1-年份" class="headerlink" title="1.1 年份"></a>1.1 年份</h4><h5 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h5><div class="table-container"><table><thead><tr><th>发表年份</th><th>原文地址</th><th>Code</th></tr></thead><tbody><tr><td><a href="papers/2018-SIGMOD-The_Case_for_Learned_Index_Structures.pdf">2018-SIGMOD-The Case for Learned Index Structures</a> : 开山之作</td><td><a href="https://dl.acm.org/doi/pdf/10.1145/3183713.3196909">Sigmod</a></td><td><a href="https://github.com/learnedsystems/RMI">learnedsystems/RMI</a></td></tr></tbody></table></div><hr><h5 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h5><div class="table-container"><table><thead><tr><th>发表年份</th><th>原文地址</th><th>Code</th></tr></thead><tbody><tr><td><a href="papers/2019-arXiv-A_Benchmark_for_Learned_Indexes.pdf">2019-arXiv-SOSD: A Benchmark for Learned Indexes</a>  : 测试基准</td><td><a href="https://arxiv.org/pdf/1911.13014.pdf">arXiv</a></td><td><a href="https://github.com/learnedsystems/SOSD">learnedsystems/SOSD</a></td></tr><tr><td><a href="papers/2019-arXiv-A_Scalable_Learned_Index_Scheme_in_Storage_Systems.pdf">2019-arXiv-A Scalable Learned Index Scheme in Storage Systems</a>:  FINEdex 版之始</td><td><a href="https://arxiv.org/pdf/1905.06256.pdf">arXiv</a></td><td></td></tr><tr><td><a href="papers/2019-SIGMOD-FITing-Tree_A_Data-aware_Index_Structure.pdf">2019-SIGMOD-FITing-Tree_A Data-aware Index Structure</a></td><td><a href="https://dl.acm.org/doi/pdf/10.1145/3299869.3319860">Sigmod</a></td><td></td></tr><tr><td><a href="papers/2019-软件学报-基于中间层的可扩展学习索引技术.pdf">2019-软件学报-基于中间层的可扩展学习索引技术</a></td><td><a href="https://www.jos.org.cn/html/2020/3/5910.htm">软件学报</a></td></tr></tbody></table></div><hr><h5 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h5><div class="table-container"><table><thead><tr><th>发表年份</th><th>原文地址</th><th>Code</th></tr></thead><tbody><tr><td><a href="papers/2020-软件学报-学习索引：现状与研究展望.pdf">2020-软件学报-学习索引：现状与研究展望</a></td><td><a href="https://www.jos.org.cn/html/2021/4/6168.htm">软件学报</a></td><td></td></tr><tr><td><a href="papers/2020-aiDM-RadixSpline_A_Single-Pass_Learned_Index.pdf">2020-aiDM-RadixSpline_A Single-Pass Learned Index</a></td><td><a href="https://dl.acm.org/doi/pdf/10.1145/3401071.3401659">aiDM</a></td><td></td></tr><tr><td><a href="papers/2020-APSys-SIndex_A_Scalable_Learned_Index_for_String_Keys.pdf">2020-APSys-SIndex_A Scalable Learned Index for String Keys</a></td><td><a href="https://dl.acm.org/doi/pdf/10.1145/3409963.3410496">APSys</a></td><td></td></tr><tr><td><a href="papers/2020-ICDEW-START_Self-Tuning_Adaptive_Radix_Tree.pdf">2020-ICDEW-START_Self-Tuning_Adaptive_Radix_Tree</a></td><td><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=\&amp;arnumber=9094133">ICDE</a></td><td></td></tr><tr><td><a href="papers/2020-NeurIPS-Learned_Indexes_for_a_Google-scale_Disk-based_Database.pdf">2020-NeurIPS-Learned Indexes for a Google-scale Disk-based Database</a></td><td><a href="https://arxiv.org/pdf/2012.12501.pdf">arXiv</a></td><td></td></tr><tr><td><a href="papers/2020-OSDI-Bourbon_learned_LSM.pdf">2020-OSDI-Bourbon_learned_LSM</a></td><td><a href="https://dl.acm.org/doi/pdf/10.5555/3488766.3488775">OSDI</a></td><td></td></tr><tr><td><a href="papers/2020-OSDI-Bourbon_learned_LSM_slides.pdf">2020-OSDI-Bourbon_learned_LSM_slides</a></td><td><a href="https://dl.acm.org/doi/pdf/10.5555/3488766.3488775">OSDI</a></td><td></td></tr><tr><td><a href="papers/2020-PPoPP-XIndex_A_Scalable_Learned_Index_for_Multicore_Data_Storage.pdf">2020-PPoPP-XIndex_A Scalable Learned Index for Multicore Data Storage</a></td><td><a href="https://dl.acm.org/doi/pdf/10.1145/3332466.3374547">PPoPP</a></td><td></td></tr><tr><td><a href="papers/2020-VLDB-PGM-index_fully-dynamic_compressed_worst-case_bounds.pdf">2020-VLDB-PGM-index_fully-dynamic_compressed_worst-case_bounds</a></td><td><a href="https://dl.acm.org/doi/pdf/10.14778/3389133.3389135">PVLDB</a></td><td></td></tr><tr><td><a href="papers/2020-SIGMOD-ALEX_Updatable_Adaptive_Learned_Index.pdf">2020-SIGMOD-ALEX_Updatable_Adaptive_Learned_Index</a></td><td><a href="https://dl.acm.org/doi/pdf/10.1145/3318464.3389711">Sigmod</a></td><td></td></tr><tr><td><a href="papers/2020-SIGMOD-CDFShop_Exploring_and_Optimizing_Learned_Index_Structures.pdf">2020-SIGMOD-CDFShop Exploring and Optimizing Learned Index Structures</a></td><td><a href="https://dl.acm.org/doi/pdf/10.1145/3318464.3384706">Sigmod</a></td><td></td></tr><tr><td><a href="papers/2020-SIGMOD-Order-Preserving_Key_Compression_for_In-Memory_Search_Trees.pdf">2020-SIGMOD-Order-Preserving Key Compression for In-Memory Search Trees</a></td><td><a href="https://dl.acm.org/doi/pdf/10.1145/3318464.3380583">Sigmod</a></td><td></td></tr><tr><td><a href="papers/2020-SIGMOD-Order-Preserving_Key_Compression_for_In-Memory_Search_Trees_slides.pdf">2020-SIGMOD-Order-Preserving Key Compression for In-Memory Search Trees_slides</a></td><td><a href="https://dl.acm.org/doi/pdf/10.1145/3318464.3380583">Sigmod</a></td><td></td></tr><tr><td><a href="papers/2020-SIGMOD-The_Case_for_a_Learned_Sorting_Algorithm.pdf">2020-SIGMOD-The Case for a Learned Sorting Algorithm</a></td><td><a href="https://dl.acm.org/doi/pdf/10.1145/3318464.3389752">Sigmod</a></td></tr></tbody></table></div><hr><h5 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h5><div class="table-container"><table><thead><tr><th>发表年份</th><th>原文地址</th><th>Code</th></tr></thead><tbody><tr><td><a href="papers/2021-AIDB-PLEX_RS+CHT.pdf">2021-AIDB-PLEX_RS+CHT</a></td><td><a href="https://arxiv.org/pdf/2108.05117.pdf">AIDB</a></td><td></td></tr><tr><td><a href="papers/2021-AIDB-RSS_Bounding_the_Last_Mile-Efficient_Learned_String_Indexing.pdf">2021-AIDB-RSS_Bounding_the_Last_Mile-Efficient_Learned_String_Indexing</a></td><td><a href="https://arxiv.org/pdf/2111.14905.pdf">AIDB</a></td><td></td></tr><tr><td><a href="papers/2021-aiDM-RUSLI_Real-time_Updatable_Spline_Learned_Index.pdf">2021-aiDM-RUSLI_Real-time_Updatable_Spline_Learned_Index</a></td><td><a href="https://dl.acm.org/doi/pdf/10.1145/3464509.3464886">aiDM</a></td><td></td></tr><tr><td><a href="papers/2021-aiDM-Tailored_Regression_Learned_Indexes-Logarithmic-Error-Regression.pdf">2021-aiDM-Tailored_Regression_Learned_Indexes-Logarithmic-Error-Regression</a></td><td><a href="https://dl.acm.org/doi/pdf/10.1145/3464509.3464891">aiDM</a></td><td><a href="https://github.com/umatin/LogarithmicErrorRegression">LogarithmicErrorRegression</a></td></tr><tr><td><a href="papers/2021-arXiv-Micro-architectural_Analysis_of_a_Learned_Index.pdf">2021-arXiv-Micro-architectural Analysis of a Learned Index</a></td><td><a href="https://dl.acm.org/doi/pdf/10.1145/3533702.3534917">arXiv</a></td><td></td></tr><tr><td><a href="papers/2021-arXiv-Pluggable_Learned_Index_Method_via_Sampling_and_Gap_Insertion.pdf">2021-arXiv-Pluggable_Learned_Index_Method_via_Sampling_and_Gap_Insertion</a></td><td><a href="https://arxiv.org/pdf/2101.00808.pdf">arXiv</a></td><td></td></tr><tr><td><a href="papers/2021-EDBT-Shift-Table_A_Low-latency_Learned_Index_for_Range_Queries_using_Model_Correction.pdf">2021-EDBT-Shift-Table A Low-latency Learned Index for Range Queries using Model Correction</a></td><td><a href="https://arxiv.org/pdf/2101.10457.pdf">EDBT</a></td><td></td></tr><tr><td><a href="papers/2021-ICDEW-Towards_a_Benchmark_for_Learned_Systems.pdf">2021-ICDEW-Towards a Benchmark for Learned Systems</a></td><td><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=\&amp;arnumber=9438803">ICDE</a></td><td></td></tr><tr><td><a href="papers/2021-PVLDB-Benchmarking_Learned_Indexes.pdf">2021-PVLDB-Benchmarking_Learned_Indexes</a></td><td><a href="https://dl.acm.org/doi/pdf/10.14778/3421424.3421425">PVLDB</a></td><td></td></tr><tr><td><a href="papers/2021-PVLDB-Endownment-learned_cardition.pdf">2021-PVLDB-Endownment-learned_cardition</a></td><td><a href="https://dl.acm.org/doi/pdf/10.14778/3461535.3461552">PVLDB</a></td><td></td></tr><tr><td><a href="papers/2021-PVLDB-FINEdex-Fine-grained_for_Scalable_Concurrent_Memory_Systems.pdf">2021-PVLDB-FINEdex-Fine-grained_for_Scalable_Concurrent_Memory_Systems</a></td><td><a href="https://dl.acm.org/doi/pdf/10.14778/3489496.3489512">PVLDB</a></td><td></td></tr><tr><td><a href="papers/2021-PVLDB-LIPP_Updatable_Learned_Index_Precise_Positions.pdf">2021-PVLDB-LIPP_Updatable_Learned_Index_Precise_Positions</a></td><td><a href="https://dl.acm.org/doi/pdf/10.14778/3457390.3457393">PVLDB</a></td><td><a href="https://github.com/Jiacheng-WU/lipp">lipp</a></td></tr></tbody></table></div><hr><h5 id="2022"><a href="#2022" class="headerlink" title="2022"></a>2022</h5><div class="table-container"><table><thead><tr><th>发表年份</th><th>原文地址</th><th>Code</th></tr></thead><tbody><tr><td><a href="papers/2022-aiDB-AutoIndex_Automatically_Finding_Optimal_Index_Structure.pdf">2022-aiDB-AutoIndex_Automatically_Finding_Optimal_Index_Structure</a></td><td><a href="https://arxiv.org/pdf/2208.03823.pdf">aiDB</a></td><td></td></tr><tr><td><a href="papers/2022-aiDM-LSI-Learned_Secondary_Index_Structure.pdf">2022-aiDM-LSI-Learned_Secondary_Index_Structure</a></td><td><a href="https://dl.acm.org/doi/pdf/10.1145/3533702.3534912">aiDM</a></td><td></td></tr><tr><td><a href="papers/2022-ICLR_learned_index_with_dynamic_eps.pdf">2022-ICLR_learned_index_with_dynamic_eps</a></td><td><a href="https://openreview.net/pdf?id=VyZRObZ19kt">ICLR</a></td><td></td></tr><tr><td><a href="papers/2022-learned_Similarity_Search.pdf">2022-learned_Similarity_Search</a></td><td><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=\&amp;arnumber=9891778">IEEE</a></td><td></td></tr><tr><td><a href="papers/2022-PVLDB-are_updatable_learned_index_ready.pdf">2022-PVLDB-are_updatable_learned_index_ready </a></td><td><a href="https://dl.acm.org/doi/pdf/10.14778/3551793.3551848">PVLDB</a></td><td></td></tr><tr><td><a href="papers/2022-PVLDB-Endowment-Can_Learned_Models_Replace_Hash_Functions.pdf">2022-PVLDB-Endowment-Can_Learned_Models_Replace_Hash_Functions</a></td><td><a href="https://dl.acm.org/doi/pdf/10.14778/3570690.3570702">PVLDB</a></td><td></td></tr><tr><td><a href="papers/2022-PVLDB-Endowment-FILM-for-Larger-than-Memory-Databases.pdf">2022-PVLDB-Endowment-FILM-for-Larger-than-Memory-Databases</a></td><td><a href="https://dl.acm.org/doi/pdf/10.14778/3570690.3570704">PVLDB</a></td><td></td></tr><tr><td><a href="papers/2022-TOS-The_Concurrent_Learned_Indexes_for_Multicore_Data_Storage.pdf">2022-TOS-The Concurrent Learned Indexes for Multicore Data Storage</a></td><td><a href="https://dl.acm.org/doi/pdf/10.1145/3478289">TOS</a></td><td></td></tr><tr><td><a href="papers/2022-VLDB-APEX_Learned_Index_PM.pdf">2022-VLDB-APEX_Learned_Index_PM</a></td><td><a href="https://dl.acm.org/doi/pdf/10.14778/3494124.3494141">VLDB</a></td><td></td></tr><tr><td><a href="papers/2022-VLDB-NFL_Learned_Index_Distribution_Transformation.pdf">2022-VLDB-NFL_Learned_Index_Distribution_Transformation</a>: it transforms keys distribution to make it more linear.</td><td><a href="https://dl.acm.org/doi/pdf/10.14778/3547305.3547322">VLDB</a></td></tr></tbody></table></div><hr><h5 id="2023"><a href="#2023" class="headerlink" title="2023"></a>2023</h5><div class="table-container"><table><thead><tr><th>发表年份</th><th>原文地址</th><th>Code</th></tr></thead><tbody><tr><td><a href="papers/2023-arXiv-DILI_A_Distribution-Driven_Learned_Index.pdf">2023-arXiv-DILI_A Distribution-Driven Learned Index</a>  Using more bulk loading time for better lookup.</td><td><a href="https://arxiv.org/pdf/2304.08817.pdf">arXiv</a></td><td></td></tr><tr><td><a href="papers/2023-arxiv-Updatable_Learned_Indexes_Disk-Resident_DBMS.pdf">2023-arXiv-Updatable_Learned_Indexes_Disk-Resident_DBMS</a></td><td><a href="https://dl.acm.org/doi/pdf/10.1145/3589284">arXiv</a></td><td></td></tr><tr><td><a href="papers/2023-ASPLOS-LeaFTL-leared_FTL_for_SSD.pdf">2023-ASPLOS-LeaFTL- A Learning-Based Flash Translation Layer for Solid-State Drives</a></td><td><a href="https://dl.acm.org/doi/pdf/10.1145/3575693.3575744">ASPLOS</a></td><td></td></tr><tr><td><a href="papers/2023-FAST-ROLEX.pdf">2023-FAST-ROLEX</a></td><td></td><td></td></tr><tr><td><a href="papers/2023-PVLDB-Learned_Index_A_Comprehensive_Experimental_Evaluation.pdf">2023-PVLDB-Learned Index_A Comprehensive Experimental Evaluation</a></td><td><a href="https://dl.acm.org/doi/pdf/10.14778/3594512.3594528">PVLDB</a></td></tr></tbody></table></div><hr><h4 id="1-2-类别"><a href="#1-2-类别" class="headerlink" title="1.2 类别"></a>1.2 类别</h4><h5 id="Survey-Benchmark-Tuning"><a href="#Survey-Benchmark-Tuning" class="headerlink" title="Survey/Benchmark/Tuning"></a>Survey/Benchmark/Tuning</h5><ol><li><a href="papers/2019-arXiv-A_Benchmark_for_Learned_Indexes.pdf">2019-arXiv-A Benchmark for Learned Indexes</a></li><li><a href="papers/2020-SIGMOD-CDFShop_Exploring_and_Optimizing_Learned_Index_Structures.pdf">2020-SIGMOD-demo-CDFShop-tuning_RMI</a></li><li><a href="papers/2021-PVLDB-Benchmarking_Learned_Indexes.pdf">2021-PVLDB-Benchmarking_Learned_Indexes</a></li><li><a href="papers/2021-aiDM-Tailored_Regression_Learned_Indexes-Logarithmic-Error-Regression.pdf">2021-aiDM-Tailored_Regression_Learned_Indexes-Logarithmic-Error-Regression</a></li><li><a href="papers/2022-PVLDB-are_updatable_learned_index_ready.pdf">2022-are_updatable_learned_index_ready</a></li><li><a href="papers/2023-PVLDB-Learned_Index_A_Comprehensive_Experimental_Evaluation.pdf">2023-PVLDB-Endowment-Comprehensive_Experimental_Evaluation</a></li></ol><h5 id="Read-only"><a href="#Read-only" class="headerlink" title="Read-only"></a>Read-only</h5><ol><li><a href="papers/2018-SIGMOD-The_Case_for_Learned_Index_Structures.pdf">2018-SIGMOD-The Case for Learned Index Structures</a></li><li><a href="papers/2020-aiDM-RadixSpline_A_Single-Pass_Learned_Index.pdf">2020-aiDM-RadixSpline_A Single-Pass Learned Index</a></li><li><a href="papers/2020-NeurIPS-Learned_Indexes_for_a_Google-scale_Disk-based_Database.pdf">2020-NeurIPS-Learned Indexes for a Google-scale Disk-based Database</a></li><li><a href="papers/2021-AIDB-PLEX_RS+CHT.pdf">2021-AIDB-PLEX_RS+CHT</a>: RadixSpine as the top + Compact Hist-Tree as the bottom</li><li><a href="papers/2021-AIDB-RSS_Bounding_the_Last_Mile-Efficient_Learned_String_Indexing.pdf">2021-AIDB-RSS_Bounding_the_Last_Mile-Efficient_Learned_String_Indexing</a></li></ol><h5 id="Updatable"><a href="#Updatable" class="headerlink" title="Updatable"></a>Updatable</h5><ol><li><a href="papers/2019-SIGMOD-FITing-Tree_A_Data-aware_Index_Structure.pdf">2019-SIGMOD-FITing-Tree_A Data-aware Index Structure</a></li><li><a href="papers/2020-SIGMOD-ALEX_Updatable_Adaptive_Learned_Index.pdf">2020-SIGMOD-ALEX_Updatable_Adaptive_Learned_Index</a> Use gapped array for SMO</li><li><a href="papers/2020-VLDB-PGM-index_fully-dynamic_compressed_worst-case_bounds.pdf">2020-VLDB-PGM-index_fully-dynamic_compressed_worst-case_bounds</a></li><li><a href="papers/2021-PVLDB-LIPP_Updatable_Learned_Index_Precise_Positions.pdf">2021-PVLDB-LIPP_Updatable_Learned_Index_Precise_Positions</a></li><li><a href="papers/2021-aiDM-RUSLI_Real-time_Updatable_Spline_Learned_Index.pdf">2021-aiDM-RUSLI_Real-time_Updatable_Spline_Learned_Index</a></li><li><a href="papers/2022-TOS-The_Concurrent_Learned_Indexes_for_Multicore_Data_Storage.pdf">2022-TOS-Xindex-most-recent</a></li><li><a href="papers/2023-FAST-ROLEX.pdf">2023-FAST-ROLEX</a></li><li><a href="papers/2023-arXiv-DILI_A_Distribution-Driven_Learned_Index.pdf">2023-arxiv-DILI-A Distribution-Driven Learned Index</a> Using more bulk loading time for better lookup.</li></ol><h5 id="Secondary-Storage-Persistent-Memory-LSM"><a href="#Secondary-Storage-Persistent-Memory-LSM" class="headerlink" title="Secondary Storage/Persistent Memory/LSM"></a>Secondary Storage/Persistent Memory/LSM</h5><ol><li><a href="papers/2019-arXiv-A_Scalable_Learned_Index_Scheme_in_Storage_Systems.pdf">2019-arXiv-A Scalable Learned Index Scheme in Storage Systems</a>: the initial version of FINEdex</li><li><a href="papers/2020-NeurIPS-Learned_Indexes_for_a_Google-scale_Disk-based_Database.pdf">2020-NeurIPS-Learned Indexes for a Google-scale Disk-based Database</a></li><li><a href="papers/2020-OSDI-Bourbon_learned_LSM.pdf">2020-OSDI-Bourbon_learned_LSM</a></li><li><a href="papers/2020-OSDI-Bourbon_learned_LSM_slides.pdf">2020-OSDI-Bourbon_learned_LSM_slides</a></li><li><a href="papers/2022-aiDM-LSI-Learned_Secondary_Index_Structure.pdf">2022-aiDM-LSI-Learned_Secondary_Index_Structure</a></li><li><a href="papers/2022-VLDB-APEX_Learned_Index_PM.pdf">2022-VLDB-APEX_Learned_Index_PM</a></li><li><a href="papers/2022-PVLDB-Endowment-FILM-for-Larger-than-Memory-Databases.pdf">2022-PVLDB-Endowment-FILM-for-Larger-than-Memory-Databases</a></li><li><a href="papers/2023-arxiv-Updatable_Learned_Indexes_Disk-Resident_DBMS.pdf">2023-arxiv-Updatable_Learned_Indexes_Disk-Resident_DBMS</a></li></ol><h5 id="Radix-Spine-based"><a href="#Radix-Spine-based" class="headerlink" title="Radix-Spine based"></a>Radix-Spine based</h5><ol><li><a href="papers/2020-aiDM-RadixSpline_A_Single-Pass_Learned_Index.pdf">2020-aiDM-Radix_Spline</a>: Using linear spine fits to a CDF, then a flat radix table as an appoximate index.</li><li><a href="papers/2021-AIDB-RSS_Bounding_the_Last_Mile-Efficient_Learned_String_Indexing.pdf">2021-AIDB-RSS_Bounding_the_Last_Mile-Efficient_Learned_String_Indexing</a></li><li><a href="papers/2021-AIDB-PLEX_RS+CHT.pdf">2021-AIDB-PLEX_RS+CHT</a></li><li><a href="papers/2021-aiDM-RUSLI_Real-time_Updatable_Spline_Learned_Index.pdf">2021-aiDM-RUSLI_Real-time_Updatable_Spline_Learned_Index</a></li></ol><h5 id="Variable-length-string-keys"><a href="#Variable-length-string-keys" class="headerlink" title="Variable length string keys"></a>Variable length string keys</h5><ol><li><a href="papers/2020-APSys-SIndex_A_Scalable_Learned_Index_for_String_Keys.pdf">2020-APSys-SIndex_Scalable_Learned_Index__String_Keys</a></li><li><a href="papers/2021-AIDB-RSS_Bounding_the_Last_Mile-Efficient_Learned_String_Indexing.pdf">2021-AIDB-RSS_Bounding_the_Last_Mile-Efficient_Learned_String_Indexing</a></li><li><a href="papers/2020-SIGMOD-Order-Preserving_Key_Compression_for_In-Memory_Search_Trees.pdf">2020-SIGMOD-HOPE</a>: not learned index, but an encoding schme; order persevering encoding for string; can be used for string learned indexes</li><li><a href="papers/2020-SIGMOD-Order-Preserving_Key_Compression_for_In-Memory_Search_Trees_slides.pdf">2020-SIGMOD-HOPE_slides</a></li></ol><h5 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h5><ol><li><a href="papers/2020-PPoPP-XIndex_A_Scalable_Learned_Index_for_Multicore_Data_Storage.pdf">2020-PPoPP-XIndex_Scalable_Learned_Index_for_Multicore_Data_Storage</a></li><li><a href="papers/2020-APSys-SIndex_A_Scalable_Learned_Index_for_String_Keys.pdf">2020-APSys-SIndex_Scalable_Learned_Index_String_Keys</a></li><li><a href="papers/2021-PVLDB-FINEdex-Fine-grained_for_Scalable_Concurrent_Memory_Systems.pdf">2021-PVLDB-FINEdex-Fine-grained_for_Scalable_Concurrent_Memory_Systems</a></li><li><a href="papers/2022-TOS-The_Concurrent_Learned_Indexes_for_Multicore_Data_Storage.pdf">2022-TOS-Xindex-most-recent</a></li></ol><h5 id="Applications"><a href="#Applications" class="headerlink" title="Applications"></a>Applications</h5><ol><li><a href="papers/2020-SIGMOD-The_Case_for_a_Learned_Sorting_Algorithm.pdf">2020-SIGMOD_The_Case_for_a_Learned_Sorting_Algorithm</a></li><li><a href="papers/2022-PVLDB-Endowment-Can_Learned_Models_Replace_Hash_Functions.pdf">2022-PVLDB-Endowment-Can_Learned_Models_Replace_Hash_Functions </a></li><li><a href="papers/2022-learned_Similarity_Search.pdf">2022-learned_Similarity_Search</a></li><li><a href="papers/2023-ASPLOS-LeaFTL-leared_FTL_for_SSD.pdf">2023-ASPLOS-LeaFTL-Learning-Based Flash Translation Layer for Solid-State Drives</a> Learned index for SSD FTL page-level memory mapping.</li></ol><hr><h3 id="1-2-教程"><a href="#1-2-教程" class="headerlink" title="1.2 教程"></a>1.2 教程</h3><p><a href="https://blog.csdn.net/weixin_44026604/article/details/120776283">SIndex 论文笔记：A Scalable Learned Index for String Keys-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/277979207">OSDI20 - Bourbon: Learned Index for LSM - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 论文整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文整理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyHexoBlog</title>
      <link href="posts/22ca.html"/>
      <url>posts/22ca.html</url>
      
        <content type="html"><![CDATA[<h2 id="MyHexoBlog"><a href="#MyHexoBlog" class="headerlink" title="MyHexoBlog"></a>MyHexoBlog</h2><p>首先，GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。同时，Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。所以，我们可以先在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。这样别人就能通过网址访问啦。</p><p><strong>优点：</strong>完全免费；静态站点，轻量快速；可按需求自由定制改造；托管在 GitHub，安全省心；迁移方便。</p><p><strong>不足：</strong>发文不便，依赖于本地环境；更适合个人博客使用；GitHub 在国内访问速度有点不快【gitee亦可】。</p><hr><h3 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h3><h4 id="下载安装-Node-js"><a href="#下载安装-Node-js" class="headerlink" title="下载安装 Node.js"></a>下载安装 Node.js</h4><p> 下载官网：<a href="https://nodejs.org/en">Node.js — Run JavaScript Everywhere (nodejs.org)</a>。 </p><p>安装参考教程：<a href="https://zhuanlan.zhihu.com/p/442215189">node.js安装及环境配置超详细教程【Windows系统安装包方式】 - 知乎 (zhihu.com)</a>。</p><p><strong>注意：可以变更缓存及包下载路径，但C盘够用，则不推荐变更</strong>。</p><p>① 打开安装的目录（默认安装情况下在C:\Program Files\nodejs）</p><pre class=" language-lang-bash"><code class="language-lang-bash">E:\EnvironmentSetting\NodeJs</code></pre><p>② 在安装目录下新建两个文件夹【node_global】和【node_cache】</p><p>③ 使用管理员权限打开 cmd 命令窗口，输入 <code>npm config set prefix “你的路径\node_global”</code> ：</p><pre class=" language-lang-bash"><code class="language-lang-bash">// 原位置npm config set prefix "C:\Users\用户名\AppData\Roaming\npm\node_global"// 新位置npm config set prefix "E:\EnvironmentSetting\NodeJs\node_global"// 查看位置npm root -g // 重置npm config delete prefix</code></pre><p>④ <code>npm config set cache “你的路径\node_cache”</code> ：</p><pre class=" language-lang-bash"><code class="language-lang-bash">// 原位置npm config set cache "C:\Users\用户名\AppData\Roaming\node_cache"// 新位置npm config set cache "E:\EnvironmentSetting\NodeJs\node_cache"</code></pre><p>⑤设置环境变量，打开【系统属性】-【高级】-【环境变量】，在<code>系统变量</code>中新建</p><p>变量名：<code>NODE_PATH</code> </p><p>变量值：<code>E:\EnvironmentSetting\NodeJs\node_global\node_modules</code> </p><p>⑥ 编辑<code>用户变量（环境变量）</code>的 path，将默认的 C 盘下 <code>APPData\Roaming\npm</code> 修改成  </p><p><code>C:\Program Files\nodejs\node_global</code>，点击确定。</p><p>最后在系统 <code>Path</code>里面添加<code>%NODE_PATH%</code> 。执行 <code>npm root -g</code> 查看位置是否变更。</p><p>⑦ 测试：配置完成后，安装个module测试下，咱们就安装最经常使用的express模块，打开cmd窗口，输入以下命令进行模块的全局安装：</p><pre class=" language-lang-bash"><code class="language-lang-bash">npm install express -g   // -g是全局安装的意思</code></pre><hr><h4 id="下载安装-Git"><a href="#下载安装-Git" class="headerlink" title="下载安装 Git"></a>下载安装 Git</h4><p>下载官网：<a href="https://git-scm.com/book/zh/v2/起步-安装-Git">Git - 安装 Git (git-scm.com)</a>。</p><p>安装参考教程：<a href="https://zhuanlan.zhihu.com/p/443527549">Git下载安装教程：git安装步骤手把手图文【超详细】 - 知乎 (zhihu.com)</a>。</p><p>安装参考教程：<a href="https://blog.csdn.net/mukes/article/details/115693833">Git 详细安装教程（详解 Git 安装过程的每一个步骤）_git安装-CSDN博客</a>。</p><p>安装完成后，Win+R 输入 cmd ，输入 <code>node -v</code>、<code>npm -v</code> 和 <code>git --version</code> 并回车，查看程序版本号。</p><hr><h4 id="配置-Github"><a href="#配置-Github" class="headerlink" title="配置 Github"></a>配置 Github</h4><p>使用邮箱注册 <a href="https://link.zhihu.com/?target=https%3A//github.com/">GitHub</a> 账户，选择免费账户（Free），并完成邮件验证。</p><p>右键 -&gt; Git Bash Here，<strong>设置用户名和邮箱</strong>：</p><pre class=" language-lang-bash"><code class="language-lang-bash">git config --global user.name "GitHub 用户名"git config --global user.email "GitHub 邮箱"# 查看用户名及邮箱git config user.name git config user.email</code></pre><p><strong>创建 SSH 密匙</strong>：</p><p>输入 <code>ssh-keygen -t rsa -C "GitHub 邮箱"</code>，然后一路回车。</p><pre class=" language-lang-bash"><code class="language-lang-bash">ssh-keygen -t rsa -C "GitHub 邮箱"</code></pre><p><strong>添加密匙</strong>：</p><p>进入 [C:\Users\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p><p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p><p><strong>验证连接</strong>：</p><p>打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。</p><pre class=" language-lang-bash"><code class="language-lang-bash">ssh -T git@github.com</code></pre><p>显示 “Hi xxx! You’ve successfully……” 即连接成功。</p><h4 id="创建公有仓库"><a href="#创建公有仓库" class="headerlink" title="创建公有仓库"></a>创建公有仓库</h4><p>GitHub 主页右上角加号 -&gt; New repository：</p><ul><li>Repository name 中输入 <code>用户名.github.io</code> </li><li>勾选 “Initialize this repository with a README”</li><li>Description 选填</li></ul><p>填好后点击 Create repository 创建，创建后默认自动启用 HTTPS.</p><p>博客地址为：<code>https://用户名.github.io</code>。</p><p>gitee配置Page可参考博客：<a href="https://blog.csdn.net/weixin_38705239/article/details/100161188#:~:text=你可以使用 Gitee 来 部署静态 网页。 以下是详细的步骤： 1. 在,2. 将你的 静态 网页代码上传到该仓库中。 3. 在仓库的主页，点击右上角的 &quot;Settings&quot; 进入仓库设置。">在gitee上免费部署静态网站_在gitee上部署静态网站</a>。</p><hr><h3 id="2-Hexo"><a href="#2-Hexo" class="headerlink" title="2. Hexo"></a>2. Hexo</h3><p>新建一个文件夹用来存放 Hexo 程序文件，如 <code>MyHexoBlog</code>。cmd 进入该文件夹。</p><h4 id="2-1-安装-Hexo"><a href="#2-1-安装-Hexo" class="headerlink" title="2.1 安装 Hexo"></a>2.1 安装 Hexo</h4><p><strong>使用 npm 一键安装 Hexo 博客程序</strong>：【<strong>若失败，要么开启VPN，要么更换node的镜像源</strong>】</p><pre class=" language-lang-bash"><code class="language-lang-bash">npm install -g hexo-cli</code></pre><h4 id="2-2-初始化和本地预览"><a href="#2-2-初始化和本地预览" class="headerlink" title="2.2 初始化和本地预览"></a>2.2 初始化和本地预览</h4><p><strong>初始化并安装所需组件</strong>：</p><pre class=" language-lang-bash"><code class="language-lang-bash">hexo init      # 初始化npm install    # 安装组件</code></pre><p>若报<code>hexo</code> 未识别，可参考该篇博客：<a href="https://blog.csdn.net/Deng872347348/article/details/121646375">安装hexo时出现的问题：‘hexo‘ 不是内部或外部命令。</a>。</p><p>完成后依次输入下面命令，<strong>启动本地服务器进行预览</strong>：</p><pre class=" language-lang-bash"><code class="language-lang-bash">hexo g   # 生成页面hexo s   # 启动预览</code></pre><p><strong>访问</strong> <code>http://localhost:4000</code>，出现 Hexo 默认页面，本地博客安装成功！</p><p><strong>Tips：</strong>如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 <code>hexo server -p 5000</code> 更改端口号后重试。Hexo 博客文件夹目录结构如下：</p><p><img src="https://pic1.zhimg.com/80/v2-264c75c0e493ae8cc5f283567c64ff2c_720w.webp" alt></p><h4 id="2-3-部署到-GitHub-Pages"><a href="#2-3-部署到-GitHub-Pages" class="headerlink" title="2.3 部署到 GitHub Pages"></a>2.3 部署到 GitHub Pages</h4><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p><p>首先<strong>安装 hexo-deployer-git</strong>：</p><pre class=" language-lang-bash"><code class="language-lang-bash">npm install hexo-deployer-git --save</code></pre><p>然后<strong>修改 _config.yml</strong> 文件末尾的 Deployment 部分，修改成如下：</p><pre class=" language-lang-bash"><code class="language-lang-bash">deploy:  type: git  repository: git@github.com:flyboy716/flyboy716.github.io.git  branch: master</code></pre><p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p><pre class=" language-lang-bash"><code class="language-lang-bash">hexo d</code></pre><p>完成！这时访问我们的 GitHub 域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p><hr><h4 id="2-4-绑定域名-可选"><a href="#2-4-绑定域名-可选" class="headerlink" title="2.4 绑定域名-可选"></a>2.4 绑定域名-可选</h4><p>博客搭建完成使用的是 GitHub 的子域名（用户名.<a href="https://link.zhihu.com/?target=http%3A//github.io">http://github.io</a>），我们可以为 Hexo 博客绑定自己的域名替换 GitHub 域名，更加个性化和专业，也利于 SEO。</p><p>我们使用 <a href="https://link.zhihu.com/?target=https%3A//www.namesilo.com/%3Frid%3Dd27fa32do">Namesilo</a> 进行注册，便宜好用没啥套路，使用优惠码 <code>okoff</code> 优惠一美元，com 域名大概 50 块一年。</p><p><strong>域名注册和解析</strong>：</p><ul><li>域名注册和解析教程：<a href="https://zhuanlan.zhihu.com/p/33921436">Namesilo 域名购买及使用教程</a></li></ul><p>按上面教程注册并解析域名，在 DNS 设置部分，删除自带的记录，然后添加 CNAME 记录将 www 域名解析指向 <code>用户名.github.io</code>。</p><p><strong>绑定域名到 Hexo 博客</strong>：</p><p>进入本地博客文件夹的 source 目录，打开记事本，里面输入自己的域名，如 <a href="http://www.example.com，保存名称为">http://www.example.com，保存名称为</a> “CNAME”，格式为 “所有文件”（无 .txt 后缀）。</p><p>清除缓存等文件并重新发布网站：</p><pre class=" language-lang-bash"><code class="language-lang-bash">hexo clean   # 清除缓存文件等hexo g       # 生成页面hexo s       # 启动预览</code></pre><p>现在就可以使用自己的域名访问 Hexo 博客了。</p><p><strong>开启 HTTPS</strong>：配置自己的域名后，需要我们手动开启 HTTPS。打开博客所在 GitHub 仓库，Settings -&gt; 下拉找到 GitHub Pages -&gt; 勾选 Enforce HTTPS。</p><p>HTTPS 证书部署成功需要一定时间，等大概几分钟再访问域名，就可以看到域名前面的小绿锁了，HTTPS 配置完成！</p><hr><h4 id="2-5-开始使用"><a href="#2-5-开始使用" class="headerlink" title="2.5 开始使用"></a>2.5 开始使用</h4><p><strong>发布文章</strong>：</p><p>进入博客所在目录，右键打开 Git Bash Here，创建博文：</p><pre class=" language-lang-bash"><code class="language-lang-bash">hexo new "My New Post"</code></pre><p>然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。</p><p>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。<strong>以后每次发布文章都是这两条命令</strong>。</p><pre class=" language-lang-bash"><code class="language-lang-bash">hexo g   # 生成页面hexo d   # 部署发布</code></pre><hr><p>也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 <code>hexo g</code> 和 <code>hexo d</code> 发布。</p><pre class=" language-lang-bash"><code class="language-lang-bash">---title: Hello World # 标题date: 2019/3/26 hh:mm:ss # 时间categories: # 分类- Diarytags: # 标签- PS3- Games---摘要<!--more-->正文</code></pre><p><strong>网站设置</strong>：</p><p>包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考<a href="https://link.zhihu.com/?target=https%3A//hexo.io/zh-cn/docs/configuration">官方文档</a>按需要编辑。注意：冒号后要加一个空格！</p><p><strong>更换主题</strong>：</p><p>在 <a href="https://link.zhihu.com/?target=https%3A//hexo.io/themes/">Themes | Hexo</a> 选择一个喜欢的主题，比如 <a href="https://link.zhihu.com/?target=http%3A//theme-next.iissnan.com/getting-started.html">NexT</a>，进入网站目录打开 Git Bash Here 下载主题：</p><pre class=" language-lang-text"><code class="language-lang-text">git clone https://github.com/iissnan/hexo-theme-next themes/next</code></pre><p>然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。）</p><h4 id="2-6-常用命令"><a href="#2-6-常用命令" class="headerlink" title="2.6 常用命令"></a>2.6 常用命令</h4><pre class=" language-lang-text"><code class="language-lang-text">hexo new "name"       # 新建文章hexo new page "name"  # 新建页面hexo g                # 生成页面hexo d                # 部署hexo g -d             # 生成页面并部署hexo s                # 本地预览hexo clean            # 清除缓存和已生成的静态文件hexo help             # 帮助</code></pre><h4 id="2-7-常见问题"><a href="#2-7-常见问题" class="headerlink" title="2.7 常见问题"></a>2.7 常见问题</h4><p><strong>1、Hexo 设置显示文章摘要，首页不显示全文</strong>。</p><p>Hexo 主页文章列表默认会显示文章全文，浏览时很不方便，可以在文章中插入 <code>&lt;!--more--&gt;</code> 进行分段。</p><p>该代码前面的内容会作为摘要显示，而后面的内容会替换为 “Read More” 隐藏起来。</p><p><strong>2、设置网站图标</strong>。</p><p>进入 themes/主题 文件夹，打开 _config.yml 配置文件，找到 favicon 修改，一般格式为：<code>favicon: 图标地址</code>。（不同主题可能略有差别）</p><p><strong>3、修改并部署后没有效果</strong>。</p><p>使用 <code>hexo clean</code> 清理后重新部署。</p><p><strong>4、开启 HTTPS 后访问网站显示连接不安全？</strong></p><p>证书还未部署生效，等待一会儿，清除浏览器缓存再试。</p><p><strong>5、Mac 安装 Hexo 报错无法安装</strong>。</p><p>Mac 用户需要管理员权限运行，使用 <code>sudo npm install -g hexo-cli</code> 命令安装。</p><p><strong>6、npm 下载速度慢，甚至完全没反应</strong>。</p><p>使用 npm 安装程序等待很久也没反应，或者下载速度很慢，可以更换 npm 源为国内 npm 镜像。</p><p>临时更换方法：在 npm 安装命令后面加上：</p><pre class=" language-lang-text"><code class="language-lang-text">--registry https://registry.npm.taobao.org</code></pre><hr><h4 id="2-8-结语"><a href="#2-8-结语" class="headerlink" title="2.8 结语"></a>2.8 结语</h4><p>Hexo 是一种纯静态的博客，我们必须要在本地完成文章的编辑再部署到 GitHub 上，依赖于本地环境。不能像 WordPress 或 Typecho 那样的动态博客一样能直接在浏览器中完成撰文和发布。</p><p>可以说是一种比较极客的写博客方式，但是优势也是明显的——免费稳定省心，比较适合爱折腾研究的用户，或者没有在线发文需求的朋友。</p><hr><h3 id="3-主题"><a href="#3-主题" class="headerlink" title="3. 主题"></a>3. 主题</h3><h4 id="3-1-Matery"><a href="#3-1-Matery" class="headerlink" title="3.1 Matery"></a>3.1 Matery</h4><p>官方参考地址：<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">hexo-theme-matery/README_CN.md</a>。</p><p><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#searchModal">Hexo博客主题之hexo-theme-matery的介绍 | 闪烁之狐 </a>。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
